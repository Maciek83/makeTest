{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/adminpanel/adminpanel.component.ts","webpack:///src/app/adminpanel/adminpanel.component.html","webpack:///src/app/app-materia.module.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/home/home.component.ts","webpack:///src/app/home/home.component.html","webpack:///src/app/interceptor/http.interceptor.ts","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/login/login.model.ts","webpack:///src/app/menu/menu.component.ts","webpack:///src/app/menu/menu.component.html","webpack:///src/app/questions/addquestion/addquestion.component.ts","webpack:///src/app/questions/addquestion/addquestion.component.html","webpack:///src/app/questions/editquestion/editquestion.component.ts","webpack:///src/app/questions/editquestion/editquestion.component.html","webpack:///src/app/questions/question.models.ts","webpack:///src/app/questions/question.service.ts","webpack:///src/app/questions/question/question.component.ts","webpack:///src/app/questions/question/question.component.html","webpack:///src/app/questions/questions.component.ts","webpack:///src/app/questions/questions.component.html","webpack:///src/app/questions/questions.resolver.ts","webpack:///src/app/register/register.component.ts","webpack:///src/app/register/register.component.html","webpack:///src/app/register/reqister.model.ts","webpack:///src/app/services/auth.guard.ts","webpack:///src/app/services/auth.service.ts","webpack:///src/app/testsqa/addtestqa/addtestqa.component.ts","webpack:///src/app/testsqa/addtestqa/addtestqa.component.html","webpack:///src/app/testsqa/edittestqa/edittestqa.component.ts","webpack:///src/app/testsqa/edittestqa/edittestqa.component.html","webpack:///src/app/testsqa/test.models.ts","webpack:///src/app/testsqa/test.resolver.ts","webpack:///src/app/testsqa/test.service.ts","webpack:///src/app/testsqa/testqa/testqa.component.ts","webpack:///src/app/testsqa/testqa/testqa.component.html","webpack:///src/app/testsqa/testqadisplaytosolve/testqadisplaytosolve.component.ts","webpack:///src/app/testsqa/testqadisplaytosolve/testqadisplaytosolve.component.html","webpack:///src/app/testsqa/testqashare/testqashare.component.ts","webpack:///src/app/testsqa/testqashare/testqashare.component.html","webpack:///src/app/testsqa/testshare.resolver.ts","webpack:///src/app/testsqa/testshare.service.ts","webpack:///src/app/testsqa/testshareform/testshareform.component.ts","webpack:///src/app/testsqa/testshareform/testshareform.component.html","webpack:///src/app/testsqa/testsolve.resolver.ts","webpack:///src/app/testsqa/testsolve.service.ts","webpack:///src/app/testsqa/testsolvegetall.resolver.ts","webpack:///src/app/testsqa/testsqa.component.ts","webpack:///src/app/testsqa/testsqa.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AdminpanelComponent","router","navigate","goToCreateQuestions","goToViewQuestions","goToAddTest","goToViewShareTests","goToSharedSolvedTests","selector","templateUrl","styleUrls","impexp","AppMateriaModule","imports","appRoutes","path","redirectTo","pathMatch","component","canActivate","testSolve","testsShare","testsSolved","questions","tests","AppRoutingModule","forRoot","AppComponent","title","AppModule","provide","useClass","multi","declarations","providers","bootstrap","HomeComponent","HttpInterceptorClass","next","console","log","handle","pipe","err","errorMessage","error","ErrorEvent","message","status","alert","providedIn","LoginComponent","authService","loginForm","required","credentials","value","username","password","authenticate","navigateByUrl","login","LoginModel","MenuComponent","authenticated","logout","AddquestionComponent","questionService","questionForm","numberOfQuestionsValidator","model","content","answers","addQuestion","subscribe","clearForm","questionNgForm","resetForm","formarray","get","length","removeAt","push","controls","control","formArray","x","i","correct","onSubmit","onAddQuestion","EditquestionComponent","route","snapshot","params","fetchQuestionToEdit","getSelectedQuestion","forEach","a","addExistingAnswers","existingAnswer","answerEditDto","answerCreateDto","editQuestion","key","clearValidators","updateValueAndValidity","reset","formarrayAnswerEditDto","formarrayAnswerCreateDto","formArrayAnswerEditDto","formArrayAnswerCreateDto","onAddQuestionCreateDtoControls","QuestionSolveModel","answeredAnswers","QuestionCreateModel","QuestionEditModel","AnswerCreateModel","AnswerEditModel","AnsweredAnswerModel","QuestionService","http","selectedQuestion","data","questionEditModel","patch","questionCreateModel","post","element","find","q","QuestionComponent","QuestionsComponent","displayedColumns","removeSelectedQuestion","setSelectedQuestion","QuestionsResolver","state","fetchQuestions","RegisterComponent","registerForm","email","passwordMathValidator","registerModel","name","register","passwordConfirmation","setErrors","mustMatch","RegisterModel","AuthGuard","isAuth","createUrlTree","AuthService","callback","headers","authorization","btoa","response","AddtestqaComponent","testService","questionsAdded","questionsToAdd","testForm","questionsIds","question","addedTableQuestions","renderRows","splice","includes","testNgForm","addTest","EdittestqaComponent","fetchTestToEdit","getSelectedTest","questionDisplayDto","updateTest","TestAddModel","ShareTestModel","points","TestSoveModel","testShareId","TestResolver","fetchTests","TestService","selectedTest","addTestModel","test","TestqaComponent","TestqadisplaytosolveComponent","testSolveService","submited","solveModel","displayModel","setupForm","testSolveForm","getQuestionControlArray","questionArray","index","questionSolveModel","solveTest","d","testSolveModelInfo","formArrayQuestion","answersValidationModel","formArrayAnswers","validationModel","AnswersValidationModel","ii","numberOfCorrect","TestqashareComponent","panelOpenState","displayedColumnsShared","displayedColumnsSolved","TestShareResolver","testShareService","fetchTestsShare","TestShareService","secret","append","TestshareformComponent","numberOfQuestions","testShareForm","validPoints","shareTest","maxpoints","TestSolveResolver","queryParamMap","getTestToSolve","TestSolveService","TestSolveGetAll","getSolvedTests","TestsqaComponent","setSelectedTestToNull","setSelectedTest","t","environment","production","bootstrapModule"],"mappings":";;;;;;;;;;;;;;;;;AAAA,aAASA,wBAAT,CAAkCC,GAAlC,EAAuC;AACtC;AACA;AACA,aAAOC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAW;AACxC,YAAIC,CAAC,GAAG,IAAIC,KAAJ,CAAU,yBAAyBL,GAAzB,GAA+B,GAAzC,CAAR;AACAI,SAAC,CAACE,IAAF,GAAS,kBAAT;AACA,cAAMF,CAAN;AACA,OAJM,CAAP;AAKA;;AACDL,4BAAwB,CAACQ,IAAzB,GAAgC,YAAW;AAAE,aAAO,EAAP;AAAY,KAAzD;;AACAR,4BAAwB,CAACG,OAAzB,GAAmCH,wBAAnC;AACAS,UAAM,CAACC,OAAP,GAAiBV,wBAAjB;AACAA,4BAAwB,CAACW,EAAzB,GAA8B,yCAA9B;;;;;;;;;;;;;;;;ACZA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAQaC,mB;AAEX,mCAAoBC,MAApB,EAAoC;AAAA;;AAAhB,aAAAA,MAAA,GAAAA,MAAA;AAAmB;;;;mCAE/B,CACP;;;8CAEkB;AACjB,eAAKA,MAAL,CAAYC,QAAZ,CAAqB,CAAC,cAAD,CAArB;AACD;;;4CAEgB;AACf,eAAKD,MAAL,CAAYC,QAAZ,CAAqB,CAAC,WAAD,CAArB;AACD;;;sCAEU;AACT,eAAKD,MAAL,CAAYC,QAAZ,CAAqB,CAAC,UAAD,CAArB;AACD;;;6CAEiB;AAChB,eAAKD,MAAL,CAAYC,QAAZ,CAAqB,CAAC,OAAD,CAArB;AACD;;;gDAEoB;AACnB,eAAKD,MAAL,CAAYC,QAAZ,CAAqB,CAAC,YAAD,CAArB;AACD;;;;;;;uBAzBUF,mB,EAAmB,uH;AAAA,K;;;YAAnBA,mB;AAAmB,qC;AAAA,e;AAAA,a;AAAA,sH;AAAA;AAAA;ACRhC;;AACI;;AACI;;AAAI;;AAAgB;;AACpB;;AAA0C;AAAA,mBAAS,IAAAG,mBAAA,EAAT;AAA8B,WAA9B;;AAAgC;;AAAY;;AACtF;;AAA0C;AAAA,mBAAS,IAAAC,iBAAA,EAAT;AAA4B,WAA5B;;AAA8B;;AAAmB;;AAC/F;;AACA;;AACI;;AAAI;;AAAY;;AAChB;;AAA0C;AAAA,mBAAS,IAAAC,WAAA,EAAT;AAAsB,WAAtB;;AAAwB;;AAAY;;AAC9E;;AAA0C;AAAA,mBAAS,IAAAC,kBAAA,EAAT;AAA6B,WAA7B;;AAA+B;;AAAqB;;AAC9F;;AAA0C;AAAA,mBAAS,IAAAC,qBAAA,EAAT;AAAgC,WAAhC;;AAAkC;;AAAwB;;AACxG;;AACJ;;;;;;;;;sEDJaP,mB,EAAmB;cAL/B,uDAK+B;eALrB;AACTQ,kBAAQ,EAAE,gBADD;AAETC,qBAAW,EAAE,6BAFJ;AAGTC,mBAAS,EAAE,CAAC,4BAAD;AAHF,S;AAKqB,Q;;;;;;;;;;;;;;;;;;;;;;AERhC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAcA,QAAMC,MAAM,GAAG,CACb,4DADa,EAEb,sEAFa,EAGb,oEAHa,EAIb,wEAJa,EAKb,oEALa,EAMb,wEANa,EAOb,oEAPa,EAQb,qFARa,EASb,sEATa,EAUb,6EAVa,EAWb,+EAXa,CAAf;;QAsBaC,gB;;;;;YAAAA;;;;yBAAAA,gB;AAAgB,O;AAAA,gBAPlB,CACPD,MADO,CAOkB,EArB3B,4DAqB2B,EApB3B,sEAoB2B,EAnB3B,oEAmB2B,EAlB3B,wEAkB2B,EAjB3B,oEAiB2B,EAhB3B,wEAgB2B,EAf3B,oEAe2B,EAd3B,qFAc2B,EAb3B,sEAa2B,EAZ3B,6EAY2B,EAX3B,+EAW2B;;;;0HAAhBC,gB,EAAgB;AAAA,kBArB3B,4DAqB2B,EApB3B,sEAoB2B,EAnB3B,oEAmB2B,EAlB3B,wEAkB2B,EAjB3B,oEAiB2B,EAhB3B,wEAgB2B,EAf3B,oEAe2B,EAd3B,qFAc2B,EAb3B,sEAa2B,EAZ3B,6EAY2B,EAX3B,+EAW2B;AAXT,kBAVlB,4DAUkB,EATlB,sEASkB,EARlB,oEAQkB,EAPlB,wEAOkB,EANlB,oEAMkB,EALlB,wEAKkB,EAJlB,oEAIkB,EAHlB,qFAGkB,EAFlB,sEAEkB,EADlB,6EACkB,EAAlB,+EAAkB;AAWS,O;AAXT,K;;;;;sEAWPA,gB,EAAgB;cAR5B,sDAQ4B;eARnB;AACRC,iBAAO,EAAE,CACPF,MADO,CADD;AAIRb,iBAAO,EAAC,CACNa,MADM;AAJA,S;AAQmB,Q;;;;;;;;;;;;;;;;;;ACpuBA,QAAMG,SAAS,GAAW,CACxB;AAACC,UAAI,EAAE,EAAP;AAAWC,gBAAU,EAAE,OAAvB;AAAgCC,eAAS,EAAE;AAA3C,KADwB,EAExB;AAACF,UAAI,EAAE,MAAP;AAAeG,eAAS,EAAC;AAAzB,KAFwB,EAGxB;AAACH,UAAI,EAAE,YAAP;AAAqBG,eAAS,EAAC,qFAA/B;AAAoDC,iBAAW,EAAC,CAAC,+DAAD;AAAhE,KAHwB,EAIxB;AAACJ,UAAI,EAAE,OAAP;AAAgBG,eAAS,EAAE;AAA3B,KAJwB,EAKxB;AAACH,UAAI,EAAE,UAAP;AAAmBG,eAAS,EAAE;AAA9B,KALwB,EAMxB;AAACH,UAAI,EAAE,eAAP;AAAwBG,eAAS,EAAE,2HAAnC;AAAkE3B,aAAO,EAAC;AAAC6B,iBAAS,EAAE;AAAZ;AAA1E,KANwB,EAOxB;AAACL,UAAI,EAAE,mBAAP;AAA4BG,eAAS,EAAE,sGAAvC;AAA+DC,iBAAW,EAAC,CAAC,+DAAD;AAA3E,KAPwB,EAQxB;AAACJ,UAAI,EAAE,WAAP;AAAoBG,eAAS,EAAE,gGAA/B;AAAqD3B,aAAO,EAAC;AAAC8B,kBAAU,EAAE,8EAAb;AAAgCC,mBAAW,EAAE;AAA7C,OAA7D;AAA4HH,iBAAW,EAAC,CAAC,+DAAD;AAAxI,KARwB,EASxB;AAACJ,UAAI,EAAE,UAAP;AAAmBG,eAAS,EAAC,iFAA7B;AAAiD3B,aAAO,EAAC;AAACgC,iBAAS,EAAE;AAAZ,OAAzD;AAAyFJ,iBAAW,EAAC,CAAC,+DAAD;AAArG,KATwB,EAUxB;AAACJ,UAAI,EAAE,aAAP;AAAsBG,eAAS,EAAC,iGAAhC;AAAsDC,iBAAW,EAAC,CAAC,+DAAD;AAAlE,KAVwB,EAWxB;AAACJ,UAAI,EAAE,kBAAP;AAA2BG,eAAS,EAAC,oGAArC;AAA4DC,iBAAW,EAAC,CAAC,+DAAD;AAAxE,KAXwB,EAYxB;AAACJ,UAAI,EAAE,MAAP;AAAeG,eAAS,EAAC,2EAAzB;AAA2C3B,aAAO,EAAC;AAACiC,aAAK,EAAE,oEAAR;AAAsBD,iBAAS,EAAE;AAAjC,OAAnD;AAAwGJ,iBAAW,EAAC,CAAC,+DAAD;AAApH,KAZwB,EAaxB;AAACJ,UAAI,EAAE,SAAP;AAAkBG,eAAS,EAAC,yFAA5B;AAAgD3B,aAAO,EAAC;AAACgC,iBAAS,EAAE;AAAZ,OAAxD;AAAwFJ,iBAAW,EAAC,CAAC,+DAAD;AAApG,KAbwB,EAcxB;AAACJ,UAAI,EAAE,cAAP;AAAuBG,eAAS,EAAC,6FAAjC;AAAsD3B,aAAO,EAAC;AAACgC,iBAAS,EAAE;AAAZ,OAA9D;AAA8FJ,iBAAW,EAAC,CAAC,+DAAD;AAA1G,KAdwB,CAA1B;;QAsBaM,gB;;;;;YAAAA;;;;yBAAAA,gB;AAAgB,O;AAAA,gBAHlB,CAAC,4DAAD,EAAe,CAAC,6DAAaC,OAAb,CAAqBZ,SAArB,CAAD,CAAf,CAGkB,EAFjB,4DAEiB;;;;0HAAhBW,gB,EAAgB;AAAA,kBAHjB,4DAGiB,EAHH,4DAGG;AAHH,kBACd,4DADc;AAGG,O;AAFL,K;;;;;sEAEXA,gB,EAAgB;cAJ5B,sDAI4B;eAJnB;AACRZ,iBAAO,EAAE,CAAC,4DAAD,EAAe,CAAC,6DAAaa,OAAb,CAAqBZ,SAArB,CAAD,CAAf,CADD;AAERhB,iBAAO,EAAE,CAAC,4DAAD;AAFD,S;AAImB,Q;;;;;;;;;;;;;;;;;;AC7C7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOa6B,Y,GALb;AAAA;;AAME,WAAAC,KAAA,GAAQ,qBAAR;AACD,K;;;uBAFYD,Y;AAAY,K;;;YAAZA,Y;AAAY,+B;AAAA,c;AAAA,a;AAAA,6C;AAAA;AAAA;ACPzB;;AACI;;AACJ;;AACA;;AACI;;AACI;;AACI;;AACJ;;AACJ;;AACJ;;;;;;;;;sEDFaA,Y,EAAY;cALxB,uDAKwB;eALd;AACTnB,kBAAQ,EAAE,UADD;AAETC,qBAAW,EAAE,sBAFJ;AAGTC,mBAAS,EAAE,CAAC,qBAAD;AAHF,S;AAKc,Q;;;;;;;;;;;;;;;;;;AEPzkEamB,S;;;;;YAAAA,S;AAAS,kBAFR,2DAEQ;;;;yBAATA,S;AAAS,O;AAAA,iBART,CAAC;AACVC,eAAO,EAAE,sEADC;AAEVC,gBAAQ,EAAE,mFAFA;AAGVC,aAAK,EAAE;AAHG,OAAD,EAIP;AAACF,eAAO,EAAE,iEAAV;AAA4BC,gBAAQ,EAAE;AAAtC,OAJO,C;AAKZ,gBAdU,CACP,uEADO,EAEP,2DAFO,EAGP,mEAHO,EAIP,qEAJO,EAKP,4FALO,EAMP,oEANO,EAOP,oEAPO,CAcV;;;;0HAGYF,S,EAAS;AAAA,uBAnClB,2DAmCkB,EAlClB,kEAkCkB,EAjClB,iFAiCkB,EAhClB,wFAgCkB,EA/BlB,mEA+BkB,EA9BlB,qGA8BkB,EA7BlB,kGA6BkB,EA5BlB,4EA4BkB,EA3BlB,iFA2BkB,EA1BlB,0FA0BkB,EAzBlB,6FAyBkB,EAxBlB,sEAwBkB,EAvBlB,+EAuBkB,EAtBlB,gGAsBkB,EArBlB,2HAqBkB,EApBlB,sGAoBkB,EAnBlB,qFAmBkB;AAnBC,kBAGnB,uEAHmB,EAInB,2DAJmB,EAKnB,mEALmB,EAMnB,qEANmB,EAOnB,4FAPmB,EAQnB,oEARmB,EASnB,oEATmB;AAmBD,O;AAVF,K;;;;;sEAUPA,S,EAAS;cArCrB,sDAqCqB;eArCZ;AACRI,sBAAY,EAAE,CACZ,2DADY,EAEZ,kEAFY,EAGZ,iFAHY,EAIZ,wFAJY,EAKZ,mEALY,EAMZ,qGANY,EAOZ,kGAPY,EAQZ,4EARY,EASZ,iFATY,EAUZ,0FAVY,EAWZ,6FAXY,EAYZ,sEAZY,EAaZ,+EAbY,EAcZ,gGAdY,EAeZ,2HAfY,EAgBZ,sGAhBY,EAiBZ,qFAjBY,CADN;AAoBRpB,iBAAO,EAAE,CACP,uEADO,EAEP,2DAFO,EAGP,mEAHO,EAIP,qEAJO,EAKP,4FALO,EAMP,oEANO,EAOP,oEAPO,CApBD;AA6BRqB,mBAAS,EAAE,CAAC;AACVJ,mBAAO,EAAE,sEADC;AAEVC,oBAAQ,EAAE,mFAFA;AAGVC,iBAAK,EAAE;AAHG,WAAD,EAIP;AAACF,mBAAO,EAAE,iEAAV;AAA4BC,oBAAQ,EAAE;AAAtC,WAJO,CA7BH;AAmCRI,mBAAS,EAAE,CAAC,2DAAD;AAnCH,S;AAqCY,Q;;;;;;;;;;;;;;;;;;AClEtB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOaC,a;AAEX,+BAAc;AAAA;AAAG;;;;mCAET,CACP;;;;;;;uBALUA,a;AAAa,K;;;YAAbA,a;AAAa,+B;AAAA,e;AAAA,a;AAAA,wE;AAAA;AAAA;ACP1B;;AACI;;AACI;;AAAG;;AAA+E;;AAClF;;AAAG;;AAAkH;;AACrH;;AAAG;;AAA8H;;AACjI;;AAAG;;AAAuE;;AAC9E;;AACJ;;;;;;;;sEDAaA,a,EAAa;cALzB,uDAKyB;eALf;AACT5B,kBAAQ,EAAE,UADD;AAETC,qBAAW,EAAE,uBAFJ;AAGTC,mBAAS,EAAE,CAAC,sBAAD;AAHF,S;AAKe,Q;;;;;;;;;;;;;;;;;;;;AEN1B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAMa2B,oB;;;;;;;kCACChD,G,EAAuBiD,I,EAAiB;AAChDC,iBAAO,CAACC,GAAR,CAAY,aAAZ;AACA,iBAAOF,IAAI,CAACG,MAAL,CAAYpD,GAAZ,EACNqD,IADM,CAEL,6DAAM,CAAN,CAFK,EAGL,kEAAW,UAACC,GAAD,EAA6B;AACtC,gBAAIC,YAAY,GAAG,EAAnB;;AACA,gBAAID,GAAG,CAACE,KAAJ,YAAqBC,UAAzB,EAAqC;AACnC;AACAF,0BAAY,oBAAaD,GAAG,CAACI,OAAjB,CAAZ;AACD,aAHD,MAGO;AACL;AACAH,0BAAY,yBAAkBD,GAAG,CAACK,MAAtB,wBAA0CL,GAAG,CAACI,OAA9C,CAAZ;AACD;;AACDE,iBAAK,CAACL,YAAD,CAAL;AACA,mBAAO,wDAAWA,YAAX,CAAP;AACD,WAXD,CAHK,CAAP;AAgBD;;;;;;;uBAnBQP,oB;AAAoB,K;;;aAApBA,oB;AAAoB,eAApBA,oBAAoB,K;AAAA,kBADT;;;;;sEACXA,oB,EAAoB;cADhC,wDACgC;eADrB;AAACa,oBAAU,EAAC;AAAZ,S;AACqB,Q;;;;;;;;;;;;;;;;;;ACPjC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACKI;;AAAyF;;AAAsB;;;;;;AAK/G;;AAAyF;;AAA0B;;;;QDC1GC,c;AAKX,8BAAmBC,WAAnB,EAAqDnD,MAArD,EAAqE;AAAA;;AAAlD,aAAAmD,WAAA,GAAAA,WAAA;AAAkC,aAAAnD,MAAA,GAAAA,MAAA;AAHrD,aAAA4C,KAAA,GAAQ,KAAR;AAGwE;;;;mCAEhE;AACN,eAAKQ,SAAL,GAAiB,IAAI,wDAAJ,CAAc;AAC7B,wBAAY,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB,0DAAWC,QAAjC,CADiB;AAE7B,wBAAY,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB,0DAAWA,QAAjC;AAFiB,WAAd,CAAjB;AAID;;;gCAEI;AAAA;;AAEH,eAAKC,WAAL,GAAmB,IAAI,uDAAJ,CACjB,KAAKF,SAAL,CAAeG,KAAf,CAAqBC,QADJ,EAEjB,KAAKJ,SAAL,CAAeG,KAAf,CAAqBE,QAFJ,CAAnB;AAKA,eAAKN,WAAL,CAAiBO,YAAjB,CAA8B,KAAKJ,WAAnC,EAAgD,YAAM;AACpD,iBAAI,CAACtD,MAAL,CAAY2D,aAAZ,CAA0B,GAA1B;AACD,WAFD;AAGA,eAAKf,KAAL,GAAa,IAAb;AACA,iBAAO,KAAP;AACD;;;;;;;uBA1BUM,c,EAAc,mI,EAAA,uH;AAAA,K;;;YAAdA,c;AAAc,gC;AAAA,e;AAAA,a;AAAA,+a;AAAA;AAAA;ACX3B;;AAA8B;AAAA,mBAAY,IAAAU,KAAA,EAAZ;AAAmB,WAAnB;;AAC1B;;AACE;;AAA0B;;AAAS;;AACnC;;AACF;;AACA;;AACA;;AACI;;AAA0B;;AAAa;;AACvC;;AACJ;;AACA;;AACA;;AAA0G;;AAAK;;AACnH;;;;AAZM;;AAKS;;AAAA;;AAKA;;AAAA;;AAC+B;;AAAA;;;;;;;;;sEDAjCV,c,EAAc;cAL1B,uDAK0B;eALhB;AACT3C,kBAAQ,EAAE,WADD;AAETC,qBAAW,EAAE,wBAFJ;AAGTC,mBAAS,EAAE,CAAC,uBAAD;AAHF,S;AAKgB,Q;;;;;;;;;;;;;;;;;;;;;;;;AEX3B;AAAA;;;AAAA;AAAA;AAAA;;QAAaoD,U,GACT,oBAAmBL,QAAnB,EAA2CC,QAA3C,EAA0D;AAAA;;AAAvC,WAAAD,QAAA,GAAAA,QAAA;AAAwB,WAAAC,QAAA,GAAAA,QAAA;AAAmB,K;;;;;;;;;;;;;;;;;ACDlE;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACEA;;AAAwE;;AAAW;;;;;;;;AAEnF;;AAA6C;AAAA;;AAAA;;AAAA;AAAA;;AAAmB;;AAAM;;;;;;AACtE;;AAAkE;;AAAK;;;;;;AACvE;;AAAqE;;AAAQ;;;;QDGhEK,a;AAEX,6BAAoBX,WAApB,EAA8C;AAAA;;AAA1B,aAAAA,WAAA,GAAAA,WAAA;AAA4B;;;;mCAExC,CACP;;;0CAEc;AACb,iBAAO,KAAKA,WAAL,CAAiBY,aAAxB;AACD;;;iCAEK;AACJ,eAAKZ,WAAL,CAAiBa,MAAjB;AACD;;;;;;;uBAbUF,a,EAAa,mI;AAAA,K;;;YAAbA,a;AAAa,+B;AAAA,c;AAAA,a;AAAA,6b;AAAA;AAAA;ACT1B;;AAAsC;;AAAI;;AAE1C;;AAEA;;AACA;;AACA;;;;AAJQ;;AAAA;;AAEA;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;;;;;;;;sEDGKA,a,EAAa;cALzB,uDAKyB;eALf;AACTvD,kBAAQ,EAAE,UADD;AAETC,qBAAW,EAAE,uBAFJ;AAGTC,mBAAS,EAAE,CAAC,sBAAD;AAHF,S;AAKe,Q;;;;;;;;;;;;;;;;;;;;;;AET1B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACKE;;AAA6F;;AAA6B;;;;;;AAUpH;;AAAwE;;AAA4B;;;;;;;;AARxG;;AACE;;AACE;;AACE;;AAAyB;;AAAqB;;AAC9C;;AACF;;AACA;;AAAwC;;AAAU;;AAClD;;AAAkE;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAA8B;;AAAM;;AACtG;;AACF;;AACF;;;;;;;;AATO;;AAAA;;AAOQ;;AAAA;;;;QDJNwD,oB;AAKX,oCAAoBC,eAApB,EAAmD;AAAA;;AAA/B,aAAAA,eAAA,GAAAA,eAAA;AAAmC;;;;mCAE/C;AACN,eAAKC,YAAL,GAAoB,IAAI,wDAAJ,CAAc;AAChC,uBAAW,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB,0DAAWd,QAAjC,CADqB;AAEhC,uBAAY,IAAI,wDAAJ,CAAc,EAAd;AAFoB,WAAd,EAGlB,CAAC,KAAKe,0BAAN,CAHkB,CAApB;AAID;;;mCAEO;AACN,cAAMC,KAAK,GAAG,IAAI,oEAAJ,CACZ,KAAKF,YAAL,CAAkBZ,KAAlB,CAAwBe,OADZ,EAEZ,KAAKH,YAAL,CAAkBZ,KAAlB,CAAwBgB,OAFZ,CAAd;AAKA,eAAKL,eAAL,CAAqBM,WAArB,CAAiCH,KAAjC,EAAwCI,SAAxC;AACA,eAAKC,SAAL;AACD;;;oCAEmB;AAClB,eAAKC,cAAL,CAAoBC,SAApB;AAEA,cAAMC,SAAS,GAAe,KAAKV,YAAL,CAAkBW,GAAlB,CAAsB,SAAtB,CAA9B;;AACA,iBAAOD,SAAS,CAACE,MAAV,KAAqB,CAA5B,EAA+B;AAC7BF,qBAAS,CAACG,QAAV,CAAmB,CAAnB;AACD;AACF;;;yCAEgBlF,E,EAAS;AAEZ,eAAKqE,YAAL,CAAkBW,GAAlB,CAAsB,SAAtB,EAAkCE,QAAlC,CAA2ClF,EAA3C;AACb;;;wCAEY;AAEC,eAAKqE,YAAL,CAAkBW,GAAlB,CAAsB,SAAtB,EAAkCG,IAAlC,CAAuC,IAAI,wDAAJ,CAAc;AAC/D,uBAAW,IAAI,0DAAJ,CAAgB,KAAhB,CADoD;AAE/D,uBAAW,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB,0DAAW5B,QAAjC;AAFoD,WAAd,CAAvC;AAIb;;;sCAEU;AACT,iBAAmB,KAAKc,YAAL,CAAkBW,GAAlB,CAAsB,SAAtB,EAAkCI,QAArD;AACD;;;mDAE0BC,O,EAAwB;AAEjD,cAAMC,SAAS,GAAeD,OAAO,CAACL,GAAR,CAAY,SAAZ,CAA9B;AAEA,cAAIO,CAAC,GAAG,CAAR;;AAEA,cAAGD,SAAS,CAACL,MAAV,GAAmB,CAAtB,EACA;AACE,mBAAO;AAAC,yBAAW;AAAZ,aAAP;AACD;;AAED,eAAI,IAAIO,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACF,SAAS,CAACL,MAAzB,EAAiCO,CAAC,EAAlC,EAAqC;AACnC,gBAAGF,SAAS,CAACF,QAAV,CAAmBI,CAAnB,EAAsB/B,KAAtB,CAA4BgC,OAA5B,KAAwC,IAA3C,EAAgD;AAC9CF,eAAC;AACF;AACF;;AAED,cAAGA,CAAC,KAAK,CAAT,EACA;AACE,mBAAO;AAAC,yBAAW;AAAZ,aAAP;AACD;;AAED,iBAAO,IAAP;AACD;;;;;;;uBAzEUpB,oB,EAAoB,kI;AAAA,K;;;YAApBA,oB;AAAoB,sC;AAAA;AAAA;;;;;;;;;;;;;;;ACXjC;;AAAiC;AAAA,mBAAY,IAAAuB,QAAA,EAAZ;AAAsB,WAAtB;;AAC/B;;AACE;;AAAyB;;AAAuB;;AAChD;;AACF;;AACA;;AACA;;AACE;;AAWF;;AACA;;AAA4E;AAAA,mBAAS,IAAAC,aAAA,EAAT;AAAwB,WAAxB;;AAA0B;;AAAU;;AAChH;;AAA6G;;AAAM;;AACrH;;;;AArBM;;AAKO;;AAAA;;AAEJ;;AAAA;;AAamC;;AAAA;;;;;;;;;sEDT/BxB,oB,EAAoB;cALhC,uDAKgC;eALtB;AACT1D,kBAAQ,EAAE,iBADD;AAETC,qBAAW,EAAE,8BAFJ;AAGTC,mBAAS,EAAE,CAAC,6BAAD;AAHF,S;AAKsB,Q;;;;;;gBAE9B,uD;iBAAU,G;;;;;;;;;;;;;;;;;;;;AEbb;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACKE;;AAA6F;;AACpF;;;;;;AAWH;;AAAkG;;AACjF;;;;;;;;AAVrB;;AACE;;AACE;;AACE;;AAAyB;;AAAqB;;AAC9C;;AACF;;AACA;;AAAwC;;AAAU;;AAClD;;AACE;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAA2C;;AAAM;;AACnD;;AAEF;;AACF;;;;;;;;AAXO;;AAAA;;AAQQ;;AAAA;;;;;;AAeX;;AAAsG;;AAC/E;;;;;;;;AAV3B;;AACE;;AACE;;AACE;;AAAyB;;AAAqB;;AAC9C;;AACF;;AACA;;AAAwC;;AAAU;;AAClD;;AACE;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAA+C;;AAAM;;AACvD;;AAEF;;AACF;;;;;;;;AAXO;;AAAA;;AAQQ;;AAAA;;;;QDrBNiF,qB;AAIX,qCAAmBxB,eAAnB,EAA6DyB,KAA7D,EAA4F3F,MAA5F,EAA4G;AAAA;;AAAzF,aAAAkE,eAAA,GAAAA,eAAA;AAA0C,aAAAyB,KAAA,GAAAA,KAAA;AAA+B,aAAA3F,MAAA,GAAAA,MAAA;AAAmB;;;;mCAEvG;AAAA;;AAEN,eAAKF,EAAL,GAAU,KAAK6F,KAAL,CAAWC,QAAX,CAAoBC,MAApB,CAA2B,IAA3B,CAAV;AACA,eAAK3B,eAAL,CAAqB4B,mBAArB,CAAyC,KAAKhG,EAA9C;AAEA,eAAKqE,YAAL,GAAoB,IAAI,wDAAJ,CAAc;AAChC,uBAAW,IAAI,0DAAJ,CAAgB,KAAKD,eAAL,CAAqB6B,mBAArB,GAA2CzB,OAA3D,EAAoE,0DAAWjB,QAA/E,CADqB;AAEhC,6BAAiB,IAAI,wDAAJ,CAAc,EAAd,CAFe;AAGhC,+BAAmB,IAAI,wDAAJ,CAAc,EAAd;AAHa,WAAd,EAIlB,CAAC,KAAKe,0BAAN,CAJkB,CAApB;AAMA,eAAKF,eAAL,CAAqB6B,mBAArB,GAA2CxB,OAA3C,CAAmDyB,OAAnD,CAA2D,UAAAC,CAAC,EAAI;AAC9D,kBAAI,CAACC,kBAAL,CAAwBD,CAAxB;AACD,WAFD;AAGD;;;mDAE0B;AACzB,iBAAmB,KAAK9B,YAAL,CAAkBW,GAAlB,CAAsB,eAAtB,EAAwCI,QAA3D;AACD;;;qDAE4B;AAC3B,iBAAmB,KAAKf,YAAL,CAAkBW,GAAlB,CAAsB,iBAAtB,EAA0CI,QAA7D;AACD;;;sDAE6BpF,E,EAAY;AAC5B,eAAKqE,YAAL,CAAkBW,GAAlB,CAAsB,eAAtB,EAAwCE,QAAxC,CAAiDlF,EAAjD;AACb;;;2CAEkBqG,c,EAAiC;AACtC,eAAKhC,YAAL,CAAkBW,GAAlB,CAAsB,eAAtB,EAAwCG,IAAxC,CAA6C,IAAI,wDAAJ,CAAc;AACrE,kBAAM,IAAI,0DAAJ,CAAgBkB,cAAc,CAACrG,EAA/B,CAD+D;AAErE,uBAAW,IAAI,0DAAJ,CAAgBqG,cAAc,CAACZ,OAA/B,CAF0D;AAGrE,uBAAW,IAAI,0DAAJ,CAAgBY,cAAc,CAAC7B,OAA/B,EAAwC,0DAAWjB,QAAnD;AAH0D,WAAd,CAA7C;AAKb;;;0DAEiCvD,E,EAAY;AAChC,eAAKqE,YAAL,CAAkBW,GAAlB,CAAsB,iBAAtB,EAA0CE,QAA1C,CAAmDlF,EAAnD;AACb;;;yDAEgC;AACnB,eAAKqE,YAAL,CAAkBW,GAAlB,CAAsB,iBAAtB,EAA0CG,IAA1C,CAA+C,IAAI,wDAAJ,CAAc;AACvE,uBAAW,IAAI,0DAAJ,CAAgB,KAAhB,CAD4D;AAEvE,uBAAW,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB,0DAAW5B,QAAjC;AAF4D,WAAd,CAA/C;AAIb;;;mCAEU;AACT,cAAMgB,KAAK,GAAG,IAAI,kEAAJ,CACZ,KAAKF,YAAL,CAAkBZ,KAAlB,CAAwBe,OADZ,EAEZ,KAAKH,YAAL,CAAkBZ,KAAlB,CAAwB6C,aAFZ,EAGZ,KAAKjC,YAAL,CAAkBZ,KAAlB,CAAwB8C,eAHZ,CAAd;AAMA,eAAKnC,eAAL,CAAqBoC,YAArB,CAAkC,KAAKxG,EAAvC,EAA2CuE,KAA3C,EAAkDI,SAAlD;AAEA,eAAKC,SAAL;AACA,eAAK1E,MAAL,CAAYC,QAAZ,CAAqB,CAAC,UAAD,CAArB;AACD;;;oCAEmB;AAClB,eAAK,IAAMsG,GAAX,IAAkB,KAAKpC,YAAL,CAAkBe,QAApC,EAA8C;AAC5C,iBAAKf,YAAL,CAAkBW,GAAlB,CAAsByB,GAAtB,EAA2BC,eAA3B;AACA,iBAAKrC,YAAL,CAAkBW,GAAlB,CAAsByB,GAAtB,EAA2BE,sBAA3B;AACD;;AAED,eAAKtC,YAAL,CAAkBuC,KAAlB;AAEA,cAAMC,sBAAsB,GAAe,KAAKxC,YAAL,CAAkBW,GAAlB,CAAsB,eAAtB,CAA3C;;AACA,iBAAO6B,sBAAsB,CAAC5B,MAAvB,KAAkC,CAAzC,EAA4C;AAC1C4B,kCAAsB,CAAC3B,QAAvB,CAAgC,CAAhC;AACD;;AAED,cAAM4B,wBAAwB,GAAe,KAAKzC,YAAL,CAAkBW,GAAlB,CAAsB,iBAAtB,CAA7C;;AACA,iBAAO8B,wBAAwB,CAAC7B,MAAzB,KAAoC,CAA3C,EAA8C;AAC5C6B,oCAAwB,CAAC5B,QAAzB,CAAkC,CAAlC;AACD;AAEF;;;mDAE0BG,O,EAAwB;AAEjD,cAAM0B,sBAAsB,GAAe1B,OAAO,CAACL,GAAR,CAAY,eAAZ,CAA3C;AACA,cAAMgC,wBAAwB,GAAe3B,OAAO,CAACL,GAAR,CAAY,iBAAZ,CAA7C;AAEA,cAAIO,CAAC,GAAG,CAAR;;AAEA,cAAGwB,sBAAsB,CAAC9B,MAAvB,GAAgC+B,wBAAwB,CAAC/B,MAAzD,GAAkE,CAArE,EACA;AACE,mBAAO;AAAC,+BAAiB;AAAlB,aAAP;AACD;;AAED,eAAI,IAAIO,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAGuB,sBAAsB,CAAC9B,MAAxC,EAAgDO,CAAC,EAAjD,EAAoD;AAClD,gBAAGuB,sBAAsB,CAAC3B,QAAvB,CAAgCI,CAAhC,EAAmC/B,KAAnC,CAAyCgC,OAAzC,KAAqD,IAAxD,EAA6D;AAC3DF,eAAC;AACF;AACF;;AAED,eAAI,IAAIC,EAAC,GAAC,CAAV,EAAaA,EAAC,GAAGwB,wBAAwB,CAAC/B,MAA1C,EAAkDO,EAAC,EAAnD,EAAsD;AACpD,gBAAGwB,wBAAwB,CAAC5B,QAAzB,CAAkCI,EAAlC,EAAqC/B,KAArC,CAA2CgC,OAA3C,KAAuD,IAA1D,EAA+D;AAC7DF,eAAC;AACF;AACF;;AAED,cAAGA,CAAC,KAAK,CAAT,EACA;AACE,mBAAO;AAAC,+BAAiB;AAAlB,aAAP;AACD;;AAED,iBAAO,IAAP;AACD;;;;;;;uBApHUK,qB,EAAqB,kI,EAAA,+H,EAAA,uH;AAAA,K;;;YAArBA,qB;AAAqB,uC;AAAA,e;AAAA,a;AAAA,4nB;AAAA;AAAA;ACXlC;;AAAiC;AAAA,mBAAY,IAAAF,QAAA,EAAZ;AAAsB,WAAtB;;AAC/B;;AACE;;AAAyB;;AAAuB;;AAChD;;AACF;;AACA;;AAEA;;AACE;;AAaF;;AACA;;AACE;;AAaF;;AACA;;AACE;AAAA,mBAAS,IAAAuB,8BAAA,EAAT;AAAyC,WAAzC;;AAA2C;;AAAU;;AACvD;;AACsB;;AAAK;;AAC7B;;;;AAzCM;;AAKO;;AAAA;;AAGJ;;AAAA;;AAeA;;AAAA;;AAgBmC;;AAAA;;;;;;;;;sED5B/BrB,qB,EAAqB;cALjC,uDAKiC;eALvB;AACTnF,kBAAQ,EAAE,kBADD;AAETC,qBAAW,EAAE,+BAFJ;AAGTC,mBAAS,EAAE,CAAC,8BAAD;AAHF,S;AAKuB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;AESlC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAAauG,kB,GACT,4BAAmBlH,EAAnB,EAAqCmH,eAArC,EAA2E;AAAA;;AAAxD,WAAAnH,EAAA,GAAAA,EAAA;AAAkB,WAAAmH,eAAA,GAAAA,eAAA;AAAyC,K;;QAQrEC,mB,GACT,6BAAmB5C,OAAnB,EAA0CC,OAA1C,EAAsE;AAAA;;AAAnD,WAAAD,OAAA,GAAAA,OAAA;AAAuB,WAAAC,OAAA,GAAAA,OAAA;AAA+B,K;;QAGhE4C,iB,GACT,2BAAmB7C,OAAnB,EAA0C8B,aAA1C,EAAmFC,eAAnF,EAAuH;AAAA;;AAApG,WAAA/B,OAAA,GAAAA,OAAA;AAAuB,WAAA8B,aAAA,GAAAA,aAAA;AAAyC,WAAAC,eAAA,GAAAA,eAAA;AAAuC,K;;QAGjHe,iB,GACT,2BAAmB7B,OAAnB,EAA2CjB,OAA3C,EAAyD;AAAA;;AAAtC,WAAAiB,OAAA,GAAAA,OAAA;AAAwB,WAAAjB,OAAA,GAAAA,OAAA;AAAiB,K;;QAGnD+C,e,GACT,yBAAmBvH,EAAnB,EAAqCyF,OAArC,EAA6DjB,OAA7D,EAA2E;AAAA;;AAAxD,WAAAxE,EAAA,GAAAA,EAAA;AAAkB,WAAAyF,OAAA,GAAAA,OAAA;AAAwB,WAAAjB,OAAA,GAAAA,OAAA;AAAiB,K;;QAGrEgD,mB,GACT,6BAAmBxH,EAAnB,EAAqCyF,OAArC,EAAoD;AAAA;;AAAjC,WAAAzF,EAAA,GAAAA,EAAA;AAAkB,WAAAyF,OAAA,GAAAA,OAAA;AAAkB,K;;;;;;;;;;;;;;;;;AC9C3D;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAMagC,e;AAGT,+BAAoBC,IAApB,EAAsC;AAAA;;AAAlB,aAAAA,IAAA,GAAAA,IAAA;AAFZ,aAAAC,gBAAA,GAAyC,IAAzC;AAEiC;;;;yCAE3B;AACV,iBAAO,KAAKD,IAAL,CAAU1C,GAAV,CAAsC,cAAtC,CAAP;AACH;;;4CAEmBhF,E,EAAY;AAAA;;AAC5B,eAAK0H,IAAL,CAAU1C,GAAV,CAAoC,kBAAkBhF,EAAtD,EACK2E,SADL,CACe,UAAAiD,IAAI;AAAA,mBAAI,MAAI,CAACD,gBAAL,GAAwBC,IAA5B;AAAA,WADnB;AAEH;;;qCAEY5H,E,EAAW6H,iB,EAAoC;AACxD,iBAAO,KAAKH,IAAL,CAAUI,KAAV,CAAsC,kBAAgB9H,EAAtD,EAA0D6H,iBAA1D,CAAP;AACH;;;oCAEWE,mB,EAAwC;AAChD,iBAAO,KAAKL,IAAL,CAAUM,IAAV,CAAqC,cAArC,EAAqDD,mBAArD,CAAP;AACH;;;4CAEmBvG,S,EAAkCxB,E,EAAY;AAC9D,cAAIiI,OAAO,GAAGzG,SAAS,CAAC0G,IAAV,CAAe,UAAAC,CAAC;AAAA,mBAAIA,CAAC,CAACnI,EAAF,KAASA,EAAb;AAAA,WAAhB,CAAd;AACA,eAAK2H,gBAAL,GAAwBM,OAAxB;AACH;;;iDAEwB;AACrB,eAAKN,gBAAL,GAAwB,IAAxB;AACH;;;8CAEkB;AACf,iBAAO,KAAKA,gBAAZ;AACH;;;;;;;uBAjCQF,e,EAAe,uH;AAAA,K;;;aAAfA,e;AAAe,eAAfA,eAAe,K;AAAA,kBADF;;;;;sEACbA,e,EAAe;cAD3B,wDAC2B;eADhB;AAAEtE,oBAAU,EAAE;AAAd,S;AACgB,Q;;;;;;;;;;;;;;;;;;;;;;ACN5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACKY;;AAAkG;;AAAgD;;;;;;AAAhD;;AAAA;;;;;;;;AAJ1G;;AACI;;AAAI;;AAA0D;;AAC9D;;AAAI;;AAAQ;;AACZ;;AACI;;AACJ;;AACA;;AAA+B;AAAA;;AAAA;;AAAA,2CAA4B,OAAAiB,eAAA,uBAAsCpE,EAAlE;AAAiE,SAAjE;;AAAuE;;AAAI;;AAC9G;;;;;;AANQ;;AAAA;;AAGe;;AAAA;;;;;;AAIU;;;;QDAxBoI,iB;AAEX,iCAAmBhE,eAAnB,EAA4DlE,MAA5D,EAA4E;AAAA;;AAAzD,aAAAkE,eAAA,GAAAA,eAAA;AAAyC,aAAAlE,MAAA,GAAAA,MAAA;AAAmB;;;;mCAEvE,CACP;;;2CAEkBF,E,EAAU;AAE3B,eAAKE,MAAL,CAAYC,QAAZ,CAAqB,CAAC,mBAAiBH,EAAlB,CAArB;AACD;;;;;;;uBAVUoI,iB,EAAiB,kI,EAAA,uH;AAAA,K;;;YAAjBA,iB;AAAiB,mC;AAAA,c;AAAA,a;AAAA,wM;AAAA;AAAA;ACT9B;;AACI;;AAQA;;AACJ;;;;;;AATS;;AAAA,+HAA6E,UAA7E,EAA6E,GAA7E;;;;;;;;;sEDQIA,iB,EAAiB;cAL7B,uDAK6B;eALnB;AACT3H,kBAAQ,EAAE,cADD;AAETC,qBAAW,EAAE,2BAFJ;AAGTC,mBAAS,EAAE,CAAC,0BAAD;AAHF,S;AAKmB,Q;;;;;;;;;;;;;;;;;;;;;;;;AET9B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACKQ;;AAAoC;;AAAI;;;;;;AACxC;;AAAqC;;AAAe;;;;;;AAAf;;AAAA;;;;;;AAKrC;;AAAoC;;AAAQ;;;;;;AAC5C;;AAAqC;;AAAoB;;;;;;AAApB;;AAAA;;;;;;AAIrC;;AAAoC;;AAAO;;;;;;;;AAC3C;;AAAqC;;AACjC;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAA2C;;AAAO;;AAAS;;;;;;AAGjE;;;;;;AACA;;;;QDZO0H,kB;AAIX,kCAAmBjE,eAAnB,EAA6DyB,KAA7D,EAAoF;AAAA;;AAAjE,aAAAzB,eAAA,GAAAA,eAAA;AAA0C,aAAAyB,KAAA,GAAAA,KAAA;AAF7D,aAAAyC,gBAAA,GAA6B,CAAC,IAAD,EAAO,SAAP,EAAkB,QAAlB,CAA7B;AAEuF;;;;mCAE/E;AACN,eAAK9G,SAAL,GAAiB,KAAKqE,KAAL,CAAWC,QAAX,CAAoB8B,IAApB,CAAyBpG,SAA1C;AACA,eAAK4C,eAAL,CAAqBmE,sBAArB;AACD;;;4CAEmBvI,E,EAAS;AAE3B,eAAKoE,eAAL,CAAqBoE,mBAArB,CAAyC,KAAKhH,SAA9C,EAAyDxB,EAAzD;AACD;;;;;;;uBAdUqI,kB,EAAkB,kI,EAAA,+H;AAAA,K;;;YAAlBA,kB;AAAkB,oC;AAAA,e;AAAA,a;AAAA,yU;AAAA;AAAA;ACV/B;;AACE;;AACE;;AAEE;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAEA;;AACE;;AACA;;AAEF;;AAEA;;AACA;;AACF;;AACF;;AACA;;AACE;;AACF;;AACF;;;;AA1Be;;AAAA;;AAmBO;;AAAA;;AACP;;AAAA;;;;;;;;;sEDZFA,kB,EAAkB;cAL9B,uDAK8B;eALpB;AACT5H,kBAAQ,EAAE,eADD;AAETC,qBAAW,EAAE,4BAFJ;AAGTC,mBAAS,EAAE,CAAC,2BAAD;AAHF,S;AAKoB,Q;;;;;;;;;;;;;;;;;;;;;;;;AEV/B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAMa8H,iB;AAET,iCAAoBrE,eAApB,EAAoD;AAAA;;AAAhC,aAAAA,eAAA,GAAAA,eAAA;AAAmC;;;;gCAE/CyB,K,EAA+B6C,K,EAA0B;AAC7D,iBAAO,KAAKtE,eAAL,CAAqBuE,cAArB,EAAP;AACH;;;;;;;uBANQF,iB,EAAiB,yH;AAAA,K;;;aAAjBA,iB;AAAiB,eAAjBA,iBAAiB,K;AAAA,kBADN;;;;;sEACXA,iB,EAAiB;cAD7B,wDAC6B;eADlB;AAACtF,oBAAU,EAAC;AAAZ,S;AACkB,Q;;;;;;;;;;;;;;;;;;;;;;ACN9B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACKI;;AAAuF;;AAAsB;;;;;;AAK7G;;AAAyF;;AAAuB;;;;;;AAKhH;;AAA+F;;AAAqB;;;;;;AAKpH;;AAAuG;;AAAkC;;;;;;AACzI;;AAAsH;;AAAmB;;;;QDVhIyF,iB;AAKX,iCAAoB1I,MAApB,EAA4CmD,WAA5C,EAAsE;AAAA;;AAAlD,aAAAnD,MAAA,GAAAA,MAAA;AAAwB,aAAAmD,WAAA,GAAAA,WAAA;AAA6B;;;;mCAEjE;AACN,eAAKwF,YAAL,GAAoB,IAAI,wDAAJ,CAAc;AAChC,oBAAQ,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB,0DAAWtF,QAAjC,CADwB;AAEhC,qBAAS,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB,CAAC,0DAAWuF,KAAZ,EAAmB,0DAAWvF,QAA9B,CAAtB,CAFuB;AAGhC,wBAAY,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB,0DAAWA,QAAjC,CAHoB;AAIhC,4BAAgB,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB,0DAAWA,QAAjC;AAJgB,WAAd,EAKjB,CAAC,KAAKwF,qBAAN,CALiB,CAApB;AAMD;;;mCAEO;AACJ,eAAKC,aAAL,GAAqB,IAAI,6DAAJ,CACnB,KAAKH,YAAL,CAAkBpF,KAAlB,CAAwBwF,IADL,EAEnB,KAAKJ,YAAL,CAAkBpF,KAAlB,CAAwBqF,KAFL,EAGnB,KAAKD,YAAL,CAAkBpF,KAAlB,CAAwBE,QAHL,CAArB;AAMA,eAAKN,WAAL,CAAiB6F,QAAjB,CAA0B,KAAKF,aAA/B,EAA8CrE,SAA9C;AAEA,eAAKzE,MAAL,CAAY2D,aAAZ,CAA0B,QAA1B;AACH;;;8CAEqBwB,O,EAAwB;AAE5C,cAAM1B,QAAQ,GAAG0B,OAAO,CAACL,GAAR,CAAY,UAAZ,EAAwBvB,KAAzC;AACA,cAAM0F,oBAAoB,GAAG9D,OAAO,CAACL,GAAR,CAAY,cAAZ,EAA4BvB,KAAzD;;AAEA,cAAGE,QAAQ,KAAKwF,oBAAhB,EAAqC;AACnC9D,mBAAO,CAACL,GAAR,CAAY,cAAZ,EAA4BoE,SAA5B,CAAsC;AAACC,uBAAS,EAAE;AAAZ,aAAtC;AACA,mBAAO;AAAC,8BAAgB;AAAjB,aAAP;AACD;;AAED,iBAAO,IAAP;AACD;;;;;;;uBAvCUT,iB,EAAiB,uH,EAAA,mI;AAAA,K;;;YAAjBA,iB;AAAiB,mC;AAAA,e;AAAA,a;AAAA,+nB;AAAA;AAAA;ACX9B;;AAAiC;AAAA,mBAAY,IAAAM,QAAA,EAAZ;AAAsB,WAAtB;;AAC7B;;AACE;;AAAsB;;AAAS;;AAC/B;;AACF;;AACA;;AACA;;AACI;;AAAuB;;AAAU;;AACjC;;AACJ;;AACA;;AACA;;AACI;;AAA0B;;AAAQ;;AAClC;;AACJ;;AACA;;AACA;;AACI;;AAA8B;;AAAQ;;AACtC;;AACJ;;AACA;;AACA;;AACA;;AAA6G;;AAAQ;;AACzH;;;;AAvBM;;AAKS;;AAAA;;AAKA;;AAAA;;AAKA;;AAAA;;AAKA;;AAAA;;AACA;;AAAA;;AAC+B;;AAAA;;;;;;;;;sEDXjCN,iB,EAAiB;cAL7B,uDAK6B;eALnB;AACTnI,kBAAQ,EAAE,cADD;AAETC,qBAAW,EAAE,2BAFJ;AAGTC,mBAAS,EAAE,CAAC,0BAAD;AAHF,S;AAKmB,Q;;;;;;;;;;;;;;;;;;;;;;;;AEX9B;AAAA;;;AAAA;AAAA;AAAA;;QAAa2I,a,GACT,uBAAmBL,IAAnB,EAAuCH,KAAvC,EAA4DnF,QAA5D,EAA2E;AAAA;;AAAxD,WAAAsF,IAAA,GAAAA,IAAA;AAAoB,WAAAH,KAAA,GAAAA,KAAA;AAAqB,WAAAnF,QAAA,GAAAA,QAAA;AAAkB,K;;;;;;;;;;;;;;;;;ACClF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAGa4F,S;AACT,yBAAoBlG,WAApB,EAAsDnD,MAAtD,EAAoE;AAAA;;AAAhD,aAAAmD,WAAA,GAAAA,WAAA;AAAkC,aAAAnD,MAAA,GAAAA,MAAA;AAAiB;;;;oCAE3D2F,K,EAA+B6C,K,EAA0B;AACjE,cAAMc,MAAM,GAAG,KAAKnG,WAAL,CAAiBY,aAAhC;;AAEA,cAAGuF,MAAH,EAAU;AACN,mBAAO,IAAP;AACH;;AAED,iBAAO,KAAKtJ,MAAL,CAAYuJ,aAAZ,CAA0B,CAAC,QAAD,CAA1B,CAAP;AACH;;;;;;;uBAXQF,S,EAAS,iH,EAAA,8G;AAAA,K;;;aAATA,S;AAAS,eAATA,SAAS,K;AAAA,kBADE;;;;;sEACXA,S,EAAS;cADrB,wDACqB;eADV;AAACpG,oBAAU,EAAC;AAAZ,S;AACU,Q;;;;;;;;;;;;;;;;;;;;;;;;ACLtB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAQauG,W;AAET,2BAAoBhC,IAApB,EAA8CxH,MAA9C,EAA8D;AAAA;;AAA1C,aAAAwH,IAAA,GAAAA,IAAA;AAA0B,aAAAxH,MAAA,GAAAA,MAAA;AADvC,aAAA+D,aAAA,GAAgB,KAAhB;AAC0D;;;;qCAEpDT,W,EAAamG,Q,EAAU;AAAA;;AAChC,cAAMC,OAAO,GAAG,IAAI,gEAAJ,CAAgBpG,WAAW,GAAG;AAC1CqG,yBAAa,EAAE,WAAWC,IAAI,CAACtG,WAAW,CAACE,QAAZ,GAAuB,GAAvB,GAA6BF,WAAW,CAACG,QAA1C;AADY,WAAH,GAEvC,EAFY,CAAhB;AAIA,eAAK+D,IAAL,CAAU1C,GAAV,CAAc,WAAd,EAA2B;AAAE4E,mBAAO,EAAEA;AAAX,WAA3B,EAAiDjF,SAAjD,CAA2D,UAAAoF,QAAQ,EAAI;AACnE,gBAAIA,QAAQ,CAAC,MAAD,CAAZ,EAAsB;AAClB,oBAAI,CAAC9F,aAAL,GAAqB,IAArB;AACH,aAFD,MAEO;AACH,oBAAI,CAACA,aAAL,GAAqB,KAArB;AACH;;AACD,mBAAO0F,QAAQ,IAAIA,QAAQ,EAA3B;AACH,WAPD;AAQH;;;iCAEQX,a,EAA4B;AAClC,iBAAO,KAAKtB,IAAL,CAAUM,IAAV,CAAe,cAAf,EAA+BgB,aAA/B,CAAP;AACF;;;iCAEQ;AAAA;;AACL,eAAKtB,IAAL,CAAUM,IAAV,CAAe,SAAf,EAA0B,EAA1B,EAA8BrF,IAA9B,CAAmC,gEAAS,YAAM;AAC9C,kBAAI,CAACsB,aAAL,GAAqB,KAArB;;AACA,kBAAI,CAAC/D,MAAL,CAAY2D,aAAZ,CAA0B,QAA1B;AACH,WAHkC,CAAnC,EAGIc,SAHJ;AAIH;;;;;;;uBA5BQ+E,W,EAAW,uH,EAAA,8G;AAAA,K;;;aAAXA,W;AAAW,eAAXA,WAAW,K;AAAA,kBADE;;;;;sEACbA,W,EAAW;cADvB,wDACuB;eADZ;AAAEvG,oBAAU,EAAE;AAAd,S;AACY,Q;;;;;;;;;;;;;;;;;;;;;;;;ACRxB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACKE;;AAA+E;;AAAsB;;;;;;AAQnG;;AAA8C;;AAAyB;;;;;;AAKrE;;AAAoC;;AAAK;;;;;;AACzC;;AAAqC;;AAAoB;;;;;;AAApB;;AAAA;;;;;;AAKrC;;AAAoC;;AAAO;;;;;;;;AAC3C;;AACE;;AACE;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAwD;;AAAe;;AAC3E;;;;;;AAGF;;;;;;AACA;;;;;;AAWE;;AAAoC;;AAAK;;;;;;AACzC;;AAAqC;;AAAoB;;;;;;AAApB;;AAAA;;;;;;AAKrC;;AAAoC;;AAAI;;;;;;;;AACxC;;AACE;;AACE;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAA2C;;AAAY;;AAC3D;;;;;;;;AAF4C;;AAAA;;;;;;AAK9C;;;;;;AACA;;;;QD3CS6G,kB;AASX,kCAAmB5F,eAAnB,EAA6D6F,WAA7D,EAA+FpE,KAA/F,EAAsH;AAAA;;AAAnG,aAAAzB,eAAA,GAAAA,eAAA;AAA0C,aAAA6F,WAAA,GAAAA,WAAA;AAAkC,aAAApE,KAAA,GAAAA,KAAA;AAR/F,aAAAyC,gBAAA,GAA6B,CAAC,MAAD,EAAS,KAAT,CAA7B;AAIO,aAAA4B,cAAA,GAAyC,EAAzC;AAIkH;;;;mCAEjH;AACN,eAAKC,cAAL,GAAsB,KAAKtE,KAAL,CAAWC,QAAX,CAAoB8B,IAApB,CAAyBpG,SAA/C;AAEA,eAAK+C,KAAL,GAAa,IAAI,yDAAJ,CAAiB,EAAjB,EAAqB,EAArB,CAAb;AACA,eAAK6F,QAAL,GAAgB,IAAI,wDAAJ,CAAc;AAC5B,oBAAQ,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB,0DAAW7G,QAAjC;AADoB,WAAd,CAAhB;AAGD;;;6CAEoBvD,E,EAAY;AAC/B,eAAKuE,KAAL,CAAW8F,YAAX,CAAwBlF,IAAxB,CAA6BnF,EAA7B;AACA,cAAIsK,QAAQ,GAAG,KAAKH,cAAL,CAAoBjC,IAApB,CAAyB,UAAAC,CAAC;AAAA,mBAAIA,CAAC,CAACnI,EAAF,KAASA,EAAb;AAAA,WAA1B,CAAf;AACA,eAAKkK,cAAL,CAAoB/E,IAApB,CAAyBmF,QAAzB;AACA,eAAKC,mBAAL,CAAyBC,UAAzB;AACD;;;0DAEiCxK,E,EAAY;AAC5C,eAAK,IAAIwF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKjB,KAAL,CAAW8F,YAAX,CAAwBpF,MAA5C,EAAoDO,CAAC,EAArD,EAAyD;AACvD,gBAAI,KAAKjB,KAAL,CAAW8F,YAAX,CAAwB7E,CAAxB,MAA+BxF,EAAnC,EAAuC;AACrC,mBAAKuE,KAAL,CAAW8F,YAAX,CAAwBI,MAAxB,CAA+BjF,CAAC,EAAhC,EAAoC,CAApC;AACD;AACF;;AAED,eAAK,IAAIA,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAG,KAAK0E,cAAL,CAAoBjF,MAAxC,EAAgDO,GAAC,EAAjD,EAAqD;AACnD,gBAAI,KAAK0E,cAAL,CAAoB1E,GAApB,EAAuBxF,EAAvB,KAA8BA,EAAlC,EAAsC;AACpC,mBAAKkK,cAAL,CAAoBO,MAApB,CAA2BjF,GAAC,EAA5B,EAAgC,CAAhC;AACD;AACF;;AAED,eAAK+E,mBAAL,CAAyBC,UAAzB;AACD;;;uCAEcxK,E,EAAU;AACvB,iBAAO,KAAKuE,KAAL,CAAW8F,YAAX,CAAwBK,QAAxB,CAAiC1K,EAAjC,CAAP;AACD;;;qDAEyB;AACxB,iBAAO,KAAKuE,KAAL,CAAW8F,YAAX,CAAwBpF,MAAxB,IAAkC,CAAzC;AACD;;;yCAEgB;AACf,eAAKmF,QAAL,GAAgB,IAAI,wDAAJ,CAAc;AAC5B,oBAAQ,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB,0DAAW7G,QAAjC;AADoB,WAAd,CAAhB;AAGD;;;oCAEW;AAEV,eAAKoH,UAAL,CAAgB7F,SAAhB;AAEA,eAAKP,KAAL,GAAa,IAAI,yDAAJ,CAAiB,EAAjB,EAAqB,EAArB,CAAb;AACA,eAAK2F,cAAL,GAAsB,EAAtB;AACA,eAAKK,mBAAL,CAAyBC,UAAzB;AACD;;;mCAEU;AACT,eAAKjG,KAAL,CAAW0E,IAAX,GAAkB,KAAKmB,QAAL,CAAc3G,KAAd,CAAoBwF,IAAtC;AACA,eAAKgB,WAAL,CAAiBW,OAAjB,CAAyB,KAAKrG,KAA9B,EAAqCI,SAArC;AAEA,eAAKC,SAAL;AACD;;;;;;;uBAvEUoF,kB,EAAkB,mJ,EAAA,0H,EAAA,+H;AAAA,K;;;YAAlBA,kB;AAAkB,oC;AAAA;AAAA;;;0EAOlB,gE,EAAU,I;;;;;;;;;;;;;;;ACrBvB;;AAA6B;AAAA,mBAAY,IAAAtE,QAAA,EAAZ;AAAsB,WAAtB;;AAC3B;;AACE;;AAAsB;;AAAY;;AAClC;;AACF;;AACA;;AACA;;AACsB;;AAAM;;AAC9B;;AAEA;;AACE;;AACE;;AAA0B;;AAAe;;AACzC;;AACF;;AACA;;AAEE;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AAIF;;AAEA;;AACA;;AACF;;AACF;;AAEA;;AACE;;AACE;;AAA0B;;AAAmB;;AAC/C;;AACA;;AAEE;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AAIF;;AAEA;;AACA;;AACF;;AACF;;;;AA3DM;;AAKO;;AAAA;;AAC+B;;AAAA;;AAO7B;;AAAA;;AAEF;;AAAA;;AAgBO;;AAAA;;AACP;;AAAA;;AAQA;;AAAA;;AAgBO;;AAAA;;AACP;;AAAA;;;;;;;;;sED3CAsE,kB,EAAkB;cAL9B,uDAK8B;eALpB;AACTvJ,kBAAQ,EAAE,eADD;AAETC,qBAAW,EAAE,4BAFJ;AAGTC,mBAAS,EAAE,CAAC,2BAAD;AAHF,S;AAKoB,Q;;;;;;;;;;gBAM5B,uD;iBAAU,G;;;gBACV,uD;iBAAU,gE,EAAU;AAAE,sBAAQ;AAAV,W;;;;;;;;;;;;;;;;;;;;AErBvB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACKI;;AAA+E;;AAAsB;;;;;;AAQnG;;AAA8C;;AAAyB;;;;;;AAKrE;;AAAoC;;AAAK;;;;;;AACzC;;AAAqC;;AAAoB;;;;;;AAApB;;AAAA;;;;;;AAKrC;;AAAoC;;AAAO;;;;;;;;AAC3C;;AACE;;AACE;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAwD;;AAAe;;AAC3E;;;;;;AAGF;;;;;;AACA;;;;;;AAWE;;AAAoC;;AAAK;;;;;;AACzC;;AAAqC;;AAAoB;;;;;;AAApB;;AAAA;;;;;;AAKrC;;AAAoC;;AAAI;;;;;;;;AACxC;;AACE;;AACE;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAA2C;;AAAY;;AAC3D;;;;;;;;AAF4C;;AAAA;;;;;;AAK9C;;;;;;AACA;;;;QD5COkK,mB;AAUX,mCAAmBZ,WAAnB,EAAqDpE,KAArD,EAAoF3F,MAApF,EAAoG;AAAA;;AAAjF,aAAA+J,WAAA,GAAAA,WAAA;AAAkC,aAAApE,KAAA,GAAAA,KAAA;AAA+B,aAAA3F,MAAA,GAAAA,MAAA;AATpF,aAAAoI,gBAAA,GAA6B,CAAC,MAAD,EAAS,KAAT,CAA7B;AAIO,aAAA4B,cAAA,GAAyC,EAAzC;AAKgG;;;;mCAE/F;AAAA;;AACN,eAAKC,cAAL,GAAsB,KAAKtE,KAAL,CAAWC,QAAX,CAAoB8B,IAApB,CAAyBpG,SAA/C;AAEA,eAAKxB,EAAL,GAAU,KAAK6F,KAAL,CAAWC,QAAX,CAAoBC,MAApB,CAA2B,IAA3B,CAAV;AACA,eAAKkE,WAAL,CAAiBa,eAAjB,CAAiC,KAAK9K,EAAtC;AAEA,eAAKoK,QAAL,GAAgB,IAAI,wDAAJ,CAAc;AAC5B,oBAAQ,IAAI,0DAAJ,CAAgB,KAAKH,WAAL,CAAiBc,eAAjB,GAAmC9B,IAAnD,EAAyD,0DAAW1F,QAApE;AADoB,WAAd,CAAhB;AAIA,eAAKgB,KAAL,GAAa,IAAI,yDAAJ,CAAiB,EAAjB,EAAoB,EAApB,CAAb;AACA,eAAKA,KAAL,CAAW0E,IAAX,GAAkB,KAAKgB,WAAL,CAAiBc,eAAjB,GAAmC9B,IAArD;AAEA,eAAKiB,cAAL,GAAsB,KAAKD,WAAL,CAAiBc,eAAjB,GAAmCC,kBAAzD;AAEA,eAAKf,WAAL,CAAiBc,eAAjB,GAAmCC,kBAAnC,CAAsD9E,OAAtD,CAA8D,UAAAiC,CAAC,EAAE;AAE7D,kBAAI,CAAC5D,KAAL,CAAW8F,YAAX,CAAwBlF,IAAxB,CAA6BgD,CAAC,CAACnI,EAA/B;AACD,WAHH;AAID;;;0DAEiCA,E,EAAY;AAC5C,eAAK,IAAIwF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKjB,KAAL,CAAW8F,YAAX,CAAwBpF,MAA5C,EAAoDO,CAAC,EAArD,EAAyD;AACvD,gBAAI,KAAKjB,KAAL,CAAW8F,YAAX,CAAwB7E,CAAxB,MAA+BxF,EAAnC,EAAuC;AACrC,mBAAKuE,KAAL,CAAW8F,YAAX,CAAwBI,MAAxB,CAA+BjF,CAAC,EAAhC,EAAoC,CAApC;AACD;AACF;;AAED,eAAK,IAAIA,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAG,KAAK0E,cAAL,CAAoBjF,MAAxC,EAAgDO,GAAC,EAAjD,EAAqD;AACnD,gBAAI,KAAK0E,cAAL,CAAoB1E,GAApB,EAAuBxF,EAAvB,KAA8BA,EAAlC,EAAsC;AACpC,mBAAKkK,cAAL,CAAoBO,MAApB,CAA2BjF,GAAC,EAA5B,EAAgC,CAAhC;AACD;AACF;;AAED,eAAK+E,mBAAL,CAAyBC,UAAzB;AACD;;;oCAEW;AAEV,eAAKG,UAAL,CAAgB7F,SAAhB;AAEA,eAAKP,KAAL,GAAa,IAAI,yDAAJ,CAAiB,EAAjB,EAAqB,EAArB,CAAb;AACA,eAAK2F,cAAL,GAAsB,EAAtB;AACA,eAAKK,mBAAL,CAAyBC,UAAzB;AACD;;;qDAEyB;AACxB,iBAAO,KAAKjG,KAAL,CAAW8F,YAAX,CAAwBpF,MAAxB,IAAkC,CAAzC;AACD;;;uCAEcjF,E,EAAU;AACvB,iBAAO,KAAKuE,KAAL,CAAW8F,YAAX,CAAwBK,QAAxB,CAAiC1K,EAAjC,CAAP;AACD;;;6CAEoBA,E,EAAY;AAC/B,eAAKuE,KAAL,CAAW8F,YAAX,CAAwBlF,IAAxB,CAA6BnF,EAA7B;AACA,cAAIsK,QAAQ,GAAG,KAAKH,cAAL,CAAoBjC,IAApB,CAAyB,UAAAC,CAAC;AAAA,mBAAIA,CAAC,CAACnI,EAAF,KAASA,EAAb;AAAA,WAA1B,CAAf;AACA,eAAKkK,cAAL,CAAoB/E,IAApB,CAAyBmF,QAAzB;AACA,eAAKC,mBAAL,CAAyBC,UAAzB;AACD;;;mCAEU;AACT,eAAKjG,KAAL,CAAW0E,IAAX,GAAkB,KAAKmB,QAAL,CAAc3G,KAAd,CAAoBwF,IAAtC;AACA,eAAKgB,WAAL,CAAiBgB,UAAjB,CAA4B,KAAK1G,KAAjC,EAAwC,KAAKvE,EAA7C,EAAiD2E,SAAjD;AAEA,eAAKC,SAAL;AACA,eAAK1E,MAAL,CAAYC,QAAZ,CAAqB,CAAC,MAAD,CAArB;AACD;;;;;;;uBA/EU0K,mB,EAAmB,0H,EAAA,+H,EAAA,uH;AAAA,K;;;YAAnBA,mB;AAAmB,qC;AAAA;AAAA;;;0EAOnB,gE,EAAU,I;;;;;;;;;;;;;;;ACpBvB;;AAA6B;AAAA,mBAAY,IAAAnF,QAAA,EAAZ;AAAsB,WAAtB;;AACzB;;AACE;;AAAsB;;AAAY;;AAClC;;AACF;;AACA;;AACA;;AACsB;;AAAM;;AAC9B;;AAEA;;AACE;;AACE;;AAA0B;;AAAe;;AACzC;;AACF;;AACA;;AAEE;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AAIF;;AAEA;;AACA;;AACF;;AACF;;AAEA;;AACE;;AACE;;AAA0B;;AAAmB;;AAC/C;;AACA;;AAEE;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AAIF;;AAEA;;AACA;;AACF;;AACF;;;;AA3DI;;AAKS;;AAAA;;AAC+B;;AAAA;;AAO7B;;AAAA;;AAEF;;AAAA;;AAgBO;;AAAA;;AACP;;AAAA;;AAQA;;AAAA;;AAgBO;;AAAA;;AACP;;AAAA;;;;;;;;;sED5CFmF,mB,EAAmB;cAL/B,uDAK+B;eALrB;AACTpK,kBAAQ,EAAE,gBADD;AAETC,qBAAW,EAAE,6BAFJ;AAGTC,mBAAS,EAAE,CAAC,4BAAD;AAHF,S;AAKqB,Q;;;;;;;;;;gBAM7B,uD;iBAAU,G;;;gBACV,uD;iBAAU,gE,EAAU;AAAE,sBAAQ;AAAV,W;;;;;;;;;;;;;;;;;;;;AEDvB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAAauK,Y,GACT,sBAAmBjC,IAAnB,EAAwCoB,YAAxC,EAA8D;AAAA;;AAA3C,WAAApB,IAAA,GAAAA,IAAA;AAAqB,WAAAoB,YAAA,GAAAA,YAAA;AAAyB,K;;QAGxDc,c,GACT,wBAAmBnL,EAAnB,EAAsCoL,MAAtC,EAAoD;AAAA;;AAAjC,WAAApL,EAAA,GAAAA,EAAA;AAAmB,WAAAoL,MAAA,GAAAA,MAAA;AAAiB,K;;QAG9CC,a,GACT,uBAAmBpC,IAAnB,EAAuCH,KAAvC,EAA4D9I,EAA5D,EAA8EsL,WAA9E,EAAyG9J,SAAzG,EAAuI;AAAA;;AAApH,WAAAyH,IAAA,GAAAA,IAAA;AAAoB,WAAAH,KAAA,GAAAA,KAAA;AAAqB,WAAA9I,EAAA,GAAAA,EAAA;AAAkB,WAAAsL,WAAA,GAAAA,WAAA;AAA2B,WAAA9J,SAAA,GAAAA,SAAA;AAAiC,K;;;;;;;;;;;;;;;;;AC5B9I;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAMa+J,Y;AAET,4BAAoBtB,WAApB,EAA4C;AAAA;;AAAxB,aAAAA,WAAA,GAAAA,WAAA;AAA2B;;;;gCAEvCpE,K,EAA+B6C,K,EAA0B;AAC7D,iBAAO,KAAKuB,WAAL,CAAiBuB,UAAjB,EAAP;AACH;;;;;;;uBANQD,Y,EAAY,iH;AAAA,K;;;aAAZA,Y;AAAY,eAAZA,YAAY,K;AAAA,kBADD;;;;;sEACXA,Y,EAAY;cADxB,wDACwB;eADb;AAACpI,oBAAU,EAAC;AAAZ,S;AACa,Q;;;;;;;;;;;;;;;;;;;;;;ACNzB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAMasI,W;AAIT,2BAAoB/D,IAApB,EAAsC;AAAA;;AAAlB,aAAAA,IAAA,GAAAA,IAAA;AAFZ,aAAAgE,YAAA,GAAiC,IAAjC;AAEiC;;;;qCAE/B;AACN,iBAAO,KAAKhE,IAAL,CAAU1C,GAAV,CAAkC,UAAlC,CAAP;AACH;;;wCAEehF,E,EAAY;AAAA;;AACxB,eAAK0H,IAAL,CAAU1C,GAAV,CAAgC,cAAchF,EAA9C,EACC2E,SADD,CACW,UAAAiD,IAAI;AAAA,mBAAI,MAAI,CAAC8D,YAAL,GAAoB9D,IAAxB;AAAA,WADf;AAEH;;;gCAEO+D,Y,EAA4B;AAChC,iBAAO,KAAKjE,IAAL,CAAUM,IAAV,CAAiC,UAAjC,EAA6C2D,YAA7C,CAAP;AACH;;;mCAIUA,Y,EAA4B3L,E,EAAS;AAC5C,iBAAO,KAAK0H,IAAL,CAAUI,KAAV,CAAkC,cAAY9H,EAA9C,EAAkD2L,YAAlD,CAAP;AACH;;;gDAEoB;AACjB,eAAKD,YAAL,GAAoB,IAApB;AACH;;;wCAEeE,I,EAAsB;AAClC,eAAKF,YAAL,GAAoBE,IAApB;AACH;;;0CAEc;AACX,iBAAO,KAAKF,YAAZ;AACH;;;;;;;uBAnCQD,W,EAAW,uH;AAAA,K;;;aAAXA,W;AAAW,eAAXA,WAAW,K;AAAA,kBADA;;;;;sEACXA,W,EAAW;cADvB,wDACuB;eADZ;AAACtI,oBAAU,EAAC;AAAZ,S;AACY,Q;;;;;;;;;;;;;;;;;;;;;;ACNxB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACKY;;AAAqG;;AAAK;;AAAgB;;AAAM;;AAAuD;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAA0C;;AAAI;;AAAS;;;;;;AAApI;;AAAA;;;;;;;;AAJlH;;AACI;;AAAI;;AAA+C;;AACnD;;AAAI;;AAAU;;AACd;;AACI;;AACJ;;AACA;;AAA+B;AAAA;;AAAA;;AAAA,2CAA4B,OAAA8G,WAAA,mBAA8BjK,EAA1D;AAAyD,SAAzD;;AAA+D;;AAAI;;AAClG;;AAA+B;AAAA;;AAAA;;AAAA,4CAA6B,OAAAiK,WAAA,mBAA8BjK,EAA3D;AAA0D,SAA1D;;AAAgE;;AAAK;;AACxG;;;;;;AAPQ;;AAAA;;AAGe;;AAAA;;;;;;AAKU;;;;QDCxB6L,e;AAGX,+BAAmB5B,WAAnB,EAAqD7F,eAArD,EAA+FlE,MAA/F,EAAuH2F,KAAvH,EAA8I;AAAA;;AAA3H,aAAAoE,WAAA,GAAAA,WAAA;AAAkC,aAAA7F,eAAA,GAAAA,eAAA;AAA0C,aAAAlE,MAAA,GAAAA,MAAA;AAAwB,aAAA2F,KAAA,GAAAA,KAAA;AAAyB;;;;mCAExI;AACN,eAAKrE,SAAL,GAAiB,KAAKqE,KAAL,CAAWC,QAAX,CAAoB8B,IAApB,CAAyBpG,SAA1C;AACD;;;+CAEsBxB,E,EAAU;AAE/B,eAAKoE,eAAL,CAAqBoE,mBAArB,CAAyC,KAAKhH,SAA9C,EAAyDxB,EAAzD;AACA,eAAKE,MAAL,CAAYC,QAAZ,CAAqB,CAAC,mBAAiBH,EAAlB,CAArB;AACD;;;2CAEkBA,E,EAAU;AAC3B,eAAKE,MAAL,CAAYC,QAAZ,CAAqB,CAAC,eAAaH,EAAd,CAArB;AACD;;;4CAEmBA,E,EAAU;AAC5B,eAAKE,MAAL,CAAYC,QAAZ,CAAqB,CAAC,oBAAkBH,EAAnB,CAArB;AACD;;;;;;;uBArBU6L,e,EAAe,0H,EAAA,mJ,EAAA,uH,EAAA,+H;AAAA,K;;;YAAfA,e;AAAe,iC;AAAA,c;AAAA,a;AAAA,8Q;AAAA;AAAA;ACX5B;;AACI;;AASA;;AACJ;;;;;;AAVS;;AAAA,uHAAqE,UAArE,EAAqE,GAArE;;;;;;;;;sEDUIA,e,EAAe;cAL3B,uDAK2B;eALjB;AACTpL,kBAAQ,EAAE,YADD;AAETC,qBAAW,EAAE,yBAFJ;AAGTC,mBAAS,EAAE,CAAC,wBAAD;AAHF,S;AAKiB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEX5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACMI;;AAAyF;;AACzF;;;;;;AAKA;;AAA2F;;AAC3F;;;;;;AAMgB;;AACI;;AACI;;AAAG;;AAA0D;;AAC7D;;AAA+D;;AAAU;;AAC7E;;AACJ;;;;;;;;;;AAJS;;AAAA;;AACE;;AAAA;;;;;;AANvB;;AACI;;AACI;;AAAK;;AAAuD;;AAC5D;;AACI;;AAMJ;;AACJ;;AACJ;;;;;;;;AAXS;;AAAA;;AACI;;AAAA;;AAEI;;AAAA;;;;;;;;AAnBzB;;AAAoD;AAAA;;AAAA;;AAAA;AAAA;;AAChD;;AAAI;;AAA2B;;AAC/B;;AACI;;AAAsB;;AAAe;;AACrC;;AACJ;;AACA;;AAEA;;AACI;;AAAuB;;AAAgB;;AACvC;;AACJ;;AACA;;AAEA;;AACI;;AAaJ;;AACA;;AACwB;;AAAK;;AACjC;;;;;;AA/BwB;;AAChB;;AAAA;;AAKO;;AAAA;;AAMA;;AAAA;;AAGF;;AAAA;;AAc+C;;AAAA;;;;;;;;;;;;;AAqBrD;;AACI;;AAAqF;;AAAuE;;AAC/J;;;;;;AADM;;AAAA;;AAAkF;;AAAA;;;;;;AAH5F;;AACI;;AAA0F;;AAA+C;;AAC1I;;AAGH;;;;;;;AAJQ;;AAAA;;AAAsF;;AAAA;;AACzD;;AAAA;;;;;;AAlBzC;;AACI;;AACI;;AAAI;;AAAiC;;AACzC;;AACA;;AACI;;AAAI;;AAAqC;;AAC7C;;AACA;;AACI;;AAAI;;AAA0C;;AAClD;;AACA;;AACI;;AAAI;;AAA6C;;AACrD;;AACA;;AACI;;AAAI;;AAAgD;;AACxD;;AACA;;AAMJ;;;;;;AApBY;;AAAA;;AAGA;;AAAA;;AAGA;;AAAA;;AAGA;;AAAA;;AAGA;;AAAA;;AAE0B;;AAAA;;;;QDpCzBmL,6B;AASX,6CAAoBjG,KAApB,EAAmDkG,gBAAnD,EAAuF;AAAA;;AAAnE,aAAAlG,KAAA,GAAAA,KAAA;AAA+B,aAAAkG,gBAAA,GAAAA,gBAAA;AAHnD,aAAAC,QAAA,GAAoB,KAApB;AAG0F;;;;mCAElF;AACN,eAAKC,UAAL,GAAkB,IAAI,0DAAJ,CAAkB,EAAlB,EAAqB,EAArB,EAAwB,CAAxB,EAA0B,CAA1B,EAA4B,EAA5B,CAAlB;AAEA,eAAKjM,EAAL,GAAU,CAAC,KAAK6F,KAAL,CAAWC,QAAX,CAAoBC,MAApB,CAA2B,IAA3B,CAAX;AACAvD,iBAAO,CAACC,GAAR,CAAY,KAAKzC,EAAjB;AAEA,eAAKkM,YAAL,GAAoB,KAAKrG,KAAL,CAAWC,QAAX,CAAoB8B,IAApB,CAAyBvG,SAA7C;AACA,eAAK8K,SAAL;AACD;;;kDAE6B;AAC5B,iBAAmB,KAAKC,aAAL,CAAmBpH,GAAnB,CAAuB,WAAvB,EAAqCI,QAAxD;AACD;;;8CAE4BpF,E,EAAS;AACpC,iBAAmB,KAAKqM,uBAAL,GAA+BrM,EAA/B,EAAmCgF,GAAnC,CAAuC,SAAvC,EAAmDI,QAAtE;AACD;;;oCAEmB;AAElB,eAAKgH,aAAL,GAAqB,IAAI,wDAAJ,CAAc;AACjC,oBAAQ,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB,0DAAW7I,QAAjC,CADyB;AAEjC,qBAAS,IAAI,0DAAJ,CAAgB,IAAhB,EAAqB,CAAC,0DAAWA,QAAZ,EAAsB,0DAAWuF,KAAjC,CAArB,CAFwB;AAGjC,kBAAM,IAAI,0DAAJ,CAAgB,KAAKoD,YAAL,CAAkBlM,EAAlC,EAAsC,0DAAWuD,QAAjD,CAH2B;AAIjC,yBAAa,IAAI,wDAAJ,CAAc,EAAd;AAJoB,WAAd,EAKnB,CAAC,KAAKe,0BAAN,CALmB,CAArB;AAOA,cAAIgI,aAAa,GAAe,KAAKF,aAAL,CAAmBpH,GAAnB,CAAuB,WAAvB,CAAhC;AAEA,eAAKkH,YAAL,CAAkBlB,kBAAlB,CAAqC9E,OAArC,CACE,UAACiC,CAAD,EAAIoE,KAAJ,EAAc;AACZD,yBAAa,CAACnH,IAAd,CACE,IAAI,wDAAJ,CAAc;AACZ,oBAAM,IAAI,0DAAJ,CAAgBgD,CAAC,CAACnI,EAAlB,CADM;AAEZ,yBAAW,IAAI,wDAAJ,CAAc,EAAd;AAFC,aAAd,CADF;AAOA,gBAAIyE,OAAO,GAAe6H,aAAa,CAAClH,QAAd,CAAuBmH,KAAvB,EAA8BvH,GAA9B,CAAkC,SAAlC,CAA1B;AAEAmD,aAAC,CAAC1D,OAAF,CAAUyB,OAAV,CAAkB,UAAAC,CAAC,EAAI;AACrB1B,qBAAO,CAACU,IAAR,CACE,IAAI,wDAAJ,CAAc;AACZ,sBAAM,IAAI,0DAAJ,CAAgBgB,CAAC,CAACnG,EAAlB,CADM;AAEZ,2BAAW,IAAI,0DAAJ,CAAgB,KAAhB,EAAuB,0DAAWuD,QAAlC;AAFC,eAAd,CADF;AAMD,aAPD;AAQD,WAnBH;AAqBD;;;mCAEO;AAAA;;AAEN,eAAK0I,UAAL,CAAgBjM,EAAhB,GAAqB,KAAKoM,aAAL,CAAmB3I,KAAnB,CAAyBzD,EAA9C;AACA,eAAKiM,UAAL,CAAgBhD,IAAhB,GAAuB,KAAKmD,aAAL,CAAmB3I,KAAnB,CAAyBwF,IAAhD;AACA,eAAKgD,UAAL,CAAgBnD,KAAhB,GAAwB,KAAKsD,aAAL,CAAmB3I,KAAnB,CAAyBqF,KAAjD;AAEA,eAAKmD,UAAL,CAAgBX,WAAhB,GAA8B,KAAKtL,EAAnC;AAEA,eAAKqM,uBAAL,GAA+BnG,OAA/B,CAAuC,UAAAiC,CAAC,EAAG;AAEzC,gBAAI1D,OAAO,GAAe0D,CAAC,CAACnD,GAAF,CAAM,SAAN,EAAkBI,QAA5C;AACA,gBAAIoH,kBAAkB,GAAG,IAAI,oFAAJ,CAAuBrE,CAAC,CAAC1E,KAAF,CAAQzD,EAA/B,EAAkC,EAAlC,CAAzB;AACAyE,mBAAO,CAACyB,OAAR,CAAgB,UAAAC,CAAC,EAAG;AAChBqG,gCAAkB,CAACrF,eAAnB,CAAmChC,IAAnC,CAAwC,IAAI,qFAAJ,CAAwBgB,CAAC,CAAC1C,KAAF,CAAQzD,EAAhC,EAAoCmG,CAAC,CAAC1C,KAAF,CAAQgC,OAA5C,CAAxC;AACH,aAFD;;AAIA,kBAAI,CAACwG,UAAL,CAAgBzK,SAAhB,CAA0B2D,IAA1B,CAA+BqH,kBAA/B;AACD,WATD;AAWA,eAAKT,gBAAL,CAAsBU,SAAtB,CAAgC,KAAKR,UAArC,EAAiDtH,SAAjD,CAEE,UAAA+H,CAAC;AAAA,mBAAI,MAAI,CAACC,kBAAL,GAA0BD,CAA9B;AAAA,WAFH;AAKA,eAAKV,QAAL,GAAgB,IAAhB;AACD;;;mDAE0B3G,O,EAAwB;AAEjD,cAAMuH,iBAAiB,GAAevH,OAAO,CAACL,GAAR,CAAY,WAAZ,EAA0BI,QAAhE;AAEA,cAAIyH,sBAAsB,GAA6B,EAAvD;;AAEA,eAAI,IAAIrH,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAGoH,iBAAiB,CAAC3H,MAAnC,EAA2CO,CAAC,EAA5C,EAA+C;AAC7C,gBAAMsH,gBAAgB,GAAeF,iBAAiB,CAACpH,CAAD,CAAjB,CAAqBR,GAArB,CAAyB,SAAzB,CAArC;AACA,gBAAI+H,eAAe,GAAG,IAAIC,sBAAJ,EAAtB;AACAH,kCAAsB,CAAC1H,IAAvB,CAA4B4H,eAA5B;;AACA,iBAAI,IAAIE,EAAE,GAAC,CAAX,EAAeA,EAAE,GAAGH,gBAAgB,CAAC7H,MAArC,EAA6CgI,EAAE,EAA/C,EAAkD;AAChD,kBAAGH,gBAAgB,CAAC1H,QAAjB,CAA0B6H,EAA1B,EAA8BxJ,KAA9B,CAAoCgC,OAApC,KAAgD,IAAnD,EAAwD;AACtDsH,+BAAe,CAACG,eAAhB;AACD;AACF;AACF;;AAED,eAAI,IAAI1H,GAAC,GAAC,CAAV,EAAaA,GAAC,GAAGqH,sBAAsB,CAAC5H,MAAxC,EAAgDO,GAAC,EAAjD,EAAoD;AAClD,gBAAGqH,sBAAsB,CAACrH,GAAD,CAAtB,CAA0B0H,eAA1B,KAA8C,CAAjD,EAAmD;AACjD,qBAAO;AAAC,2BAAW;AAAZ,eAAP;AACD;AACF;;AAED,iBAAO,IAAP;AACD;;;;;;;uBAlHUpB,6B,EAA6B,+H,EAAA,oI;AAAA,K;;;YAA7BA,6B;AAA6B,+C;AAAA,c;AAAA,a;AAAA,y0B;AAAA;AAAA;ACZ1C;;AAgCA;;;;AAhCM;;AAgCD;;AAAA;;;;;;;;;sEDpBQA,6B,EAA6B;cALzC,uDAKyC;eAL/B;AACTrL,kBAAQ,EAAE,0BADD;AAETC,qBAAW,EAAE,uCAFJ;AAGTC,mBAAS,EAAE,CAAC,sCAAD;AAHF,S;AAK+B,Q;;;;;;;;;QAqH7BqM,sB,GAAb;AAAA;;AACE,WAAAE,eAAA,GAAyB,CAAzB;AACD,K;;;;;;;;;;;;;;;;;AEnID;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACMQ;;AAAoC;;AAAa;;;;;;AACjD;;AAAqC;;AAAiB;;;;;;AAAjB;;AAAA;;;;;;AAIrC;;AAAoC;;AAAa;;;;;;AACjD;;AAAqC;;AAAqB;;;;;;AAArB;;AAAA;;;;;;AAGvC;;;;;;AACA;;;;;;AAYE;;AAAoC;;AAAK;;;;;;AACzC;;AAAqC;;AAAiB;;;;;;AAAjB;;AAAA;;;;;;AAIrC;;AAAoC;;AAAU;;;;;;AAC9C;;AAAqC;;AAAqB;;;;;;AAArB;;AAAA;;;;;;AAIrC;;AAAoC;;AAAO;;;;;;AAC3C;;AAAqC;;AAAmB;;;;;;AAAnB;;AAAA;;;;;;AAIrC;;AAAoC;;AAAW;;;;;;AAC/C;;AAAqC;;AAAsB;;;;;;AAAtB;;AAAA;;;;;;AAIrC;;AAAoC;;AAAO;;;;;;AAC3C;;AAAqC;;AAAmB;;;;;;AAAnB;;AAAA;;;;;;AAIrC;;AAAoC;;AAAO;;;;;;;;;;;;;AAWpC;;AACI;;AAAqF;;AAAuE;;AAC/J;;;;;;AADM;;AAAA;;AAAkF;;AAAA;;;;;;AAH1F;;AACE;;AAA0F;;AAA+C;;AAC1I;;AAGH;;;;;;;AAJQ;;AAAA;;AAAsF;;AAAA;;AACzD;;AAAA;;;;;;AAVzC;;AACE;;AACE;;AACE;;AACE;;AACE;;AACF;;AACF;;AACA;;AAMF;;AACF;;AACF;;;;;;AARwC;;AAAA;;;;;;AAW1C;;;;;;AACA;;;;QDhEOC,oB;AAOX,oCAAoBtH,KAApB,EAA2C;AAAA;;AAAvB,aAAAA,KAAA,GAAAA,KAAA;AANpB,aAAAuH,cAAA,GAAiB,KAAjB;AACA,aAAAC,sBAAA,GAAmC,CAAC,MAAD,EAAQ,KAAR,CAAnC;AACA,aAAAC,sBAAA,GAAmC,CAAC,MAAD,EAAQ,UAAR,EAAmB,QAAnB,EAA4B,WAA5B,EAAwC,QAAxC,EAAiD,QAAjD,CAAnC;AAI8C;;;;mCAEtC;AACN,eAAK/L,WAAL,GAAmB,KAAKsE,KAAL,CAAWC,QAAX,CAAoB8B,IAApB,CAAyBrG,WAA5C;AACA,eAAKD,UAAL,GAAkB,KAAKuE,KAAL,CAAWC,QAAX,CAAoB8B,IAApB,CAAyBtG,UAA3C;AACD;;;;;;;uBAZU6L,oB,EAAoB,+H;AAAA,K;;;YAApBA,oB;AAAoB,sC;AAAA,e;AAAA,a;AAAA,4f;AAAA;AAAA;ACVjC;;AACE;;AACE;;AAAI;;AAAY;;AAChB;;AAEE;;AACE;;AACA;;AACF;;AAEA;;AACE;;AACA;;AACF;;AAEA;;AACA;;AACF;;AACF;;AACF;;AAEA;;AAEE;;AACE;;AAAI;;AAAY;;AAChB;;AAEE;;AACE;;AACA;;AACF;;AAEA;;AACE;;AACA;;AACF;;AAEA;;AACE;;AACA;;AACF;;AAEA;;AACE;;AACA;;AACF;;AAEA;;AACE;;AACA;;AACF;;AAEA;;AACE;;AACA;;AAiBF;;AAEA;;AACA;;AACF;;AACF;;AACF;;;;AA1Ee;;AAAA;;AAYO;;AAAA;;AACP;;AAAA;;AASA;;AAAA;;AAgDO;;AAAA;;AACP;;AAAA;;;;;;;;;sEDhEFA,oB,EAAoB;cALhC,uDAKgC;eALtB;AACT1M,kBAAQ,EAAE,iBADD;AAETC,qBAAW,EAAE,8BAFJ;AAGTC,mBAAS,EAAE,CAAC,6BAAD;AAHF,S;AAKsB,Q;;;;;;;;;;;;;;;;;;;;;;AEVjC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAMa4M,iB;AAET,iCAAoBC,gBAApB,EAAsD;AAAA;;AAAlC,aAAAA,gBAAA,GAAAA,gBAAA;AAAqC;;;;gCACjD3H,K,EAA+B6C,K,EAA0B;AAC7D,iBAAO,KAAK8E,gBAAL,CAAsBC,eAAtB,EAAP;AACH;;;;;;;uBALQF,iB,EAAiB,2H;AAAA,K;;;aAAjBA,iB;AAAiB,eAAjBA,iBAAiB,K;AAAA,kBADN;;;;;sEACXA,iB,EAAiB;cAD7B,wDAC6B;eADlB;AAACpK,oBAAU,EAAC;AAAZ,S;AACkB,Q;;;;;;;;;;;;;;;;;;;;;;ACN9B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOauK,gB;AAGT,gCAAoBhG,IAApB,EAA8C7B,KAA9C,EAAqE;AAAA;;AAAjD,aAAA6B,IAAA,GAAAA,IAAA;AAA0B,aAAA7B,KAAA,GAAAA,KAAA;AAA0B;;;;0CAGzD;AACX,iBAAO,KAAK6B,IAAL,CAAU1C,GAAV,CAAuC,eAAvC,CAAP;AACH;;;kCAEST,K,EAAqB;AAC3B,iBAAO,KAAKmD,IAAL,CAAUM,IAAV,CAAsC,eAAtC,EAAuDzD,KAAvD,CAAP;AACH;;;uCAEcvE,E,EAAY2N,M,EAAc;AAErC,cAAI5H,MAAM,GAAG,IAAI,+DAAJ,EAAb;AACAA,gBAAM,GAAGA,MAAM,CAAC6H,MAAP,CAAc,QAAd,EAAwBD,MAAxB,CAAT;AACA5H,gBAAM,GAAGA,MAAM,CAAC6H,MAAP,CAAc,IAAd,EAAoB5N,EAApB,CAAT;AAEA,iBAAO,KAAK0H,IAAL,CAAU1C,GAAV,CAAqC,oBAArC,EACP;AACIe,kBAAM,EAAEA;AADZ,WADO,CAAP;AAIH;;;;;;;uBAxBQ2H,gB,EAAgB,uH,EAAA,sH;AAAA,K;;;aAAhBA,gB;AAAgB,eAAhBA,gBAAgB,K;AAAA,kBADL;;;;;sEACXA,gB,EAAgB;cAD5B,wDAC4B;eADjB;AAACvK,oBAAU,EAAC;AAAZ,S;AACiB,Q;;;;;;;;;;;;;;;;;;;;;;;;ACP7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACKI;;AAA6F;;AAAyB;;;;QDO7G0K,sB;AAOX,sCAAoBhI,KAApB,EAAmD2H,gBAAnD,EAA8FvD,WAA9F,EAAgI/J,MAAhI,EAAgJ;AAAA;;AAA5H,aAAA2F,KAAA,GAAAA,KAAA;AAA+B,aAAA2H,gBAAA,GAAAA,gBAAA;AAA2C,aAAAvD,WAAA,GAAAA,WAAA;AAAkC,aAAA/J,MAAA,GAAAA,MAAA;AAAmB;;;;mCAE3I;AACN,eAAKF,EAAL,GAAU,CAAC,KAAK6F,KAAL,CAAWC,QAAX,CAAoBC,MAApB,CAA2B,IAA3B,CAAX;AACA,eAAKkE,WAAL,CAAiBa,eAAjB,CAAiC,KAAK9K,EAAtC;AAEA,eAAK8N,iBAAL,GAAyB,KAAK7D,WAAL,CAAiBc,eAAjB,GAAmCC,kBAAnC,CAAsD/F,MAA/E;AAEA,eAAKkH,SAAL;AACD;;;oCAEQ;AACP,eAAK4B,aAAL,GAAqB,IAAI,wDAAJ,CAAc;AACjC,sBAAU,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB,0DAAWxK,QAAjC,CADuB;AAEjC,yBAAa,IAAI,0DAAJ,CAAgB,KAAKuK,iBAArB,EAAwC,0DAAWvK,QAAnD;AAFoB,WAAd,EAGnB,CAAC,KAAKyK,WAAN,CAHmB,CAArB;AAID;;;mCAEO;AAAA;;AACJ,eAAKzJ,KAAL,GAAa,IAAI,2DAAJ,CAAmB,KAAKvE,EAAxB,EAA4B,KAAK+N,aAAL,CAAmBtK,KAAnB,CAAyB2H,MAArD,CAAb;AACA,eAAKoC,gBAAL,CAAsBS,SAAtB,CAAgC,KAAK1J,KAArC,EAA4CI,SAA5C,CACE,UAACiD,IAAD,EAAS;AACP,kBAAI,CAAC1H,MAAL,CAAYC,QAAZ,CAAqB,CAAC,aAAD,CAArB;AACD,WAHH;AAKH;;;oCAEWkF,O,EAAwB;AAElC,cAAI+F,MAAM,GAAG/F,OAAO,CAACL,GAAR,CAAY,QAAZ,EAAsBvB,KAAnC;AACA,cAAIyK,SAAS,GAAG7I,OAAO,CAACL,GAAR,CAAY,WAAZ,EAAyBvB,KAAzC;;AAEA,cAAG2H,MAAM,GAAG,CAAT,IAAcA,MAAM,GAAG8C,SAAvB,IAAoC9C,MAAM,IAAI,CAAjD,EAAmD;AACjD,mBAAO;AAAC,wBAAU;AAAX,aAAP;AACD;;AACD,iBAAO,IAAP;AACD;;;;;;;uBA3CUyC,sB,EAAsB,+H,EAAA,oI,EAAA,0H,EAAA,uH;AAAA,K;;;YAAtBA,sB;AAAsB,wC;AAAA,c;AAAA,a;AAAA,8S;AAAA;AAAA;ACZnC;;AAAkC;AAAA,mBAAY,IAAAnI,QAAA,EAAZ;AAAsB,WAAtB;;AAC9B;;AACE;;AAAwB;;AAA4F;;AACpH;;AACF;;AACA;;AACA;;AAA8G;;AAAK;;AACrH;;;;AAPI;;AAEwB;;AAAA;;AAGf;;AAAA;;AAC+B;;AAAA;;;;;;;;;sEDMjCmI,sB,EAAsB;cALlC,uDAKkC;eALxB;AACTpN,kBAAQ,EAAE,mBADD;AAETC,qBAAW,EAAE,gCAFJ;AAGTC,mBAAS,EAAE,CAAC,+BAAD;AAHF,S;AAKwB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEZnC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAMawN,iB;AACT,iCAAoBX,gBAApB,EAAsD;AAAA;;AAAlC,aAAAA,gBAAA,GAAAA,gBAAA;AAAqC;;;;gCAEjD3H,K,EAA+B6C,K,EAA0B;AAC7D,cAAI1I,EAAE,GAAG6F,KAAK,CAACuI,aAAN,CAAoBpJ,GAApB,CAAwB,IAAxB,CAAT;AACA,cAAI2I,MAAM,GAAG9H,KAAK,CAACuI,aAAN,CAAoBpJ,GAApB,CAAwB,QAAxB,CAAb;AACA,iBAAO,KAAKwI,gBAAL,CAAsBa,cAAtB,CAAqCrO,EAArC,EAAyC2N,MAAzC,CAAP;AACH;;;;;;;uBAPQQ,iB,EAAiB,2H;AAAA,K;;;aAAjBA,iB;AAAiB,eAAjBA,iBAAiB,K;AAAA,kBADN;;;;;sEACXA,iB,EAAiB;cAD7B,wDAC6B;eADlB;AAAChL,oBAAU,EAAC;AAAZ,S;AACkB,Q;;;;;;;;;;;;;;;;;;;;;;ACN9B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAMamL,gB;AAET,gCAAoB5G,IAApB,EAAsC;AAAA;;AAAlB,aAAAA,IAAA,GAAAA,IAAA;AAAqB;;;;kCAE/BnD,K,EAAoB;AAC1B,iBAAO,KAAKmD,IAAL,CAAUM,IAAV,CAAkC,gBAAlC,EAAoDzD,KAApD,CAAP;AACH;;;yCAEgB;AACb,iBAAO,KAAKmD,IAAL,CAAU1C,GAAV,CAAmC,gBAAnC,CAAP;AACH;;;;;;;uBAVQsJ,gB,EAAgB,uH;AAAA,K;;;aAAhBA,gB;AAAgB,eAAhBA,gBAAgB,K;AAAA,kBADJ;;;;;sEACZA,gB,EAAgB;cAD5B,wDAC4B;eADjB;AAACnL,oBAAU,EAAE;AAAb,S;AACiB,Q;;;;;;;;;;;;;;;;;;;;;;ACH7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAGaoL,e;AACT,+BAAoBxC,gBAApB,EAAsD;AAAA;;AAAlC,aAAAA,gBAAA,GAAAA,gBAAA;AAAqC;;;;gCAEjDlG,K,EAA+B6C,K,EAA0B;AAC7D,iBAAO,KAAKqD,gBAAL,CAAsByC,cAAtB,EAAP;AACH;;;;;;;uBALQD,e,EAAe,2H;AAAA,K;;;aAAfA,e;AAAe,eAAfA,eAAe,K;AAAA,kBADJ;;;;;sEACXA,e,EAAe;cAD3B,wDAC2B;eADhB;AAACpL,oBAAU,EAAC;AAAZ,S;AACgB,Q;;;;;;;;;;;;;;;;;;;;;;ACN5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACKQ;;AAAoC;;AAAI;;;;;;AACxC;;AAAqC;;AAAe;;;;;;AAAf;;AAAA;;;;;;AAKrC;;AAAoC;;AAAK;;;;;;AACzC;;AAAqC;;AAAiB;;;;;;AAAjB;;AAAA;;;;;;AAIrC;;AAAoC;;AAAO;;;;;;;;AAC3C;;AAAqC;;AACjC;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAuC;;AAAO;;AAAS;;;;;;AAG7D;;;;;;AACA;;;;QDZOsL,gB;AAKX,gCAAmBxE,WAAnB,EAAqDpE,KAArD,EAA4E;AAAA;;AAAzD,aAAAoE,WAAA,GAAAA,WAAA;AAAkC,aAAApE,KAAA,GAAAA,KAAA;AAFrD,aAAAyC,gBAAA,GAA6B,CAAC,IAAD,EAAO,MAAP,EAAe,QAAf,CAA7B;AAE+E;;;;mCAEvE;AACN,eAAK7G,KAAL,GAAa,KAAKoE,KAAL,CAAWC,QAAX,CAAoB8B,IAApB,CAAyBnG,KAAtC;AACA,eAAKwI,WAAL,CAAiByE,qBAAjB;AACD;;;wCAEe1O,E,EAAS;AACvB,eAAKiK,WAAL,CAAiB0E,eAAjB,CAAiC,KAAKlN,KAAL,CAAWyG,IAAX,CAAgB,UAAA0G,CAAC;AAAA,mBAAEA,CAAC,CAAC5O,EAAF,KAAOA,EAAT;AAAA,WAAjB,CAAjC;AACD;;;;;;;uBAdUyO,gB,EAAgB,0H,EAAA,+H;AAAA,K;;;YAAhBA,gB;AAAgB,kC;AAAA,e;AAAA,a;AAAA,sU;AAAA;AAAA;ACV7B;;AACE;;AACE;;AAEE;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAEA;;AACE;;AACA;;AAEF;;AAEA;;AACA;;AACF;;AACF;;AACA;;AACE;;AACF;;AACF;;;;AA1Be;;AAAA;;AAmBO;;AAAA;;AACP;;AAAA;;;;;;;;;sEDZFA,gB,EAAgB;cAL5B,uDAK4B;eALlB;AACThO,kBAAQ,EAAE,aADD;AAETC,qBAAW,EAAE,0BAFJ;AAGTC,mBAAS,EAAE,CAAC,yBAAD;AAHF,S;AAKkB,Q;;;;;;;;;;;;;;;;;;;;;;;;AEV7B;AAAA;;;AAAA;AAAA;AAAA,O,CAAA;AACA;AACA;;;AAEO,QAAMkO,WAAW,GAAG;AACzBC,gBAAU,EAAE;AADa,KAApB;AAIP;;;;;;;AAOA;;;;;;;;;;;;;;;;;ACfA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAMA,QAAI,sEAAYA,UAAhB,EAA4B;AAC1B;AACD;;AAED,gFAAyBC,eAAzB,CAAyC,yDAAzC,WACS,UAAAnM,GAAG;AAAA,aAAIJ,OAAO,CAACM,KAAR,CAAcF,GAAd,CAAJ;AAAA,KADZ","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-adminpanel',\n  templateUrl: './adminpanel.component.html',\n  styleUrls: ['./adminpanel.component.css']\n})\nexport class AdminpanelComponent implements OnInit {\n\n  constructor(private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  goToCreateQuestions(){\n    this.router.navigate(['/addquestion']);\n  }\n\n  goToViewQuestions(){\n    this.router.navigate(['/question']);\n  }\n\n  goToAddTest(){\n    this.router.navigate(['/addtest']);\n  }\n\n  goToViewShareTests(){\n    this.router.navigate(['/test']);\n  }\n\n  goToSharedSolvedTests(){\n    this.router.navigate(['/testshare']);\n  }\n\n\n\n}\n","<div class=\"justyfy-middle tiles\">\n    <div class=\"tile\">\n        <h2>Manage Questions</h2>\n        <button mat-raised-button color=\"primary\" (click)=\"goToCreateQuestions()\">Add Question</button>\n        <button mat-raised-button color=\"primary\" (click)=\"goToViewQuestions()\">View/Edit Questions</button>\n    </div>\n    <div class=\"tile\">\n        <h2>Manage Tests</h2>\n        <button mat-raised-button color=\"primary\" (click)=\"goToAddTest()\">Compose Test</button>\n        <button mat-raised-button color=\"primary\" (click)=\"goToViewShareTests()\">View/Edit/Share Tests</button>\n        <button mat-raised-button color=\"primary\" (click)=\"goToSharedSolvedTests()\">View Shared/Solved Tests</button>\n    </div>\n</div>","import { NgModule } from '@angular/core';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatSliderModule } from '@angular/material/slider';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule }from '@angular/material/card';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle'\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\n\r\n\r\nconst impexp = [\r\n  CommonModule,\r\n  MatInputModule,\r\n  MatMenuModule,\r\n  MatSliderModule,\r\n  MatListModule,\r\n  MatButtonModule,\r\n  MatCardModule,\r\n  MatButtonToggleModule,\r\n  MatTableModule,\r\n  MatCheckboxModule,\r\n  MatExpansionModule\r\n]\r\n\r\n@NgModule({\r\n  imports: [\r\n    impexp\r\n  ],\r\n  exports:[\r\n    impexp\r\n  ]\r\n})\r\nexport class AppMateriaModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Routes, RouterModule} from '@angular/router'\r\nimport { QuestionsComponent } from './questions/questions.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { AddquestionComponent } from './questions/addquestion/addquestion.component';\r\nimport { EditquestionComponent } from './questions/editquestion/editquestion.component';\r\nimport { TestsqaComponent } from './testsqa/testsqa.component';\r\nimport { AddtestqaComponent } from './testsqa/addtestqa/addtestqa.component';\r\nimport { QuestionsResolver } from './questions/questions.resolver';\r\nimport { EdittestqaComponent } from './testsqa/edittestqa/edittestqa.component';\r\nimport { TestResolver } from './testsqa/test.resolver';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { AuthGuard } from './services/auth.guard';\r\nimport { TestShareResolver } from './testsqa/testshare.resolver';\r\nimport { TestqashareComponent } from './testsqa/testqashare/testqashare.component';\r\nimport { TestqadisplaytosolveComponent } from './testsqa/testqadisplaytosolve/testqadisplaytosolve.component';\r\nimport { TestSolveResolver } from './testsqa/testsolve.resolver';\r\nimport { TestSolveGetAll } from './testsqa/testsolvegetall.resolver';\r\nimport { TestshareformComponent } from './testsqa/testshareform/testshareform.component';\r\nimport { AdminpanelComponent } from './adminpanel/adminpanel.component';\r\n\r\nconst appRoutes: Routes = [\r\n  {path: '', redirectTo: '/home', pathMatch: 'full'},\r\n  {path: 'home', component:HomeComponent},\r\n  {path: 'adminpanel', component:AdminpanelComponent, canActivate:[AuthGuard]},\r\n  {path: 'login', component: LoginComponent},\r\n  {path: 'register', component: RegisterComponent},\r\n  {path: 'testsolve/:id', component: TestqadisplaytosolveComponent, resolve:{testSolve: TestSolveResolver}},\r\n  {path: 'testshareform/:id', component: TestshareformComponent, canActivate:[AuthGuard]},\r\n  {path: 'testshare', component: TestqashareComponent, resolve:{testsShare: TestShareResolver, testsSolved: TestSolveGetAll}, canActivate:[AuthGuard]},\r\n  {path: 'question', component:QuestionsComponent, resolve:{questions: QuestionsResolver}, canActivate:[AuthGuard]},\r\n  {path: 'addquestion', component:AddquestionComponent, canActivate:[AuthGuard]},\r\n  {path: 'editquestion/:id', component:EditquestionComponent, canActivate:[AuthGuard]},\r\n  {path: 'test', component:TestsqaComponent, resolve:{tests: TestResolver, questions: QuestionsResolver}, canActivate:[AuthGuard]},\r\n  {path: 'addtest', component:AddtestqaComponent, resolve:{questions: QuestionsResolver}, canActivate:[AuthGuard]},\r\n  {path: 'edittest/:id', component:EdittestqaComponent, resolve:{questions: QuestionsResolver}, canActivate:[AuthGuard]}\r\n]\r\n\r\n\r\n@NgModule({\r\n  imports: [CommonModule, [RouterModule.forRoot(appRoutes)]],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'angular-application';\r\n}\r\n","<div class=\"center\">\r\n    <app-menu></app-menu>\r\n</div>\r\n<div>\r\n    <div class=\"center\">\r\n        <div class=\"wrapper\">\r\n            <router-outlet></router-outlet>\r\n        </div>\r\n    </div>\r\n</div>","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MenuComponent } from './menu/menu.component';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppMateriaModule } from './app-materia.module';\r\nimport { QuestionsComponent } from './questions/questions.component';\r\nimport { QuestionComponent } from './questions/question/question.component';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { EditquestionComponent } from './questions/editquestion/editquestion.component';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { AddquestionComponent } from './questions/addquestion/addquestion.component';\r\nimport { HttpInterceptorClass } from './interceptor/http.interceptor';\r\nimport { TestsqaComponent } from './testsqa/testsqa.component';\r\nimport { TestqaComponent } from './testsqa/testqa/testqa.component';\r\nimport { AddtestqaComponent } from './testsqa/addtestqa/addtestqa.component';\r\nimport { EdittestqaComponent } from './testsqa/edittestqa/edittestqa.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { TestqashareComponent } from './testsqa/testqashare/testqashare.component';\r\nimport { TestqadisplaytosolveComponent } from './testsqa/testqadisplaytosolve/testqadisplaytosolve.component';\r\nimport { TestshareformComponent } from './testsqa/testshareform/testshareform.component';\r\nimport { LocationStrategy, HashLocationStrategy } from '@angular/common';\nimport { AdminpanelComponent } from './adminpanel/adminpanel.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    MenuComponent,\r\n    QuestionsComponent,\r\n    QuestionComponent,\r\n    HomeComponent,\r\n    EditquestionComponent,\r\n    AddquestionComponent,\r\n    TestsqaComponent,\r\n    TestqaComponent,\r\n    AddtestqaComponent,\r\n    EdittestqaComponent,\r\n    LoginComponent,\r\n    RegisterComponent,\r\n    TestqashareComponent,\r\n    TestqadisplaytosolveComponent,\r\n    TestshareformComponent,\r\n    AdminpanelComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    HttpClientModule,\r\n    BrowserAnimationsModule,\r\n    AppMateriaModule,\r\n    AppRoutingModule\r\n  ],\r\n  providers: [{\r\n    provide: HTTP_INTERCEPTORS,\r\n    useClass: HttpInterceptorClass,\r\n    multi: true\r\n  },  {provide: LocationStrategy, useClass: HashLocationStrategy}\r\n],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<div class=\"justyfy-middle\">\r\n    <div class=\"bigfont\" style=\"width: 50%;\">\r\n        <p>The application allows you to create tests and share them with anonymous users.</p>\r\n        <p>First you need to create an account and log in, then go to the administration panel to create questions and tests.</p>\r\n        <p>Later, after creating the test, you need to share test and give the minimum number of points you need to get to pass the test.</p>\r\n        <p>After all, we have to send a link to someone who should solve the test.</p>\r\n    </div>\r\n</div>\r\n","import { HttpInterceptor, HttpRequest, HttpHandler, HttpErrorResponse, HttpEvent } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs/internal/Observable';\r\nimport { retry, catchError } from 'rxjs/operators';\r\nimport { throwError } from 'rxjs';\r\n\r\n@Injectable({providedIn:'root'})\r\nexport class HttpInterceptorClass  implements HttpInterceptor {\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n      console.log('Intercepted');\r\n      return next.handle(req)\r\n      .pipe(\r\n        retry(3),\r\n        catchError((err : HttpErrorResponse) => {\r\n          let errorMessage = '';\r\n          if (err.error instanceof ErrorEvent) {\r\n            // client-side error\r\n            errorMessage = `Error: ${err.message}`;\r\n          } else {\r\n            // server-side error\r\n            errorMessage = `Error Code: ${err.status}\\nMessage: ${err.message}`;\r\n          }\r\n          alert(errorMessage);\r\n          return throwError(errorMessage);\r\n        })\r\n      )\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { AuthService } from '../services/auth.service';\r\nimport { Router } from '@angular/router';\r\nimport { LoginModel } from './login.model';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  loginForm: FormGroup;\r\n  error = false;\r\n  credentials:LoginModel;\r\n\r\n  constructor(public authService: AuthService, private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n    this.loginForm = new FormGroup({\r\n      'username': new FormControl(null, Validators.required),\r\n      'password': new FormControl(null, Validators.required)\r\n    })  \r\n  }\r\n\r\n  login(){\r\n  \r\n    this.credentials = new LoginModel(\r\n      this.loginForm.value.username,\r\n      this.loginForm.value.password\r\n    );\r\n\r\n    this.authService.authenticate(this.credentials, () => {\r\n      this.router.navigateByUrl('/');\r\n    });\r\n    this.error = true;\r\n    return false;\r\n  }\r\n\r\n}\r\n","<form [formGroup]=\"loginForm\" (ngSubmit)=\"login()\" #f=\"ngForm\" class=\"center column\">\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label for=\"username\">User name</mat-label>\r\n      <input type=\"text\" id=\"username\" formControlName=\"username\" matInput> \r\n    </mat-form-field>\r\n    <mat-error *ngIf=\"!loginForm.get('username').valid && loginForm.get('username').touched\">Please enter user name</mat-error>\r\n    <mat-form-field appearance=\"fill\">\r\n        <mat-label for=\"password\">User password</mat-label>\r\n        <input type=\"password\" id=\"password\" formControlName=\"password\" matInput> \r\n    </mat-form-field>\r\n    <mat-error *ngIf=\"!loginForm.get('password').valid && loginForm.get('password').touched\">Please enter user password</mat-error>\r\n    <button mat-raised-button color=\"primary\" [disabled]=\"!loginForm.valid\" type=\"submit\" class=\"width10p20m\">Login</button>  \r\n</form>","export class LoginModel{\r\n    constructor(public username:string, public password:string ){};\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-menu',\r\n  templateUrl: './menu.component.html',\r\n  styleUrls: ['./menu.component.css']\r\n})\r\nexport class MenuComponent implements OnInit {\r\n\r\n  constructor(private authService: AuthService) {}\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  isAuthenticated(): boolean{\r\n    return this.authService.authenticated;\r\n  }\r\n\r\n  logout(){\r\n    this.authService.logout();\r\n  }\r\n}\r\n","<button routerLink=\"/home\" mat-button>Home</button>\r\n\r\n<button *ngIf=\"isAuthenticated()\"  routerLink=\"/adminpanel\"  mat-button>Admin Panel</button>\r\n\r\n<button *ngIf=\"isAuthenticated()\" mat-button (click)=\"logout()\">Logout</button>\r\n<button *ngIf=\"!isAuthenticated()\" routerLink=\"/login\" mat-button>Login</button>\r\n<button *ngIf=\"!isAuthenticated()\" routerLink=\"/register\" mat-button>Register</button>","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators, FormArray, AbstractControl, NgForm } from '@angular/forms';\r\nimport { QuestionCreateModel } from '../question.models';\r\nimport { QuestionService } from '../question.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-addquestion',\r\n  templateUrl: './addquestion.component.html',\r\n  styleUrls: ['./addquestion.component.css']\r\n})\r\nexport class AddquestionComponent implements OnInit {\r\n  questionForm: FormGroup;\r\n  @ViewChild('f') questionNgForm: NgForm;\r\n  \r\n\r\n  constructor(private questionService:QuestionService){ }\r\n\r\n  ngOnInit(): void {\r\n    this.questionForm = new FormGroup({\r\n      'content': new FormControl(null, Validators.required),\r\n      'answers' : new FormArray([])\r\n    },[this.numberOfQuestionsValidator])\r\n  }\r\n\r\n  onSubmit(){\r\n    const model = new QuestionCreateModel(\r\n      this.questionForm.value.content,\r\n      this.questionForm.value.answers\r\n    );\r\n\r\n    this.questionService.addQuestion(model).subscribe();\r\n    this.clearForm();\r\n  }\r\n\r\n  private clearForm() {\r\n    this.questionNgForm.resetForm();\r\n    \r\n    const formarray = (<FormArray>this.questionForm.get('answers'));\r\n    while (formarray.length !== 0) {\r\n      formarray.removeAt(0);\r\n    }\r\n  }\r\n\r\n  onRemoveQuestion(id:number)\r\n  {\r\n    (<FormArray>this.questionForm.get('answers')).removeAt(id);\r\n  }\r\n\r\n  onAddQuestion()\r\n  {\r\n    (<FormArray>this.questionForm.get('answers')).push(new FormGroup({\r\n      'correct': new FormControl(false),\r\n      'content': new FormControl(null, Validators.required)\r\n    }));\r\n  }\r\n\r\n  getControls(){\r\n    return (<FormArray>this.questionForm.get('answers')).controls;\r\n  }\r\n\r\n  numberOfQuestionsValidator(control: AbstractControl): { [key: string]: boolean } | null {\r\n    \r\n    const formArray = (<FormArray>control.get('answers'));\r\n    \r\n    let x = 0;\r\n\r\n    if(formArray.length < 2)\r\n    {\r\n      return {'answers': false};\r\n    }\r\n\r\n    for(let i=0; i<formArray.length; i++){\r\n      if(formArray.controls[i].value.correct === true){\r\n        x++;\r\n      }\r\n    }\r\n\r\n    if(x === 0)\r\n    {\r\n      return {'answers': false};\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n","<form [formGroup]=\"questionForm\" (ngSubmit)=\"onSubmit()\" #f=\"ngForm\" class=\"center column\">\r\n  <mat-form-field appearance=\"fill\">\r\n    <mat-label for=\"content\">Content of the question</mat-label>\r\n    <input type=\"text\" id=\"content\" formControlName=\"content\" matInput> \r\n  </mat-form-field>\r\n  <mat-error *ngIf=\"!questionForm.get('content').valid && questionForm.get('content').touched\">Please enter question content</mat-error>\r\n  <div formArrayName=\"answers\">\r\n    <div *ngFor=\"let answer of getControls(); let i = index\">\r\n      <div [formGroupName]=\"i\">\r\n        <mat-form-field  appearance=\"fill\">\r\n          <mat-label for=\"content\">Content of the answer</mat-label>\r\n          <input type=\"text\" id=\"content\" formControlName=\"content\" matInput> \r\n        </mat-form-field> \r\n        <mat-checkbox formControlName=\"correct\">Is Correct</mat-checkbox>\r\n        <button mat-fab color=\"warn\" class=\"marginleft20px\" type=\"button\" (click)=\"onRemoveQuestion(i)\">Remove</button>\r\n        <mat-error *ngIf=\"getControls()[i].invalid && getControls()[i].touched\">Please enter answer content.</mat-error>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <button mat-raised-button color=\"primary\" type=\"button\" class=\"width10p20m\" (click)=\"onAddQuestion()\">Add answer</button>\r\n  <button mat-raised-button color=\"primary\" [disabled]=\"!questionForm.valid\" type=\"submit\" class=\"width10p20m\">Create</button>  \r\n</form>","import { Component, OnInit } from '@angular/core';\r\nimport { QuestionService } from '../question.service';\r\nimport { FormGroup, FormControl, Validators, FormArray, AbstractControl } from '@angular/forms';\r\nimport { QuestionEditModel, AnswerEditModel, QuestionDisplayModel } from '../question.models';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-editquestion',\r\n  templateUrl: './editquestion.component.html',\r\n  styleUrls: ['./editquestion.component.css']\r\n})\r\nexport class EditquestionComponent implements OnInit {\r\n  questionForm: FormGroup;\r\n  id: number;\r\n\r\n  constructor(public questionService: QuestionService, private route: ActivatedRoute, private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n\r\n    this.id = this.route.snapshot.params['id'];\r\n    this.questionService.fetchQuestionToEdit(this.id);\r\n\r\n    this.questionForm = new FormGroup({\r\n      'content': new FormControl(this.questionService.getSelectedQuestion().content, Validators.required),\r\n      'answerEditDto': new FormArray([]),\r\n      'answerCreateDto': new FormArray([])\r\n    },[this.numberOfQuestionsValidator])\r\n\r\n    this.questionService.getSelectedQuestion().answers.forEach(a => {\r\n      this.addExistingAnswers(a);\r\n    });\r\n  }\r\n\r\n  getAnswerEditDtoControls() {\r\n    return (<FormArray>this.questionForm.get('answerEditDto')).controls;\r\n  }\r\n\r\n  getAnswerCreateDtoControls() {\r\n    return (<FormArray>this.questionForm.get('answerCreateDto')).controls;\r\n  }\r\n\r\n  onRemoveAnswerEditDtoControls(id: number) {\r\n    (<FormArray>this.questionForm.get('answerEditDto')).removeAt(id);\r\n  }\r\n\r\n  addExistingAnswers(existingAnswer: AnswerEditModel) {\r\n    (<FormArray>this.questionForm.get('answerEditDto')).push(new FormGroup({\r\n      'id': new FormControl(existingAnswer.id),\r\n      'correct': new FormControl(existingAnswer.correct),\r\n      'content': new FormControl(existingAnswer.content, Validators.required)\r\n    }))\r\n  }\r\n\r\n  onRemoveQuestionCreateDtoControls(id: number) {\r\n    (<FormArray>this.questionForm.get('answerCreateDto')).removeAt(id);\r\n  }\r\n\r\n  onAddQuestionCreateDtoControls() {\r\n    (<FormArray>this.questionForm.get('answerCreateDto')).push(new FormGroup({\r\n      'correct': new FormControl(false),\r\n      'content': new FormControl(null, Validators.required)\r\n    }));\r\n  }\r\n\r\n  onSubmit() {\r\n    const model = new QuestionEditModel(\r\n      this.questionForm.value.content,\r\n      this.questionForm.value.answerEditDto,\r\n      this.questionForm.value.answerCreateDto\r\n    );\r\n\r\n    this.questionService.editQuestion(this.id, model).subscribe();\r\n\r\n    this.clearForm();\r\n    this.router.navigate(['question']);\r\n  }\r\n\r\n  private clearForm() {\r\n    for (const key in this.questionForm.controls) {\r\n      this.questionForm.get(key).clearValidators();\r\n      this.questionForm.get(key).updateValueAndValidity();\r\n    }\r\n\r\n    this.questionForm.reset();\r\n\r\n    const formarrayAnswerEditDto = (<FormArray>this.questionForm.get('answerEditDto'));\r\n    while (formarrayAnswerEditDto.length !== 0) {\r\n      formarrayAnswerEditDto.removeAt(0);\r\n    }\r\n\r\n    const formarrayAnswerCreateDto = (<FormArray>this.questionForm.get('answerCreateDto'));\r\n    while (formarrayAnswerCreateDto.length !== 0) {\r\n      formarrayAnswerCreateDto.removeAt(0);\r\n    }\r\n\r\n  }\r\n\r\n  numberOfQuestionsValidator(control: AbstractControl): { [key: string]: boolean } | null {\r\n    \r\n    const formArrayAnswerEditDto = (<FormArray>control.get('answerEditDto'));\r\n    const formArrayAnswerCreateDto = (<FormArray>control.get('answerCreateDto'));\r\n    \r\n    let x = 0;\r\n\r\n    if(formArrayAnswerEditDto.length + formArrayAnswerCreateDto.length < 2)\r\n    {\r\n      return {'answerEditDto': false};\r\n    }\r\n\r\n    for(let i=0; i < formArrayAnswerEditDto.length; i++){\r\n      if(formArrayAnswerEditDto.controls[i].value.correct === true){\r\n        x++;\r\n      }\r\n    }\r\n\r\n    for(let i=0; i < formArrayAnswerCreateDto.length; i++){\r\n      if(formArrayAnswerCreateDto.controls[i].value.correct === true){\r\n        x++;\r\n      }\r\n    }\r\n\r\n    if(x === 0)\r\n    {\r\n      return {'answerEditDto': false};\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n}\r\n","<form [formGroup]=\"questionForm\" (ngSubmit)=\"onSubmit()\" class=\"center column\">\r\n  <mat-form-field appearance=\"fill\">\r\n    <mat-label for=\"content\">Content of the question</mat-label>\r\n    <input type=\"text\" id=\"content\" formControlName=\"content\" matInput>\r\n  </mat-form-field>\r\n  <mat-error *ngIf=\"!questionForm.get('content').valid && questionForm.get('content').touched\">Please enter question\r\n    content</mat-error>\r\n  <div formArrayName=\"answerEditDto\">\r\n    <div *ngFor=\"let answer of getAnswerEditDtoControls(); let i = index\">\r\n      <div [formGroupName]=\"i\">\r\n        <mat-form-field appearance=\"fill\">\r\n          <mat-label for=\"content\">Content of the answer</mat-label>\r\n          <input type=\"text\" id=\"content\" formControlName=\"content\" matInput>\r\n        </mat-form-field>\r\n        <mat-checkbox formControlName=\"correct\">Is Correct</mat-checkbox>\r\n        <button mat-fab color=\"warn\" class=\"marginleft20px\" type=\"button\"\r\n          (click)=\"onRemoveAnswerEditDtoControls(i)\">Remove</button>\r\n        <mat-error *ngIf=\"getAnswerEditDtoControls()[i].invalid && getAnswerEditDtoControls()[i].touched\">Please enter\r\n          answer content.</mat-error>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div formArrayName=\"answerCreateDto\">\r\n    <div *ngFor=\"let answer of getAnswerCreateDtoControls(); let i = index\">\r\n      <div [formGroupName]=\"i\">\r\n        <mat-form-field appearance=\"fill\">\r\n          <mat-label for=\"content\">Content of the answer</mat-label>\r\n          <input type=\"text\" id=\"content\" formControlName=\"content\" matInput>\r\n        </mat-form-field>\r\n        <mat-checkbox formControlName=\"correct\">Is Correct</mat-checkbox>\r\n        <button mat-fab color=\"warn\" class=\"marginleft20px\" type=\"button\"\r\n          (click)=\"onRemoveQuestionCreateDtoControls(i)\">Remove</button>\r\n        <mat-error *ngIf=\"getAnswerCreateDtoControls()[i].invalid && getAnswerCreateDtoControls()[i].touched\">Please\r\n          enter answer content.</mat-error>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <button mat-raised-button color=\"primary\" type=\"button\" class=\"width10p20m\"\r\n    (click)=\"onAddQuestionCreateDtoControls()\">Add answer</button>\r\n  <button mat-raised-button color=\"primary\" [disabled]=\"!questionForm.valid\" type=\"submit\"\r\n    class=\"width10p20m\">Save </button>\r\n</form>","export interface QuestionDisplayModel{\r\n    id:number,\r\n    content:string,\r\n    testsIds:number[],\r\n    answers:AnswerDisplayModel[]\r\n}\r\n\r\nexport interface AnswerDisplayModel{\r\n    id:number,\r\n    content:string,\r\n    correct:boolean\r\n}\r\n\r\nexport interface QuestionDisplaySolveModel{\r\n    id:number,\r\n    content:string,\r\n    testsIds:number[],\r\n    answers:AnswerDisplaySolveModel[]\r\n}\r\n\r\nexport class QuestionSolveModel{\r\n    constructor(public id:number, public answeredAnswers: AnsweredAnswerModel[]){}\r\n}\r\n\r\nexport interface AnswerDisplaySolveModel{\r\n    id:number,\r\n    content:string\r\n}\r\n\r\nexport class QuestionCreateModel{\r\n    constructor(public content:string, public answers: AnswerCreateModel[]){};\r\n}\r\n\r\nexport class QuestionEditModel{\r\n    constructor(public content:string, public answerEditDto: AnswerEditModel[], public answerCreateDto: AnswerCreateModel[]){};\r\n}\r\n\r\nexport class AnswerCreateModel{\r\n    constructor(public correct:boolean, public content:string){};\r\n}\r\n\r\nexport class AnswerEditModel{\r\n    constructor(public id:number, public correct:boolean, public content:string){};\r\n}\r\n\r\nexport class AnsweredAnswerModel{\r\n    constructor(public id:number, public correct:boolean){}\r\n}\r\n\r\nexport interface AnswerDisplaySolveInfoModel{\r\n    content:string,\r\n    correct:boolean,\r\n    userAnswer:boolean\r\n}\r\n\r\nexport interface QuestionSolveInfoModel{\r\n    content:string,\r\n    correct:boolean,\r\n    answerAnswered:AnswerDisplaySolveInfoModel[]\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { QuestionDisplayModel, QuestionCreateModel, QuestionEditModel } from './question.models';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class QuestionService  {\r\n    private selectedQuestion: QuestionDisplayModel = null;\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    fetchQuestions(): Observable<QuestionDisplayModel[]> {\r\n        return this.http.get<QuestionDisplayModel[]>('api/question');\r\n    }\r\n\r\n    fetchQuestionToEdit(id: number) {\r\n        this.http.get<QuestionDisplayModel>('api/question/' + id)\r\n            .subscribe(data => this.selectedQuestion = data);\r\n    }\r\n\r\n    editQuestion(id:number, questionEditModel: QuestionEditModel): Observable<QuestionDisplayModel> {\r\n        return this.http.patch<QuestionDisplayModel>('api/question/'+id, questionEditModel);\r\n    }\r\n\r\n    addQuestion(questionCreateModel: QuestionCreateModel): Observable<QuestionDisplayModel> {\r\n        return this.http.post<QuestionDisplayModel>('api/question', questionCreateModel);\r\n    }\r\n\r\n    setSelectedQuestion(questions:QuestionDisplayModel[], id: number) {\r\n        let element = questions.find(q => q.id === id);\r\n        this.selectedQuestion = element;\r\n    }\r\n\r\n    removeSelectedQuestion() {\r\n        this.selectedQuestion = null;\r\n    }\r\n\r\n    getSelectedQuestion(): QuestionDisplayModel {\r\n        return this.selectedQuestion;\r\n    }\r\n\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { QuestionService } from '../question.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-question',\r\n  templateUrl: './question.component.html',\r\n  styleUrls: ['./question.component.css']\r\n})\r\nexport class QuestionComponent implements OnInit {\r\n\r\n  constructor(public questionService:QuestionService, private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  navigateToEditPage(id: number)\r\n  {\r\n    this.router.navigate(['/editquestion/'+id]);\r\n  }\r\n\r\n}\r\n","<mat-card> \r\n    <div *ngIf=\"questionService.getSelectedQuestion()!==null; else noquestionselected\">\r\n        <h4>Content: {{questionService.getSelectedQuestion().content}}</h4>\r\n        <h4>Answers:</h4>\r\n        <mat-list role=\"list\">           \r\n            <mat-list-item *ngFor=\"let item of questionService.getSelectedQuestion().answers\" role=\"listitem\">{{item.content}} - is correct - {{item.correct}}</mat-list-item>\r\n        </mat-list>\r\n        <button mat-fab color=\"accent\" (click)=\"navigateToEditPage(questionService.getSelectedQuestion().id)\">Edit</button>\r\n    </div>\r\n    <ng-template #noquestionselected>Select question to edit.</ng-template>\r\n</mat-card>","import { Component, OnInit } from '@angular/core';\r\nimport { QuestionService } from './question.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { QuestionDisplayModel } from './question.models';\r\n\r\n@Component({\r\n  selector: 'app-questions',\r\n  templateUrl: './questions.component.html',\r\n  styleUrls: ['./questions.component.css']\r\n})\r\nexport class QuestionsComponent implements OnInit {\r\n\r\n  displayedColumns: string[] = ['id', 'content', 'select'];\r\n  questions: QuestionDisplayModel[];\r\n  constructor(public questionService: QuestionService, private route: ActivatedRoute) { }\r\n  \r\n  ngOnInit(): void {\r\n    this.questions = this.route.snapshot.data.questions;\r\n    this.questionService.removeSelectedQuestion();\r\n  }\r\n\r\n  setSelectedQuestion(id:number)\r\n  {\r\n    this.questionService.setSelectedQuestion(this.questions, id);\r\n  }\r\n\r\n}\r\n","<div class='row'>\r\n  <div class='column'>\r\n    <mat-table [dataSource]=\"questions\" class=\"mat-elevation-z8\">\r\n\r\n      <ng-container matColumnDef=\"id\">\r\n        <mat-header-cell *matHeaderCellDef> No. </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let element\"> {{element.id}} </mat-cell>\r\n      </ng-container>\r\n\r\n\r\n      <ng-container matColumnDef=\"content\">\r\n        <mat-header-cell *matHeaderCellDef> Content </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let element\"> {{element.content}} </mat-cell>\r\n      </ng-container>\r\n\r\n      <ng-container matColumnDef=\"select\">\r\n        <mat-header-cell *matHeaderCellDef> Select </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let element\"> <button mat-raised-button color=\"primary\"\r\n            (click)=\"setSelectedQuestion(element.id)\"> Select </button></mat-cell>\r\n      </ng-container>\r\n\r\n      <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n      <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n    </mat-table>\r\n  </div>\r\n  <div class='column'>\r\n    <app-question></app-question>\r\n  </div>\r\n</div>","import { Injectable } from \"@angular/core\";\r\nimport { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { QuestionDisplayModel } from './question.models';\r\nimport { QuestionService } from './question.service';\r\n\r\n@Injectable({providedIn:'root'})\r\nexport class QuestionsResolver implements Resolve<QuestionDisplayModel[]>{\r\n\r\n    constructor(private questionService: QuestionService){}\r\n\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): QuestionDisplayModel[] | import(\"rxjs\").Observable<QuestionDisplayModel[]> | Promise<QuestionDisplayModel[]> {\r\n        return this.questionService.fetchQuestions();\r\n    }\r\n\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators, AbstractControl } from '@angular/forms';\r\nimport { RegisterModel } from './reqister.model';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.css']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n\r\n  registerForm: FormGroup;\r\n  registerModel: RegisterModel;\r\n\r\n  constructor(private router: Router, private authService: AuthService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.registerForm = new FormGroup({\r\n      'name': new FormControl(null, Validators.required),\r\n      'email': new FormControl(null, [Validators.email, Validators.required]),\r\n      'password': new FormControl(null, Validators.required),\r\n      'passwordconf': new FormControl(null, Validators.required)\r\n    }, [this.passwordMathValidator])\r\n  }\r\n  \r\n  register(){\r\n      this.registerModel = new RegisterModel(\r\n        this.registerForm.value.name,\r\n        this.registerForm.value.email,\r\n        this.registerForm.value.password\r\n      );\r\n  \r\n      this.authService.register(this.registerModel).subscribe();\r\n      \r\n      this.router.navigateByUrl('/login');\r\n  }\r\n\r\n  passwordMathValidator(control: AbstractControl): { [key: string]: boolean } | null {\r\n    \r\n    const password = control.get('password').value;\r\n    const passwordConfirmation = control.get('passwordconf').value;\r\n\r\n    if(password !== passwordConfirmation){\r\n      control.get('passwordconf').setErrors({mustMatch: true});\r\n      return {'passwordconf': false};\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n","<form [formGroup]=\"registerForm\" (ngSubmit)=\"register()\" #f=\"ngForm\" class=\"center column\">\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label for=\"name\">User name</mat-label>\r\n      <input type=\"text\" id=\"name\" formControlName=\"name\" matInput> \r\n    </mat-form-field>\r\n    <mat-error *ngIf=\"!registerForm.get('name').valid && registerForm.get('name').touched\">Please enter user name</mat-error>\r\n    <mat-form-field appearance=\"fill\">\r\n        <mat-label for=\"email\">User email</mat-label>\r\n        <input type=\"email\" id=\"email\" formControlName=\"email\" matInput> \r\n    </mat-form-field>\r\n    <mat-error *ngIf=\"!registerForm.get('email').valid && registerForm.get('email').touched\">Please enter user email</mat-error>\r\n    <mat-form-field appearance=\"fill\">\r\n        <mat-label for=\"password\">Password</mat-label>\r\n        <input type=\"password\" id=\"password\" formControlName=\"password\" matInput> \r\n    </mat-form-field>\r\n    <mat-error *ngIf=\"!registerForm.get('password').valid && registerForm.get('password').touched\">Please enter password</mat-error>\r\n    <mat-form-field appearance=\"fill\">\r\n        <mat-label for=\"passwordconf\">Password</mat-label>\r\n        <input type=\"passwordconf\" id=\"passwordconf\" formControlName=\"passwordconf\" matInput> \r\n    </mat-form-field>\r\n    <mat-error *ngIf=\"!registerForm.get('passwordconf').valid && registerForm.get('passwordconf').touched\">Please enter password confirmation</mat-error>\r\n    <mat-error *ngIf=\"registerForm.get('passwordconf').hasError('mustMatch') && registerForm.get('passwordconf').touched\">Password dont match</mat-error>\r\n    <button mat-raised-button color=\"primary\" [disabled]=\"!registerForm.valid\" type=\"submit\" class=\"width10p20m\">Register</button>  \r\n</form>","export class RegisterModel{\r\n    constructor(public name:string, public email:string, public password:string){}\r\n}","import { CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { AuthService } from './auth.service';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({providedIn:'root'})\r\nexport class AuthGuard implements CanActivate{\r\n    constructor(private authService: AuthService, private router: Router){}\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | import(\"@angular/router\").UrlTree | import(\"rxjs\").Observable<boolean | import(\"@angular/router\").UrlTree> | Promise<boolean | import(\"@angular/router\").UrlTree> {\r\n        const isAuth = this.authService.authenticated;\r\n\r\n        if(isAuth){\r\n            return true;\r\n        }\r\n\r\n        return this.router.createUrlTree(['/login']);\r\n    }\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { RegisterModel } from '../register/reqister.model';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthService {\r\n    public authenticated = false;\r\n    constructor(private http: HttpClient, private router: Router) { }\r\n\r\n    authenticate(credentials, callback) {\r\n        const headers = new HttpHeaders(credentials ? {\r\n            authorization: 'Basic ' + btoa(credentials.username + ':' + credentials.password)\r\n        } : {});\r\n\r\n        this.http.get('api/login', { headers: headers }).subscribe(response => {\r\n            if (response['name']) {\r\n                this.authenticated = true;\r\n            } else {\r\n                this.authenticated = false;\r\n            }\r\n            return callback && callback();\r\n        })\r\n    }\r\n\r\n    register(registerModel: RegisterModel): Observable<any>{\r\n       return this.http.post('api/register', registerModel);\r\n    }\r\n\r\n    logout() {\r\n        this.http.post('/logout', {}).pipe(finalize(() => {\r\n            this.authenticated = false;\r\n            this.router.navigateByUrl('/login');\r\n        })).subscribe();\r\n    }\r\n}","import { Component, OnInit, ChangeDetectorRef, ViewChild } from '@angular/core';\r\nimport { QuestionService } from 'src/app/questions/question.service';\r\nimport { TestService } from '../test.service';\r\nimport { QuestionDisplayModel } from 'src/app/questions/question.models';\r\nimport { FormGroup, FormControl, Validators, NgForm } from '@angular/forms';\r\nimport { TestAddModel } from '../test.models';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { MatTable } from '@angular/material/table';\r\n\r\n@Component({\r\n  selector: 'app-addtestqa',\r\n  templateUrl: './addtestqa.component.html',\r\n  styleUrls: ['./addtestqa.component.css']\r\n})\r\nexport class AddtestqaComponent implements OnInit {\r\n  displayedColumns: string[] = ['name', 'add'];\r\n  testForm: FormGroup;\r\n  model: TestAddModel;\r\n  public questionsToAdd: QuestionDisplayModel[];\r\n  public questionsAdded: QuestionDisplayModel[] = [];\r\n  @ViewChild('f') testNgForm: NgForm;\r\n  @ViewChild(MatTable, { static: true }) addedTableQuestions: MatTable<any>;\r\n\r\n  constructor(public questionService: QuestionService, private testService: TestService, private route: ActivatedRoute) { }\r\n\r\n  ngOnInit(): void {\r\n    this.questionsToAdd = this.route.snapshot.data.questions;\r\n\r\n    this.model = new TestAddModel(\"\", []);\r\n    this.testForm = new FormGroup({\r\n      'name': new FormControl(null, Validators.required)\r\n    });\r\n  }\r\n\r\n  addQuestionIdToModel(id: number) {\r\n    this.model.questionsIds.push(id);\r\n    let question = this.questionsToAdd.find(q => q.id === id);\r\n    this.questionsAdded.push(question);\r\n    this.addedTableQuestions.renderRows();\r\n  }\r\n\r\n  removeQuestionIdFromModelAndTable(id: number) {\r\n    for (let i = 0; i < this.model.questionsIds.length; i++) {\r\n      if (this.model.questionsIds[i] === id) {\r\n        this.model.questionsIds.splice(i--, 1);\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < this.questionsAdded.length; i++) {\r\n      if (this.questionsAdded[i].id === id) {\r\n        this.questionsAdded.splice(i--, 1);\r\n      }\r\n    }\r\n\r\n    this.addedTableQuestions.renderRows();\r\n  }\r\n\r\n  canAddQuestion(id: number): boolean {\r\n    return this.model.questionsIds.includes(id);\r\n  }\r\n\r\n  numberOfQuestionsValidator(): boolean {\r\n    return this.model.questionsIds.length <= 0;\r\n  }\r\n\r\n  ceateFormGroup() {\r\n    this.testForm = new FormGroup({\r\n      'name': new FormControl(null, Validators.required)\r\n    });\r\n  }\r\n\r\n  clearForm() {\r\n\r\n    this.testNgForm.resetForm();\r\n\r\n    this.model = new TestAddModel(\"\", []);\r\n    this.questionsAdded = [];\r\n    this.addedTableQuestions.renderRows();\r\n  }\r\n\r\n  onSubmit() {\r\n    this.model.name = this.testForm.value.name;\r\n    this.testService.addTest(this.model).subscribe();\r\n\r\n    this.clearForm()\r\n  }\r\n\r\n}\r\n","<form [formGroup]=\"testForm\" (ngSubmit)=\"onSubmit()\" #f=\"ngForm\" class=\"center column\">\r\n  <mat-form-field appearance=\"fill\">\r\n    <mat-label for=\"name\">Name of test</mat-label>\r\n    <input type=\"text\" id=\"name\" formControlName=\"name\" matInput>\r\n  </mat-form-field>\r\n  <mat-error *ngIf=\"!testForm.get('name').valid && testForm.get('name').touched\">Please enter test name</mat-error>\r\n  <button mat-raised-button color=\"primary\" [disabled]=\"!testForm.valid || numberOfQuestionsValidator()\" type=\"submit\"\r\n    class=\"width10p20m\">Create</button>\r\n</form>\r\n\r\n<div class=\"center column\">\r\n  <div class=\"justyfy-middle column\">\r\n    <h3 class=\"margintop20px\">Added questions</h3>\r\n    <mat-error *ngIf=\"questionsAdded.length <= 0\">Add at least one question</mat-error>\r\n  </div>\r\n  <mat-table [dataSource]=\"questionsAdded\" class=\"mat-elevation-z8\">\r\n    <!-- Position Column -->\r\n    <ng-container matColumnDef=\"name\">\r\n      <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.content}} </mat-cell>\r\n    </ng-container>\r\n\r\n    <!-- Name Column -->\r\n    <ng-container matColumnDef=\"add\">\r\n      <mat-header-cell *matHeaderCellDef> Remove </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\">\r\n        <button mat-raised-button color=\"primary\" type=\"button\"\r\n          (click)=\"removeQuestionIdFromModelAndTable(element.id)\">Remove question</button>\r\n      </mat-cell>\r\n    </ng-container>\r\n\r\n    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n    <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n  </mat-table>\r\n</div>\r\n\r\n<div class=\"center column\">\r\n  <div class=\"justyfy-middle\">\r\n    <h3 class=\"margintop20px\">Available questions</h3>\r\n  </div>\r\n  <mat-table [dataSource]=\"questionsToAdd\" class=\"mat-elevation-z8\">\r\n    <!-- Position Column -->\r\n    <ng-container matColumnDef=\"name\">\r\n      <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.content}} </mat-cell>\r\n    </ng-container>\r\n\r\n    <!-- Name Column -->\r\n    <ng-container matColumnDef=\"add\">\r\n      <mat-header-cell *matHeaderCellDef> Add </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\">\r\n        <button mat-raised-button color=\"primary\" [disabled]=\"canAddQuestion(element.id)\" type=\"button\"\r\n          (click)=\"addQuestionIdToModel(element.id)\">Add question</button>\r\n      </mat-cell>\r\n    </ng-container>\r\n\r\n    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n    <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n  </mat-table>\r\n</div>","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { TestService } from '../test.service';\r\nimport { FormGroup, NgForm, FormControl, Validators } from '@angular/forms';\r\nimport { TestAddModel } from '../test.models';\r\nimport { QuestionDisplayModel } from 'src/app/questions/question.models';\r\nimport { MatTable } from '@angular/material/table';\r\n\r\n@Component({\r\n  selector: 'app-edittestqa',\r\n  templateUrl: './edittestqa.component.html',\r\n  styleUrls: ['./edittestqa.component.css']\r\n})\r\nexport class EdittestqaComponent implements OnInit {\r\n  displayedColumns: string[] = ['name', 'add'];\r\n  testForm: FormGroup;\r\n  model: TestAddModel;\r\n  public questionsToAdd: QuestionDisplayModel[];\r\n  public questionsAdded: QuestionDisplayModel[] = [];\r\n  @ViewChild('f') testNgForm: NgForm;\r\n  @ViewChild(MatTable, { static: true }) addedTableQuestions: MatTable<any>;\r\n  id:number;\r\n\r\n  constructor(public testService: TestService ,private route: ActivatedRoute, private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n    this.questionsToAdd = this.route.snapshot.data.questions;\r\n\r\n    this.id = this.route.snapshot.params['id'];\r\n    this.testService.fetchTestToEdit(this.id);\r\n\r\n    this.testForm = new FormGroup({\r\n      'name': new FormControl(this.testService.getSelectedTest().name, Validators.required)\r\n    });\r\n    \r\n    this.model = new TestAddModel(\"\",[]);\r\n    this.model.name = this.testService.getSelectedTest().name;\r\n\r\n    this.questionsAdded = this.testService.getSelectedTest().questionDisplayDto;\r\n\r\n    this.testService.getSelectedTest().questionDisplayDto.forEach(q=>\r\n      {\r\n        this.model.questionsIds.push(q.id);\r\n      });\r\n  }\r\n\r\n  removeQuestionIdFromModelAndTable(id: number) {\r\n    for (let i = 0; i < this.model.questionsIds.length; i++) {\r\n      if (this.model.questionsIds[i] === id) {\r\n        this.model.questionsIds.splice(i--, 1);\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < this.questionsAdded.length; i++) {\r\n      if (this.questionsAdded[i].id === id) {\r\n        this.questionsAdded.splice(i--, 1);\r\n      }\r\n    }\r\n\r\n    this.addedTableQuestions.renderRows();\r\n  }\r\n\r\n  clearForm() {\r\n\r\n    this.testNgForm.resetForm();\r\n\r\n    this.model = new TestAddModel(\"\", []);\r\n    this.questionsAdded = [];\r\n    this.addedTableQuestions.renderRows();\r\n  }\r\n\r\n  numberOfQuestionsValidator(): boolean {\r\n    return this.model.questionsIds.length <= 0;\r\n  }\r\n\r\n  canAddQuestion(id: number): boolean {\r\n    return this.model.questionsIds.includes(id);\r\n  }\r\n\r\n  addQuestionIdToModel(id: number) {\r\n    this.model.questionsIds.push(id);\r\n    let question = this.questionsToAdd.find(q => q.id === id);\r\n    this.questionsAdded.push(question);\r\n    this.addedTableQuestions.renderRows();\r\n  }\r\n\r\n  onSubmit() {\r\n    this.model.name = this.testForm.value.name;\r\n    this.testService.updateTest(this.model, this.id).subscribe();\r\n\r\n    this.clearForm();\r\n    this.router.navigate(['test']);\r\n  }\r\n\r\n}\r\n","<form [formGroup]=\"testForm\" (ngSubmit)=\"onSubmit()\" #f=\"ngForm\" class=\"center column\">\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label for=\"name\">Name of test</mat-label>\r\n      <input type=\"text\" id=\"name\" formControlName=\"name\" matInput>\r\n    </mat-form-field>\r\n    <mat-error *ngIf=\"!testForm.get('name').valid && testForm.get('name').touched\">Please enter test name</mat-error>\r\n    <button mat-raised-button color=\"primary\" [disabled]=\"!testForm.valid || numberOfQuestionsValidator()\" type=\"submit\"\r\n      class=\"width10p20m\">Update</button>\r\n  </form>\r\n  \r\n  <div class=\"center column\">\r\n    <div class=\"justyfy-middle column\">\r\n      <h3 class=\"margintop20px\">Added questions</h3>\r\n      <mat-error *ngIf=\"questionsAdded.length <= 0\">Add at least one question</mat-error>\r\n    </div>\r\n    <mat-table [dataSource]=\"questionsAdded\" class=\"mat-elevation-z8\">\r\n      <!-- Position Column -->\r\n      <ng-container matColumnDef=\"name\">\r\n        <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let element\"> {{element.content}} </mat-cell>\r\n      </ng-container>\r\n  \r\n      <!-- Name Column -->\r\n      <ng-container matColumnDef=\"add\">\r\n        <mat-header-cell *matHeaderCellDef> Remove </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let element\">\r\n          <button mat-raised-button color=\"primary\" type=\"button\"\r\n            (click)=\"removeQuestionIdFromModelAndTable(element.id)\">Remove question</button>\r\n        </mat-cell>\r\n      </ng-container>\r\n  \r\n      <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n      <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n    </mat-table>\r\n  </div>\r\n  \r\n  <div class=\"center column\">\r\n    <div class=\"justyfy-middle\">\r\n      <h3 class=\"margintop20px\">Available questions</h3>\r\n    </div>\r\n    <mat-table [dataSource]=\"questionsToAdd\" class=\"mat-elevation-z8\">\r\n      <!-- Position Column -->\r\n      <ng-container matColumnDef=\"name\">\r\n        <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let element\"> {{element.content}} </mat-cell>\r\n      </ng-container>\r\n  \r\n      <!-- Name Column -->\r\n      <ng-container matColumnDef=\"add\">\r\n        <mat-header-cell *matHeaderCellDef> Add </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let element\">\r\n          <button mat-raised-button color=\"primary\" [disabled]=\"canAddQuestion(element.id)\" type=\"button\"\r\n            (click)=\"addQuestionIdToModel(element.id)\">Add question</button>\r\n        </mat-cell>\r\n      </ng-container>\r\n  \r\n      <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n      <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n    </mat-table>\r\n  </div>","import { QuestionDisplayModel, QuestionDisplaySolveModel, QuestionSolveModel, QuestionSolveInfoModel } from '../questions/question.models';\r\n\r\nexport interface TestDisplayModel{\r\n    id:number,\r\n    name:string,\r\n    questionDisplayDto:QuestionDisplayModel[]\r\n}\r\n\r\nexport interface TestDisplaySolveModel{\r\n    id:number,\r\n    name:string,\r\n    questionDisplayDto:QuestionDisplaySolveModel[]\r\n}\r\n\r\nexport interface TestShareDisplayModel{\r\n    name:string,\r\n    shareUrl:string\r\n}\r\n\r\nexport class TestAddModel{\r\n    constructor(public name: string, public questionsIds: number[]){}\r\n}\r\n\r\nexport class ShareTestModel{\r\n    constructor(public id: number, public points: number){}\r\n}\r\n\r\nexport class TestSoveModel{\r\n    constructor(public name:string, public email:string, public id:number, public testShareId:number, public questions:QuestionSolveModel[]){}\r\n}\r\n\r\nexport interface TestSoveInfoModel{\r\n    name:string,\r\n    userName:string,\r\n    points:number,\r\n    maxPoints:number,\r\n    passed:boolean,\r\n    questionSolved:QuestionSolveInfoModel[]\r\n}","import { Injectable } from '@angular/core';\r\nimport { TestService } from './test.service';\r\nimport { TestDisplayModel } from './test.models';\r\nimport { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\n\r\n@Injectable({providedIn:'root'})\r\nexport class TestResolver implements Resolve<TestDisplayModel[]>{\r\n    \r\n    constructor(private testService: TestService){}\r\n\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): TestDisplayModel[] | import(\"rxjs\").Observable<TestDisplayModel[]> | Promise<TestDisplayModel[]> {\r\n        return this.testService.fetchTests();\r\n    }\r\n\r\n\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { TestDisplayModel, TestAddModel, TestDisplaySolveModel, ShareTestModel, TestShareDisplayModel } from './test.models';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({providedIn:'root'})\r\nexport class TestService {\r\n\r\n    private selectedTest: TestDisplayModel = null;\r\n\r\n    constructor(private http: HttpClient) { };\r\n\r\n    fetchTests(): Observable<TestDisplayModel[]>{\r\n        return this.http.get<TestDisplayModel[]>('api/test');\r\n    }\r\n\r\n    fetchTestToEdit(id: number) {\r\n        this.http.get<TestDisplayModel>('api/test/' + id)\r\n        .subscribe(data => this.selectedTest = data);\r\n    }\r\n\r\n    addTest(addTestModel: TestAddModel) : Observable<TestDisplayModel>{\r\n        return this.http.post<TestDisplayModel>('api/test', addTestModel);\r\n    }\r\n\r\n\r\n\r\n    updateTest(addTestModel: TestAddModel, id:number): Observable<TestDisplayModel>{\r\n        return this.http.patch<TestDisplayModel>('api/test/'+id, addTestModel);\r\n    }\r\n\r\n    setSelectedTestToNull(){\r\n        this.selectedTest = null;\r\n    }\r\n\r\n    setSelectedTest(test: TestDisplayModel){\r\n        this.selectedTest = test;\r\n    }\r\n\r\n    getSelectedTest(): TestDisplayModel{\r\n        return this.selectedTest;\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { TestService } from '../test.service';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { QuestionService } from 'src/app/questions/question.service';\r\nimport { QuestionDisplayModel } from 'src/app/questions/question.models';\r\n\r\n@Component({\r\n  selector: 'app-testqa',\r\n  templateUrl: './testqa.component.html',\r\n  styleUrls: ['./testqa.component.css']\r\n})\r\nexport class TestqaComponent implements OnInit {\r\n\r\n  questions: QuestionDisplayModel[];\r\n  constructor(public testService: TestService, private questionService: QuestionService, private router: Router, private route: ActivatedRoute) {}\r\n\r\n  ngOnInit(): void {\r\n    this.questions = this.route.snapshot.data.questions;\r\n  }\r\n\r\n  navigateToEditQuestion(id: number)\r\n  {\r\n    this.questionService.setSelectedQuestion(this.questions, id);\r\n    this.router.navigate(['/editquestion/'+id]);\r\n  }\r\n\r\n  navigateToEditTest(id: number){\r\n    this.router.navigate(['/edittest/'+id]);\r\n  }\r\n\r\n  navigateToShareTest(id: number){\r\n    this.router.navigate(['/testshareform/'+id]);\r\n  }\r\n\r\n}","<mat-card> \r\n    <div *ngIf=\"testService.getSelectedTest()!==null; else noquestionselected\">\r\n        <h4>Content: {{testService.getSelectedTest().name}}</h4>\r\n        <h4>Questions:</h4>\r\n        <mat-list role=\"list\">           \r\n            <mat-list-item *ngFor=\"let item of testService.getSelectedTest().questionDisplayDto\" role=\"listitem\"><div>{{item.content}}</div><button class=\"margin20px\" mat-mini-fab color=\"accent\" (click)=\"navigateToEditQuestion(item.id)\">Edit</button></mat-list-item>\r\n        </mat-list>\r\n        <button mat-fab color=\"accent\" (click)=\"navigateToEditTest(testService.getSelectedTest().id)\">Edit</button>\r\n        <button mat-fab color=\"accent\" (click)=\"navigateToShareTest(testService.getSelectedTest().id)\">Share</button>\r\n    </div>\r\n    <ng-template #noquestionselected>Select test to edit.</ng-template>\r\n</mat-card>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { TestDisplaySolveModel, TestSoveModel, TestSoveInfoModel } from '../test.models';\r\nimport { FormGroup, FormControl, Validators, FormArray, AbstractControl } from '@angular/forms';\r\nimport { QuestionSolveModel, AnsweredAnswerModel } from 'src/app/questions/question.models';\r\nimport { TestSolveService } from '../testsolve.service';\r\n\r\n@Component({\r\n  selector: 'app-testqadisplaytosolve',\r\n  templateUrl: './testqadisplaytosolve.component.html',\r\n  styleUrls: ['./testqadisplaytosolve.component.css']\r\n})\r\nexport class TestqadisplaytosolveComponent implements OnInit {\r\n\r\n  displayModel: TestDisplaySolveModel;\r\n  testSolveModelInfo :TestSoveInfoModel;\r\n  testSolveForm: FormGroup;\r\n  solveModel: TestSoveModel;\r\n  submited: boolean = false;\r\n  id:number;\r\n\r\n  constructor(private route: ActivatedRoute, private testSolveService: TestSolveService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.solveModel = new TestSoveModel(\"\",\"\",0,0,[]);\r\n\r\n    this.id = +this.route.snapshot.params['id'];\r\n    console.log(this.id);\r\n\r\n    this.displayModel = this.route.snapshot.data.testSolve;\r\n    this.setupForm();\r\n  }\r\n\r\n  public getQuestionControlArray(){\r\n    return (<FormArray>this.testSolveForm.get('questions')).controls;\r\n  }\r\n\r\n  public getAnswerControlArray(id:number){\r\n    return (<FormArray>this.getQuestionControlArray()[id].get('answers')).controls;\r\n  }\r\n\r\n  private setupForm() {\r\n\r\n    this.testSolveForm = new FormGroup({\r\n      'name': new FormControl(null, Validators.required),\r\n      'email': new FormControl(null,[Validators.required, Validators.email]),\r\n      'id': new FormControl(this.displayModel.id, Validators.required),\r\n      'questions': new FormArray([])\r\n    },[this.numberOfQuestionsValidator]);\r\n\r\n    let questionArray = (<FormArray>this.testSolveForm.get('questions'));\r\n\r\n    this.displayModel.questionDisplayDto.forEach(\r\n      (q, index) => {\r\n        questionArray.push(\r\n          new FormGroup({\r\n            'id': new FormControl(q.id),\r\n            'answers': new FormArray([])\r\n          })\r\n        )\r\n\r\n        let answers = (<FormArray>questionArray.controls[index].get('answers'));\r\n        \r\n        q.answers.forEach(a => {\r\n          answers.push(\r\n            new FormGroup({\r\n              'id': new FormControl(a.id),\r\n              'correct': new FormControl(false, Validators.required),\r\n            })\r\n          )\r\n        })\r\n      }\r\n    );\r\n  }\r\n\r\n  onSubmit(){\r\n\r\n    this.solveModel.id = this.testSolveForm.value.id;\r\n    this.solveModel.name = this.testSolveForm.value.name;\r\n    this.solveModel.email = this.testSolveForm.value.email;\r\n\r\n    this.solveModel.testShareId = this.id;\r\n\r\n    this.getQuestionControlArray().forEach(q =>{\r\n      \r\n      let answers = (<FormArray>q.get('answers')).controls;\r\n      let questionSolveModel = new QuestionSolveModel(q.value.id,[]);\r\n      answers.forEach(a =>{\r\n          questionSolveModel.answeredAnswers.push(new AnsweredAnswerModel(a.value.id, a.value.correct))\r\n      })\r\n      \r\n      this.solveModel.questions.push(questionSolveModel);\r\n    });\r\n    \r\n    this.testSolveService.solveTest(this.solveModel).subscribe\r\n    (\r\n      d => this.testSolveModelInfo = d\r\n    );\r\n\r\n    this.submited = true;\r\n  }\r\n\r\n  numberOfQuestionsValidator(control: AbstractControl): { [key: string]: boolean } | null {\r\n    \r\n    const formArrayQuestion = (<FormArray>control.get('questions')).controls;\r\n\r\n    let answersValidationModel: AnswersValidationModel[] = [];\r\n\r\n    for(let i=0; i < formArrayQuestion.length; i++){\r\n      const formArrayAnswers = (<FormArray>formArrayQuestion[i].get('answers'));\r\n      let validationModel = new AnswersValidationModel();\r\n      answersValidationModel.push(validationModel);\r\n      for(let ii=0 ; ii < formArrayAnswers.length; ii++){\r\n        if(formArrayAnswers.controls[ii].value.correct === true){\r\n          validationModel.numberOfCorrect++;\r\n        }\r\n      }  \r\n    }\r\n\r\n    for(let i=0; i < answersValidationModel.length; i++){\r\n      if(answersValidationModel[i].numberOfCorrect === 0){\r\n        return {'answers': false};\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\nexport class AnswersValidationModel{\r\n  numberOfCorrect:number = 0;\r\n}","<form *ngIf=\"!submited\" [formGroup]=\"testSolveForm\" (ngSubmit)=\"onSubmit()\" class=\"center column\">\r\n    <h2>Test: {{displayModel.name}}</h2>\r\n    <mat-form-field appearance=\"fill\">\r\n        <mat-label for=\"name\">Enter your name</mat-label>\r\n        <input type=\"text\" id=\"name\" formControlName=\"name\" matInput>\r\n    </mat-form-field>\r\n    <mat-error *ngIf=\"!testSolveForm.get('name').valid && testSolveForm.get('name').touched\">Please enter name\r\n    </mat-error>\r\n    <mat-form-field appearance=\"fill\">\r\n        <mat-label for=\"email\">Enter your email</mat-label>\r\n        <input type=\"email\" id=\"email\" formControlName=\"email\" matInput>\r\n    </mat-form-field>\r\n    <mat-error *ngIf=\"!testSolveForm.get('email').valid && testSolveForm.get('email').touched\">Please enter valid email\r\n    </mat-error>\r\n    <div formArrayName=\"questions\">\r\n        <div *ngFor=\"let question of getQuestionControlArray(); let i = index\">\r\n            <div [formGroupName]=\"i\">\r\n                <h3> {{i+1}}. {{displayModel.questionDisplayDto[i].content}}</h3>\r\n                <div formArrayName=\"answers\">\r\n                    <div *ngFor=\"let answer of getAnswerControlArray(i); let ii = index\">\r\n                        <div [formGroupName]=\"ii\" class=\"row\">\r\n                            <p>{{displayModel.questionDisplayDto[i].answers[ii].content}}</p>\r\n                            <mat-checkbox formControlName=\"correct\" class=\"marginleft20px\">Is Correct</mat-checkbox>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"!testSolveForm.valid\"\r\n        class=\"width10p20m\">Solve</button>\r\n</form>\r\n<div *ngIf=\"submited && testSolveForm != null\" class=\"center column\">\r\n    <div class=\"justyfy-middle\">\r\n        <h3>Test: {{testSolveModelInfo.name}}</h3>\r\n    </div>\r\n    <div class=\"justyfy-middle\">\r\n        <h4>Passed: {{testSolveModelInfo.passed}}</h4>\r\n    </div>\r\n    <div class=\"justyfy-middle\">\r\n        <h4>User Name: {{testSolveModelInfo.userName}}</h4>\r\n    </div>\r\n    <div class=\"justyfy-middle\">\r\n        <h4>Points recived: {{testSolveModelInfo.points}}</h4>\r\n    </div>\r\n    <div class=\"justyfy-middle\">\r\n        <h4>Points to pass: {{testSolveModelInfo.maxPoints}}</h4>\r\n    </div>\r\n    <div class=\"justyfy-middle-block\" *ngFor=\"let question of testSolveModelInfo.questionSolved; let i = index\">\r\n        <p  [ngClass]=\"{'correct': question.correct==true, 'incorrect': question.correct==false}\">{{i+1}}. Question content: {{question.content}}</p>\r\n       <div class=\"justyfy-middle-block\" *ngFor=\"let answer of question.answerAnswered\">\r\n           <p [ngClass]=\"{'correct': answer.correct==true, 'incorrect': answer.correct==false}\">Answer content: {{answer.content}} - User Answer: {{answer.userAnswer}}</p>\r\n        </div>\r\n    </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { TestShareDisplayModel, TestSoveInfoModel } from '../test.models';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { TestSolveService } from '../testsolve.service';\r\n\r\n@Component({\r\n  selector: 'app-testqashare',\r\n  templateUrl: './testqashare.component.html',\r\n  styleUrls: ['./testqashare.component.css']\r\n})\r\nexport class TestqashareComponent implements OnInit {\r\n  panelOpenState = false;\r\n  displayedColumnsShared: string[] = ['name','url'];\r\n  displayedColumnsSolved: string[] = ['name','username','points','maxpoints','passed','report'];\r\n  testsShare: TestShareDisplayModel[];\r\n  testsSolved: TestSoveInfoModel[];\r\n\r\n  constructor(private route: ActivatedRoute) { }\r\n\r\n  ngOnInit(): void {\r\n    this.testsSolved = this.route.snapshot.data.testsSolved;\r\n    this.testsShare = this.route.snapshot.data.testsShare;\r\n  }\r\n\r\n}\r\n","<div class='row'>\r\n  <div class='column'>\r\n    <h3>Shared tests</h3>\r\n    <mat-table [dataSource]=\"testsShare\" class=\"mat-elevation-z8\">\r\n\r\n      <ng-container matColumnDef=\"name\">\r\n        <mat-header-cell *matHeaderCellDef> Name of test </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let element\"> {{element.name}} </mat-cell>\r\n      </ng-container>\r\n\r\n      <ng-container matColumnDef=\"url\">\r\n        <mat-header-cell *matHeaderCellDef> Url to share </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let element\"> {{element.shareUrl}} </mat-cell>\r\n      </ng-container>\r\n\r\n      <mat-header-row *matHeaderRowDef=\"displayedColumnsShared\"></mat-header-row>\r\n      <mat-row *matRowDef=\"let row; columns: displayedColumnsShared;\"></mat-row>\r\n    </mat-table>\r\n  </div>\r\n</div>\r\n\r\n<div class='row'>\r\n  \r\n  <div class='column'>\r\n    <h3>Solved tests</h3>\r\n    <mat-table [dataSource]=\"testsSolved\" class=\"mat-elevation-z8\">\r\n\r\n      <ng-container matColumnDef=\"name\">\r\n        <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let element\"> {{element.name}} </mat-cell>\r\n      </ng-container>\r\n\r\n      <ng-container matColumnDef=\"username\">\r\n        <mat-header-cell *matHeaderCellDef> User Name </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let element\"> {{element.userName}} </mat-cell>\r\n      </ng-container>\r\n\r\n      <ng-container matColumnDef=\"points\">\r\n        <mat-header-cell *matHeaderCellDef> Points </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let element\"> {{element.points}} </mat-cell>\r\n      </ng-container>\r\n\r\n      <ng-container matColumnDef=\"maxpoints\">\r\n        <mat-header-cell *matHeaderCellDef> Max Points </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let element\"> {{element.maxPoints}} </mat-cell>\r\n      </ng-container>\r\n\r\n      <ng-container matColumnDef=\"passed\">\r\n        <mat-header-cell *matHeaderCellDef> Passed </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let element\"> {{element.passed}} </mat-cell>\r\n      </ng-container>\r\n\r\n      <ng-container matColumnDef=\"report\">\r\n        <mat-header-cell *matHeaderCellDef> Report </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let element\">\r\n          <mat-accordion>\r\n            <mat-expansion-panel hideToggle>\r\n              <mat-expansion-panel-header>\r\n                <mat-panel-title>\r\n                  Show Report\r\n                </mat-panel-title>\r\n              </mat-expansion-panel-header>\r\n              <div class=\"justyfy-middle-block\" *ngFor=\"let question of element.questionSolved; let i = index\">\r\n                <p  [ngClass]=\"{'correct': question.correct==true, 'incorrect': question.correct==false}\">{{i+1}}. Question content: {{question.content}}</p>\r\n               <div class=\"justyfy-middle-block\" *ngFor=\"let answer of question.answerAnswered\">\r\n                   <p [ngClass]=\"{'correct': answer.correct==true, 'incorrect': answer.correct==false}\">Answer content: {{answer.content}} - User Answer: {{answer.userAnswer}}</p>\r\n                </div>\r\n            </div>\r\n            </mat-expansion-panel>\r\n          </mat-accordion>\r\n        </mat-cell>\r\n      </ng-container>\r\n\r\n      <mat-header-row *matHeaderRowDef=\"displayedColumnsSolved\"></mat-header-row>\r\n      <mat-row *matRowDef=\"let row; columns: displayedColumnsSolved;\"></mat-row>\r\n    </mat-table>\r\n  </div>\r\n</div>","import { Injectable } from '@angular/core';\r\nimport { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { TestShareDisplayModel } from './test.models';\r\nimport { TestShareService } from './testshare.service';\r\n\r\n@Injectable({providedIn:'root'})\r\nexport class TestShareResolver implements Resolve<TestShareDisplayModel[]>{\r\n\r\n    constructor(private testShareService: TestShareService){}\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): TestShareDisplayModel[] | import(\"rxjs\").Observable<TestShareDisplayModel[]> | Promise<TestShareDisplayModel[]> {\r\n        return this.testShareService.fetchTestsShare();\r\n    }\r\n\r\n    \r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { TestShareDisplayModel, TestDisplaySolveModel, ShareTestModel } from './test.models';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\n@Injectable({providedIn:'root'})\r\nexport class TestShareService {\r\n\r\n\r\n    constructor(private http: HttpClient, private route: ActivatedRoute) { }\r\n\r\n\r\n    fetchTestsShare(): Observable<TestShareDisplayModel[]>{\r\n        return this.http.get<TestShareDisplayModel[]>('api/testshare');\r\n    }\r\n\r\n    shareTest(model: ShareTestModel): Observable<TestDisplaySolveModel>{\r\n        return this.http.post<TestDisplaySolveModel>('api/testshare', model);\r\n    }\r\n\r\n    getTestToSolve(id: string, secret: string): Observable<TestDisplaySolveModel>{\r\n        \r\n        let params = new HttpParams();\r\n        params = params.append('secret', secret);\r\n        params = params.append('id', id);\r\n\r\n        return this.http.get<TestDisplaySolveModel>('api/testsharesolve',\r\n        {\r\n            params: params\r\n        });\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators, AbstractControl } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { TestShareService } from '../testshare.service';\r\nimport { TestService } from '../test.service';\r\nimport { ShareTestModel } from '../test.models';\r\n\r\n@Component({\r\n  selector: 'app-testshareform',\r\n  templateUrl: './testshareform.component.html',\r\n  styleUrls: ['./testshareform.component.css']\r\n})\r\nexport class TestshareformComponent implements OnInit {\r\n\r\n  testShareForm: FormGroup;\r\n  id: number;\r\n  numberOfQuestions: number;\r\n  model: ShareTestModel;\r\n\r\n  constructor(private route: ActivatedRoute, private testShareService: TestShareService, public testService: TestService, private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n    this.id = +this.route.snapshot.params['id'];\r\n    this.testService.fetchTestToEdit(this.id);\r\n\r\n    this.numberOfQuestions = this.testService.getSelectedTest().questionDisplayDto.length;\r\n\r\n    this.setupForm();\r\n  }\r\n\r\n  setupForm(){\r\n    this.testShareForm = new FormGroup({\r\n      'points': new FormControl(null, Validators.required),\r\n      'maxpoints': new FormControl(this.numberOfQuestions, Validators.required)\r\n    },[this.validPoints])\r\n  }\r\n\r\n  onSubmit(){\r\n      this.model = new ShareTestModel(this.id, this.testShareForm.value.points);\r\n      this.testShareService.shareTest(this.model).subscribe(\r\n        (data) =>{\r\n          this.router.navigate(['/testshare/']);\r\n        }\r\n      );\r\n  }\r\n\r\n  validPoints(control: AbstractControl): { [key: string]: boolean } | null {\r\n    \r\n    let points = control.get('points').value;\r\n    let maxpoints = control.get('maxpoints').value;\r\n\r\n    if(points < 0 || points > maxpoints || points == 0){\r\n      return {'points': false};\r\n    }\r\n    return null;\r\n  }\r\n\r\n}\r\n","<form [formGroup]=\"testShareForm\" (ngSubmit)=\"onSubmit()\" class=\"center column\">\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label for=\"points\">Enter points to pass. Max points {{testService.getSelectedTest().questionDisplayDto.length}}</mat-label>\r\n      <input type=\"number\" id=\"points\" formControlName=\"points\" matInput> \r\n    </mat-form-field>\r\n    <mat-error *ngIf=\"!testShareForm.get('points').valid && testShareForm.get('points').touched\">Please enter valid points</mat-error>\r\n    <button mat-raised-button color=\"primary\" [disabled]=\"!testShareForm.valid\" type=\"submit\" class=\"width10p20m\">Share</button>  \r\n  </form>","import { Injectable } from '@angular/core';\r\nimport { TestDisplaySolveModel } from './test.models';\r\nimport { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { TestShareService } from './testshare.service';\r\n\r\n@Injectable({providedIn:'root'})\r\nexport class TestSolveResolver implements Resolve<TestDisplaySolveModel>{\r\n    constructor(private testShareService: TestShareService){}\r\n\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): TestDisplaySolveModel | import(\"rxjs\").Observable<TestDisplaySolveModel> | Promise<TestDisplaySolveModel> {\r\n        let id = route.queryParamMap.get('id');\r\n        let secret = route.queryParamMap.get('secret');\r\n        return this.testShareService.getTestToSolve(id, secret);\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { TestSoveModel, TestSoveInfoModel } from './test.models';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class TestSolveService{\r\n\r\n    constructor(private http: HttpClient) { };\r\n\r\n    solveTest(model: TestSoveModel): Observable<TestSoveInfoModel>{\r\n        return this.http.post<TestSoveInfoModel>('api/testsolved', model);\r\n    }\r\n\r\n    getSolvedTests() : Observable<TestSoveInfoModel[]>{\r\n        return this.http.get<TestSoveInfoModel[]>('api/testsolved');\r\n    }\r\n\r\n}","import { TestSolveService } from './testsolve.service';\r\nimport { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { TestSoveInfoModel } from './test.models';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({providedIn:'root'})\r\nexport class TestSolveGetAll implements Resolve<TestSoveInfoModel[]>{\r\n    constructor(private testSolveService: TestSolveService){}\r\n\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): TestSoveInfoModel[] | import(\"rxjs\").Observable<TestSoveInfoModel[]> | Promise<TestSoveInfoModel[]> {\r\n        return this.testSolveService.getSolvedTests();\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { TestService } from './test.service';\r\nimport { TestDisplayModel } from './test.models';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-testsqa',\r\n  templateUrl: './testsqa.component.html',\r\n  styleUrls: ['./testsqa.component.css']\r\n})\r\nexport class TestsqaComponent implements OnInit {\r\n\r\n  tests: TestDisplayModel[];\r\n  displayedColumns: string[] = ['id', 'name', 'select'];\r\n  \r\n  constructor(public testService: TestService, private route: ActivatedRoute) { }\r\n\r\n  ngOnInit(): void {\r\n    this.tests = this.route.snapshot.data.tests;\r\n    this.testService.setSelectedTestToNull();\r\n  }\r\n\r\n  setSelectedTest(id:number){\r\n    this.testService.setSelectedTest(this.tests.find(t=>t.id===id));\r\n  }\r\n\r\n}\r\n","<div class='row'>\r\n  <div class='column'>\r\n    <mat-table [dataSource]=\"tests\" class=\"mat-elevation-z8\">\r\n\r\n      <ng-container matColumnDef=\"id\">\r\n        <mat-header-cell *matHeaderCellDef> No. </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let element\"> {{element.id}} </mat-cell>\r\n      </ng-container>\r\n\r\n\r\n      <ng-container matColumnDef=\"name\">\r\n        <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let element\"> {{element.name}} </mat-cell>\r\n      </ng-container>\r\n\r\n      <ng-container matColumnDef=\"select\">\r\n        <mat-header-cell *matHeaderCellDef> Select </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let element\"> <button mat-raised-button color=\"primary\"\r\n            (click)=\"setSelectedTest(element.id)\"> Select </button></mat-cell>\r\n      </ng-container>\r\n\r\n      <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n      <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n    </mat-table>\r\n  </div>\r\n  <div class='column'>\r\n    <app-testqa></app-testqa>\r\n  </div>\r\n</div>","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}