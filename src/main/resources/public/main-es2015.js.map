{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app-materia.module.ts","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/home/home.component.ts","./src/app/home/home.component.html","./src/app/interceptor/http.interceptor.ts","./src/app/login/login.component.ts","./src/app/login/login.component.html","./src/app/login/login.model.ts","./src/app/menu/menu.component.ts","./src/app/menu/menu.component.html","./src/app/questions/addquestion/addquestion.component.ts","./src/app/questions/addquestion/addquestion.component.html","./src/app/questions/editquestion/editquestion.component.ts","./src/app/questions/editquestion/editquestion.component.html","./src/app/questions/question.models.ts","./src/app/questions/question.service.ts","./src/app/questions/question/question.component.ts","./src/app/questions/question/question.component.html","./src/app/questions/questions.component.ts","./src/app/questions/questions.component.html","./src/app/questions/questions.resolver.ts","./src/app/register/register.component.ts","./src/app/register/register.component.html","./src/app/register/reqister.model.ts","./src/app/services/auth.guard.ts","./src/app/services/auth.service.ts","./src/app/testsqa/addtestqa/addtestqa.component.ts","./src/app/testsqa/addtestqa/addtestqa.component.html","./src/app/testsqa/edittestqa/edittestqa.component.ts","./src/app/testsqa/edittestqa/edittestqa.component.html","./src/app/testsqa/test.models.ts","./src/app/testsqa/test.resolver.ts","./src/app/testsqa/test.service.ts","./src/app/testsqa/testqa/testqa.component.ts","./src/app/testsqa/testqa/testqa.component.html","./src/app/testsqa/testqadisplaytosolve/testqadisplaytosolve.component.ts","./src/app/testsqa/testqadisplaytosolve/testqadisplaytosolve.component.html","./src/app/testsqa/testqashare/testqashare.component.ts","./src/app/testsqa/testqashare/testqashare.component.html","./src/app/testsqa/testshare.resolver.ts","./src/app/testsqa/testshare.service.ts","./src/app/testsqa/testshareform/testshareform.component.ts","./src/app/testsqa/testshareform/testshareform.component.html","./src/app/testsqa/testsolve.resolver.ts","./src/app/testsqa/testsolve.service.ts","./src/app/testsqa/testsolvegetall.resolver.ts","./src/app/testsqa/testsqa.component.ts","./src/app/testsqa/testsqa.component.html","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatSliderModule } from '@angular/material/slider';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule }from '@angular/material/card';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle'\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\n\r\n\r\nconst impexp = [\r\n  CommonModule,\r\n  MatInputModule,\r\n  MatMenuModule,\r\n  MatSliderModule,\r\n  MatListModule,\r\n  MatButtonModule,\r\n  MatCardModule,\r\n  MatButtonToggleModule,\r\n  MatTableModule,\r\n  MatCheckboxModule,\r\n  MatExpansionModule\r\n]\r\n\r\n@NgModule({\r\n  imports: [\r\n    impexp\r\n  ],\r\n  exports:[\r\n    impexp\r\n  ]\r\n})\r\nexport class AppMateriaModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Routes, RouterModule} from '@angular/router'\r\nimport { QuestionsComponent } from './questions/questions.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { AddquestionComponent } from './questions/addquestion/addquestion.component';\r\nimport { EditquestionComponent } from './questions/editquestion/editquestion.component';\r\nimport { TestsqaComponent } from './testsqa/testsqa.component';\r\nimport { AddtestqaComponent } from './testsqa/addtestqa/addtestqa.component';\r\nimport { QuestionsResolver } from './questions/questions.resolver';\r\nimport { EdittestqaComponent } from './testsqa/edittestqa/edittestqa.component';\r\nimport { TestResolver } from './testsqa/test.resolver';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { AuthGuard } from './services/auth.guard';\r\nimport { TestShareResolver } from './testsqa/testshare.resolver';\r\nimport { TestqashareComponent } from './testsqa/testqashare/testqashare.component';\r\nimport { TestqadisplaytosolveComponent } from './testsqa/testqadisplaytosolve/testqadisplaytosolve.component';\r\nimport { TestSolveResolver } from './testsqa/testsolve.resolver';\r\nimport { TestSolveGetAll } from './testsqa/testsolvegetall.resolver';\r\nimport { TestshareformComponent } from './testsqa/testshareform/testshareform.component';\r\n\r\nconst appRoutes: Routes = [\r\n  {path: '', redirectTo: '/home', pathMatch: 'full'},\r\n  {path: 'home', component:HomeComponent},\r\n  {path: 'login', component: LoginComponent},\r\n  {path: 'register', component: RegisterComponent},\r\n  {path: 'testsolve/:id', component: TestqadisplaytosolveComponent, resolve:{testSolve: TestSolveResolver}},\r\n  {path: 'testshareform/:id', component: TestshareformComponent, canActivate:[AuthGuard]},\r\n  {path: 'testshare', component: TestqashareComponent, resolve:{testsShare: TestShareResolver, testsSolved: TestSolveGetAll}, canActivate:[AuthGuard]},\r\n  {path: 'question', component:QuestionsComponent, resolve:{questions: QuestionsResolver}, canActivate:[AuthGuard]},\r\n  {path: 'addquestion', component:AddquestionComponent, canActivate:[AuthGuard]},\r\n  {path: 'editquestion/:id', component:EditquestionComponent, canActivate:[AuthGuard]},\r\n  {path: 'test', component:TestsqaComponent, resolve:{tests: TestResolver, questions: QuestionsResolver}, canActivate:[AuthGuard]},\r\n  {path: 'addtest', component:AddtestqaComponent, resolve:{questions: QuestionsResolver}, canActivate:[AuthGuard]},\r\n  {path: 'edittest/:id', component:EdittestqaComponent, resolve:{questions: QuestionsResolver}, canActivate:[AuthGuard]}\r\n]\r\n\r\n\r\n@NgModule({\r\n  imports: [CommonModule, [RouterModule.forRoot(appRoutes)]],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'angular-application';\r\n}\r\n","<div class=\"center\">\r\n    <app-menu></app-menu>\r\n</div>\r\n<div>\r\n    <div class=\"center\">\r\n        <div class=\"wrapper\">\r\n            <router-outlet></router-outlet>\r\n        </div>\r\n    </div>\r\n</div>","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MenuComponent } from './menu/menu.component';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppMateriaModule } from './app-materia.module';\r\nimport { QuestionsComponent } from './questions/questions.component';\r\nimport { QuestionComponent } from './questions/question/question.component';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { EditquestionComponent } from './questions/editquestion/editquestion.component';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { AddquestionComponent } from './questions/addquestion/addquestion.component';\r\nimport { HttpInterceptorClass } from './interceptor/http.interceptor';\r\nimport { TestsqaComponent } from './testsqa/testsqa.component';\r\nimport { TestqaComponent } from './testsqa/testqa/testqa.component';\r\nimport { AddtestqaComponent } from './testsqa/addtestqa/addtestqa.component';\r\nimport { EdittestqaComponent } from './testsqa/edittestqa/edittestqa.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { TestqashareComponent } from './testsqa/testqashare/testqashare.component';\r\nimport { TestqadisplaytosolveComponent } from './testsqa/testqadisplaytosolve/testqadisplaytosolve.component';\r\nimport { TestshareformComponent } from './testsqa/testshareform/testshareform.component';\r\nimport { LocationStrategy, HashLocationStrategy } from '@angular/common';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    MenuComponent,\r\n    QuestionsComponent,\r\n    QuestionComponent,\r\n    HomeComponent,\r\n    EditquestionComponent,\r\n    AddquestionComponent,\r\n    TestsqaComponent,\r\n    TestqaComponent,\r\n    AddtestqaComponent,\r\n    EdittestqaComponent,\r\n    LoginComponent,\r\n    RegisterComponent,\r\n    TestqashareComponent,\r\n    TestqadisplaytosolveComponent,\r\n    TestshareformComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    HttpClientModule,\r\n    BrowserAnimationsModule,\r\n    AppMateriaModule,\r\n    AppRoutingModule\r\n  ],\r\n  providers: [{\r\n    provide: HTTP_INTERCEPTORS,\r\n    useClass: HttpInterceptorClass,\r\n    multi: true\r\n  },\r\n  {provide: LocationStrategy, useClass: HashLocationStrategy}\r\n],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<div class=\"justyfy-middle\">\r\n    <div class=\"bigfont\" style=\"width: 50%;\">\r\n        <p>The application allows you to create tests and share them with anonymous users.</p>\r\n        <p>First you need to create an account and log in, then go to the administration panel to create questions and tests.</p>\r\n        <p>Later, after creating the test, you need to share test and give the minimum number of points you need to get to pass the test.</p>\r\n        <p>After all, we have to send a link to someone who should solve the test.</p>\r\n    </div>\r\n</div>\r\n","import { HttpInterceptor, HttpRequest, HttpHandler, HttpErrorResponse, HttpEvent } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs/internal/Observable';\r\nimport { retry, catchError } from 'rxjs/operators';\r\nimport { throwError } from 'rxjs';\r\n\r\n@Injectable({providedIn:'root'})\r\nexport class HttpInterceptorClass  implements HttpInterceptor {\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n      console.log('Intercepted');\r\n      return next.handle(req)\r\n      .pipe(\r\n        retry(3),\r\n        catchError((err : HttpErrorResponse) => {\r\n          let errorMessage = '';\r\n          if (err.error instanceof ErrorEvent) {\r\n            // client-side error\r\n            errorMessage = `Error: ${err.message}`;\r\n          } else {\r\n            // server-side error\r\n            errorMessage = `Error Code: ${err.status}\\nMessage: ${err.message}`;\r\n          }\r\n          alert(errorMessage);\r\n          return throwError(errorMessage);\r\n        })\r\n      )\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { AuthService } from '../services/auth.service';\r\nimport { Router } from '@angular/router';\r\nimport { LoginModel } from './login.model';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  loginForm: FormGroup;\r\n  error = false;\r\n  credentials:LoginModel;\r\n\r\n  constructor(public authService: AuthService, private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n    this.loginForm = new FormGroup({\r\n      'username': new FormControl(null, Validators.required),\r\n      'password': new FormControl(null, Validators.required)\r\n    })  \r\n  }\r\n\r\n  login(){\r\n  \r\n    this.credentials = new LoginModel(\r\n      this.loginForm.value.username,\r\n      this.loginForm.value.password\r\n    );\r\n\r\n    this.authService.authenticate(this.credentials, () => {\r\n      this.router.navigateByUrl('/');\r\n    });\r\n    this.error = true;\r\n    return false;\r\n  }\r\n\r\n}\r\n","<form [formGroup]=\"loginForm\" (ngSubmit)=\"login()\" #f=\"ngForm\" class=\"center column\">\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label for=\"username\">User name</mat-label>\r\n      <input type=\"text\" id=\"username\" formControlName=\"username\" matInput> \r\n    </mat-form-field>\r\n    <mat-error *ngIf=\"!loginForm.get('username').valid && loginForm.get('username').touched\">Please enter user name</mat-error>\r\n    <mat-form-field appearance=\"fill\">\r\n        <mat-label for=\"password\">User password</mat-label>\r\n        <input type=\"password\" id=\"password\" formControlName=\"password\" matInput> \r\n    </mat-form-field>\r\n    <mat-error *ngIf=\"!loginForm.get('password').valid && loginForm.get('password').touched\">Please enter user password</mat-error>\r\n    <button mat-raised-button color=\"primary\" [disabled]=\"!loginForm.valid\" type=\"submit\" class=\"width10p20m\">Login</button>  \r\n</form>","export class LoginModel{\r\n    constructor(public username:string, public password:string ){};\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-menu',\r\n  templateUrl: './menu.component.html',\r\n  styleUrls: ['./menu.component.css']\r\n})\r\nexport class MenuComponent implements OnInit {\r\n\r\n  constructor(private authService: AuthService) {}\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  isAuthenticated(): boolean{\r\n    return this.authService.authenticated;\r\n  }\r\n\r\n  logout(){\r\n    this.authService.logout();\r\n  }\r\n}\r\n","<button routerLink=\"/home\" mat-button>Home</button>\r\n\r\n<button *ngIf=\"isAuthenticated()\"  mat-button [matMenuTriggerFor]=\"belowMenu\">Questions</button>\r\n<mat-menu  #belowMenu=\"matMenu\" yPosition=\"below\">\r\n  <button  mat-menu-item routerLink=\"/question\">View questions</button>\r\n  <button  mat-menu-item routerLink=\"/addquestion\">Add question</button>\r\n</mat-menu>\r\n\r\n<button *ngIf=\"isAuthenticated()\" mat-button [matMenuTriggerFor]=\"beforeMenu\">Tests</button>\r\n<mat-menu #beforeMenu=\"matMenu\" xPosition=\"before\">\r\n  <button mat-menu-item routerLink=\"/test\">View tests</button>\r\n  <button mat-menu-item routerLink=\"/addtest\">Compose test</button>\r\n  <button mat-menu-item routerLink=\"/testshare\">View shared tests</button>\r\n</mat-menu>\r\n\r\n<button *ngIf=\"isAuthenticated()\" mat-button (click)=\"logout()\">Logout</button>\r\n<button *ngIf=\"!isAuthenticated()\" routerLink=\"/login\" mat-button>Login</button>\r\n<button *ngIf=\"!isAuthenticated()\" routerLink=\"/register\" mat-button>Register</button>","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators, FormArray, AbstractControl, NgForm } from '@angular/forms';\r\nimport { QuestionCreateModel } from '../question.models';\r\nimport { QuestionService } from '../question.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-addquestion',\r\n  templateUrl: './addquestion.component.html',\r\n  styleUrls: ['./addquestion.component.css']\r\n})\r\nexport class AddquestionComponent implements OnInit {\r\n  questionForm: FormGroup;\r\n  @ViewChild('f') questionNgForm: NgForm;\r\n  \r\n\r\n  constructor(private questionService:QuestionService){ }\r\n\r\n  ngOnInit(): void {\r\n    this.questionForm = new FormGroup({\r\n      'content': new FormControl(null, Validators.required),\r\n      'answers' : new FormArray([])\r\n    },[this.numberOfQuestionsValidator])\r\n  }\r\n\r\n  onSubmit(){\r\n    const model = new QuestionCreateModel(\r\n      this.questionForm.value.content,\r\n      this.questionForm.value.answers\r\n    );\r\n\r\n    this.questionService.addQuestion(model).subscribe();\r\n    this.clearForm();\r\n  }\r\n\r\n  private clearForm() {\r\n    this.questionNgForm.resetForm();\r\n    \r\n    const formarray = (<FormArray>this.questionForm.get('answers'));\r\n    while (formarray.length !== 0) {\r\n      formarray.removeAt(0);\r\n    }\r\n  }\r\n\r\n  onRemoveQuestion(id:number)\r\n  {\r\n    (<FormArray>this.questionForm.get('answers')).removeAt(id);\r\n  }\r\n\r\n  onAddQuestion()\r\n  {\r\n    (<FormArray>this.questionForm.get('answers')).push(new FormGroup({\r\n      'correct': new FormControl(false),\r\n      'content': new FormControl(null, Validators.required)\r\n    }));\r\n  }\r\n\r\n  getControls(){\r\n    return (<FormArray>this.questionForm.get('answers')).controls;\r\n  }\r\n\r\n  numberOfQuestionsValidator(control: AbstractControl): { [key: string]: boolean } | null {\r\n    \r\n    const formArray = (<FormArray>control.get('answers'));\r\n    \r\n    let x = 0;\r\n\r\n    if(formArray.length < 2)\r\n    {\r\n      return {'answers': false};\r\n    }\r\n\r\n    for(let i=0; i<formArray.length; i++){\r\n      if(formArray.controls[i].value.correct === true){\r\n        x++;\r\n      }\r\n    }\r\n\r\n    if(x === 0)\r\n    {\r\n      return {'answers': false};\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n","<form [formGroup]=\"questionForm\" (ngSubmit)=\"onSubmit()\" #f=\"ngForm\" class=\"center column\">\r\n  <mat-form-field appearance=\"fill\">\r\n    <mat-label for=\"content\">Content of the question</mat-label>\r\n    <input type=\"text\" id=\"content\" formControlName=\"content\" matInput> \r\n  </mat-form-field>\r\n  <mat-error *ngIf=\"!questionForm.get('content').valid && questionForm.get('content').touched\">Please enter question content</mat-error>\r\n  <div formArrayName=\"answers\">\r\n    <div *ngFor=\"let answer of getControls(); let i = index\">\r\n      <div [formGroupName]=\"i\">\r\n        <mat-form-field  appearance=\"fill\">\r\n          <mat-label for=\"content\">Content of the answer</mat-label>\r\n          <input type=\"text\" id=\"content\" formControlName=\"content\" matInput> \r\n        </mat-form-field> \r\n        <mat-checkbox formControlName=\"correct\">Is Correct</mat-checkbox>\r\n        <button mat-fab color=\"warn\" class=\"marginleft20px\" type=\"button\" (click)=\"onRemoveQuestion(i)\">Remove</button>\r\n        <mat-error *ngIf=\"getControls()[i].invalid && getControls()[i].touched\">Please enter answer content.</mat-error>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <button mat-raised-button color=\"primary\" type=\"button\" class=\"width10p20m\" (click)=\"onAddQuestion()\">Add answer</button>\r\n  <button mat-raised-button color=\"primary\" [disabled]=\"!questionForm.valid\" type=\"submit\" class=\"width10p20m\">Create</button>  \r\n</form>","import { Component, OnInit } from '@angular/core';\r\nimport { QuestionService } from '../question.service';\r\nimport { FormGroup, FormControl, Validators, FormArray, AbstractControl } from '@angular/forms';\r\nimport { QuestionEditModel, AnswerEditModel, QuestionDisplayModel } from '../question.models';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-editquestion',\r\n  templateUrl: './editquestion.component.html',\r\n  styleUrls: ['./editquestion.component.css']\r\n})\r\nexport class EditquestionComponent implements OnInit {\r\n  questionForm: FormGroup;\r\n  id: number;\r\n\r\n  constructor(public questionService: QuestionService, private route: ActivatedRoute, private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n\r\n    this.id = this.route.snapshot.params['id'];\r\n    this.questionService.fetchQuestionToEdit(this.id);\r\n\r\n    this.questionForm = new FormGroup({\r\n      'content': new FormControl(this.questionService.getSelectedQuestion().content, Validators.required),\r\n      'answerEditDto': new FormArray([]),\r\n      'answerCreateDto': new FormArray([])\r\n    },[this.numberOfQuestionsValidator])\r\n\r\n    this.questionService.getSelectedQuestion().answers.forEach(a => {\r\n      this.addExistingAnswers(a);\r\n    });\r\n  }\r\n\r\n  getAnswerEditDtoControls() {\r\n    return (<FormArray>this.questionForm.get('answerEditDto')).controls;\r\n  }\r\n\r\n  getAnswerCreateDtoControls() {\r\n    return (<FormArray>this.questionForm.get('answerCreateDto')).controls;\r\n  }\r\n\r\n  onRemoveAnswerEditDtoControls(id: number) {\r\n    (<FormArray>this.questionForm.get('answerEditDto')).removeAt(id);\r\n  }\r\n\r\n  addExistingAnswers(existingAnswer: AnswerEditModel) {\r\n    (<FormArray>this.questionForm.get('answerEditDto')).push(new FormGroup({\r\n      'id': new FormControl(existingAnswer.id),\r\n      'correct': new FormControl(existingAnswer.correct),\r\n      'content': new FormControl(existingAnswer.content, Validators.required)\r\n    }))\r\n  }\r\n\r\n  onRemoveQuestionCreateDtoControls(id: number) {\r\n    (<FormArray>this.questionForm.get('answerCreateDto')).removeAt(id);\r\n  }\r\n\r\n  onAddQuestionCreateDtoControls() {\r\n    (<FormArray>this.questionForm.get('answerCreateDto')).push(new FormGroup({\r\n      'correct': new FormControl(false),\r\n      'content': new FormControl(null, Validators.required)\r\n    }));\r\n  }\r\n\r\n  onSubmit() {\r\n    const model = new QuestionEditModel(\r\n      this.questionForm.value.content,\r\n      this.questionForm.value.answerEditDto,\r\n      this.questionForm.value.answerCreateDto\r\n    );\r\n\r\n    this.questionService.editQuestion(this.id, model).subscribe();\r\n\r\n    this.clearForm();\r\n    this.router.navigate(['question']);\r\n  }\r\n\r\n  private clearForm() {\r\n    for (const key in this.questionForm.controls) {\r\n      this.questionForm.get(key).clearValidators();\r\n      this.questionForm.get(key).updateValueAndValidity();\r\n    }\r\n\r\n    this.questionForm.reset();\r\n\r\n    const formarrayAnswerEditDto = (<FormArray>this.questionForm.get('answerEditDto'));\r\n    while (formarrayAnswerEditDto.length !== 0) {\r\n      formarrayAnswerEditDto.removeAt(0);\r\n    }\r\n\r\n    const formarrayAnswerCreateDto = (<FormArray>this.questionForm.get('answerCreateDto'));\r\n    while (formarrayAnswerCreateDto.length !== 0) {\r\n      formarrayAnswerCreateDto.removeAt(0);\r\n    }\r\n\r\n  }\r\n\r\n  numberOfQuestionsValidator(control: AbstractControl): { [key: string]: boolean } | null {\r\n    \r\n    const formArrayAnswerEditDto = (<FormArray>control.get('answerEditDto'));\r\n    const formArrayAnswerCreateDto = (<FormArray>control.get('answerCreateDto'));\r\n    \r\n    let x = 0;\r\n\r\n    if(formArrayAnswerEditDto.length + formArrayAnswerCreateDto.length < 2)\r\n    {\r\n      return {'answerEditDto': false};\r\n    }\r\n\r\n    for(let i=0; i < formArrayAnswerEditDto.length; i++){\r\n      if(formArrayAnswerEditDto.controls[i].value.correct === true){\r\n        x++;\r\n      }\r\n    }\r\n\r\n    for(let i=0; i < formArrayAnswerCreateDto.length; i++){\r\n      if(formArrayAnswerCreateDto.controls[i].value.correct === true){\r\n        x++;\r\n      }\r\n    }\r\n\r\n    if(x === 0)\r\n    {\r\n      return {'answerEditDto': false};\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n}\r\n","<form [formGroup]=\"questionForm\" (ngSubmit)=\"onSubmit()\" class=\"center column\">\r\n  <mat-form-field appearance=\"fill\">\r\n    <mat-label for=\"content\">Content of the question</mat-label>\r\n    <input type=\"text\" id=\"content\" formControlName=\"content\" matInput>\r\n  </mat-form-field>\r\n  <mat-error *ngIf=\"!questionForm.get('content').valid && questionForm.get('content').touched\">Please enter question\r\n    content</mat-error>\r\n  <div formArrayName=\"answerEditDto\">\r\n    <div *ngFor=\"let answer of getAnswerEditDtoControls(); let i = index\">\r\n      <div [formGroupName]=\"i\">\r\n        <mat-form-field appearance=\"fill\">\r\n          <mat-label for=\"content\">Content of the answer</mat-label>\r\n          <input type=\"text\" id=\"content\" formControlName=\"content\" matInput>\r\n        </mat-form-field>\r\n        <mat-checkbox formControlName=\"correct\">Is Correct</mat-checkbox>\r\n        <button mat-fab color=\"warn\" class=\"marginleft20px\" type=\"button\"\r\n          (click)=\"onRemoveAnswerEditDtoControls(i)\">Remove</button>\r\n        <mat-error *ngIf=\"getAnswerEditDtoControls()[i].invalid && getAnswerEditDtoControls()[i].touched\">Please enter\r\n          answer content.</mat-error>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div formArrayName=\"answerCreateDto\">\r\n    <div *ngFor=\"let answer of getAnswerCreateDtoControls(); let i = index\">\r\n      <div [formGroupName]=\"i\">\r\n        <mat-form-field appearance=\"fill\">\r\n          <mat-label for=\"content\">Content of the answer</mat-label>\r\n          <input type=\"text\" id=\"content\" formControlName=\"content\" matInput>\r\n        </mat-form-field>\r\n        <mat-checkbox formControlName=\"correct\">Is Correct</mat-checkbox>\r\n        <button mat-fab color=\"warn\" class=\"marginleft20px\" type=\"button\"\r\n          (click)=\"onRemoveQuestionCreateDtoControls(i)\">Remove</button>\r\n        <mat-error *ngIf=\"getAnswerCreateDtoControls()[i].invalid && getAnswerCreateDtoControls()[i].touched\">Please\r\n          enter answer content.</mat-error>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <button mat-raised-button color=\"primary\" type=\"button\" class=\"width10p20m\"\r\n    (click)=\"onAddQuestionCreateDtoControls()\">Add answer</button>\r\n  <button mat-raised-button color=\"primary\" [disabled]=\"!questionForm.valid\" type=\"submit\"\r\n    class=\"width10p20m\">Save </button>\r\n</form>","export interface QuestionDisplayModel{\r\n    id:number,\r\n    content:string,\r\n    testsIds:number[],\r\n    answers:AnswerDisplayModel[]\r\n}\r\n\r\nexport interface AnswerDisplayModel{\r\n    id:number,\r\n    content:string,\r\n    correct:boolean\r\n}\r\n\r\nexport interface QuestionDisplaySolveModel{\r\n    id:number,\r\n    content:string,\r\n    testsIds:number[],\r\n    answers:AnswerDisplaySolveModel[]\r\n}\r\n\r\nexport class QuestionSolveModel{\r\n    constructor(public id:number, public answeredAnswers: AnsweredAnswerModel[]){}\r\n}\r\n\r\nexport interface AnswerDisplaySolveModel{\r\n    id:number,\r\n    content:string\r\n}\r\n\r\nexport class QuestionCreateModel{\r\n    constructor(public content:string, public answers: AnswerCreateModel[]){};\r\n}\r\n\r\nexport class QuestionEditModel{\r\n    constructor(public content:string, public answerEditDto: AnswerEditModel[], public answerCreateDto: AnswerCreateModel[]){};\r\n}\r\n\r\nexport class AnswerCreateModel{\r\n    constructor(public correct:boolean, public content:string){};\r\n}\r\n\r\nexport class AnswerEditModel{\r\n    constructor(public id:number, public correct:boolean, public content:string){};\r\n}\r\n\r\nexport class AnsweredAnswerModel{\r\n    constructor(public id:number, public correct:boolean){}\r\n}\r\n\r\nexport interface AnswerDisplaySolveInfoModel{\r\n    content:string,\r\n    correct:boolean,\r\n    userAnswer:boolean\r\n}\r\n\r\nexport interface QuestionSolveInfoModel{\r\n    content:string,\r\n    correct:boolean,\r\n    answerAnswered:AnswerDisplaySolveInfoModel[]\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { QuestionDisplayModel, QuestionCreateModel, QuestionEditModel } from './question.models';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class QuestionService  {\r\n    private selectedQuestion: QuestionDisplayModel = null;\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    fetchQuestions(): Observable<QuestionDisplayModel[]> {\r\n        return this.http.get<QuestionDisplayModel[]>('api/question');\r\n    }\r\n\r\n    fetchQuestionToEdit(id: number) {\r\n        this.http.get<QuestionDisplayModel>('api/question/' + id)\r\n            .subscribe(data => this.selectedQuestion = data);\r\n    }\r\n\r\n    editQuestion(id:number, questionEditModel: QuestionEditModel): Observable<QuestionDisplayModel> {\r\n        return this.http.patch<QuestionDisplayModel>('api/question/'+id, questionEditModel);\r\n    }\r\n\r\n    addQuestion(questionCreateModel: QuestionCreateModel): Observable<QuestionDisplayModel> {\r\n        return this.http.post<QuestionDisplayModel>('api/question', questionCreateModel);\r\n    }\r\n\r\n    setSelectedQuestion(questions:QuestionDisplayModel[], id: number) {\r\n        let element = questions.find(q => q.id === id);\r\n        this.selectedQuestion = element;\r\n    }\r\n\r\n    removeSelectedQuestion() {\r\n        this.selectedQuestion = null;\r\n    }\r\n\r\n    getSelectedQuestion(): QuestionDisplayModel {\r\n        return this.selectedQuestion;\r\n    }\r\n\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { QuestionService } from '../question.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-question',\r\n  templateUrl: './question.component.html',\r\n  styleUrls: ['./question.component.css']\r\n})\r\nexport class QuestionComponent implements OnInit {\r\n\r\n  constructor(public questionService:QuestionService, private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  navigateToEditPage(id: number)\r\n  {\r\n    this.router.navigate(['/editquestion/'+id]);\r\n  }\r\n\r\n}\r\n","<mat-card> \r\n    <div *ngIf=\"questionService.getSelectedQuestion()!==null; else noquestionselected\">\r\n        <h4>Content: {{questionService.getSelectedQuestion().content}}</h4>\r\n        <h4>Answers:</h4>\r\n        <mat-list role=\"list\">           \r\n            <mat-list-item *ngFor=\"let item of questionService.getSelectedQuestion().answers\" role=\"listitem\">{{item.content}} - is correct - {{item.correct}}</mat-list-item>\r\n        </mat-list>\r\n        <button mat-fab color=\"accent\" (click)=\"navigateToEditPage(questionService.getSelectedQuestion().id)\">Edit</button>\r\n    </div>\r\n    <ng-template #noquestionselected>Select question to edit.</ng-template>\r\n</mat-card>","import { Component, OnInit } from '@angular/core';\r\nimport { QuestionService } from './question.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { QuestionDisplayModel } from './question.models';\r\n\r\n@Component({\r\n  selector: 'app-questions',\r\n  templateUrl: './questions.component.html',\r\n  styleUrls: ['./questions.component.css']\r\n})\r\nexport class QuestionsComponent implements OnInit {\r\n\r\n  displayedColumns: string[] = ['id', 'content', 'select'];\r\n  questions: QuestionDisplayModel[];\r\n  constructor(public questionService: QuestionService, private route: ActivatedRoute) { }\r\n  \r\n  ngOnInit(): void {\r\n    this.questions = this.route.snapshot.data.questions;\r\n    this.questionService.removeSelectedQuestion();\r\n  }\r\n\r\n  setSelectedQuestion(id:number)\r\n  {\r\n    this.questionService.setSelectedQuestion(this.questions, id);\r\n  }\r\n\r\n}\r\n","<div class='row'>\r\n  <div class='column'>\r\n    <mat-table [dataSource]=\"questions\" class=\"mat-elevation-z8\">\r\n\r\n      <ng-container matColumnDef=\"id\">\r\n        <mat-header-cell *matHeaderCellDef> No. </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let element\"> {{element.id}} </mat-cell>\r\n      </ng-container>\r\n\r\n\r\n      <ng-container matColumnDef=\"content\">\r\n        <mat-header-cell *matHeaderCellDef> Content </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let element\"> {{element.content}} </mat-cell>\r\n      </ng-container>\r\n\r\n      <ng-container matColumnDef=\"select\">\r\n        <mat-header-cell *matHeaderCellDef> Select </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let element\"> <button mat-raised-button color=\"primary\"\r\n            (click)=\"setSelectedQuestion(element.id)\"> Select </button></mat-cell>\r\n      </ng-container>\r\n\r\n      <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n      <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n    </mat-table>\r\n  </div>\r\n  <div class='column'>\r\n    <app-question></app-question>\r\n  </div>\r\n</div>","import { Injectable } from \"@angular/core\";\r\nimport { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { QuestionDisplayModel } from './question.models';\r\nimport { QuestionService } from './question.service';\r\n\r\n@Injectable({providedIn:'root'})\r\nexport class QuestionsResolver implements Resolve<QuestionDisplayModel[]>{\r\n\r\n    constructor(private questionService: QuestionService){}\r\n\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): QuestionDisplayModel[] | import(\"rxjs\").Observable<QuestionDisplayModel[]> | Promise<QuestionDisplayModel[]> {\r\n        return this.questionService.fetchQuestions();\r\n    }\r\n\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators, AbstractControl } from '@angular/forms';\r\nimport { RegisterModel } from './reqister.model';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.css']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n\r\n  registerForm: FormGroup;\r\n  registerModel: RegisterModel;\r\n\r\n  constructor(private router: Router, private authService: AuthService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.registerForm = new FormGroup({\r\n      'name': new FormControl(null, Validators.required),\r\n      'email': new FormControl(null, [Validators.email, Validators.required]),\r\n      'password': new FormControl(null, Validators.required),\r\n      'passwordconf': new FormControl(null, Validators.required)\r\n    }, [this.passwordMathValidator])\r\n  }\r\n  \r\n  register(){\r\n      this.registerModel = new RegisterModel(\r\n        this.registerForm.value.name,\r\n        this.registerForm.value.email,\r\n        this.registerForm.value.password\r\n      );\r\n  \r\n      this.authService.register(this.registerModel).subscribe();\r\n      \r\n      this.router.navigateByUrl('/login');\r\n  }\r\n\r\n  passwordMathValidator(control: AbstractControl): { [key: string]: boolean } | null {\r\n    \r\n    const password = control.get('password').value;\r\n    const passwordConfirmation = control.get('passwordconf').value;\r\n\r\n    if(password !== passwordConfirmation){\r\n      control.get('passwordconf').setErrors({mustMatch: true});\r\n      return {'passwordconf': false};\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n","<form [formGroup]=\"registerForm\" (ngSubmit)=\"register()\" #f=\"ngForm\" class=\"center column\">\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label for=\"name\">User name</mat-label>\r\n      <input type=\"text\" id=\"name\" formControlName=\"name\" matInput> \r\n    </mat-form-field>\r\n    <mat-error *ngIf=\"!registerForm.get('name').valid && registerForm.get('name').touched\">Please enter user name</mat-error>\r\n    <mat-form-field appearance=\"fill\">\r\n        <mat-label for=\"email\">User email</mat-label>\r\n        <input type=\"email\" id=\"email\" formControlName=\"email\" matInput> \r\n    </mat-form-field>\r\n    <mat-error *ngIf=\"!registerForm.get('email').valid && registerForm.get('email').touched\">Please enter user email</mat-error>\r\n    <mat-form-field appearance=\"fill\">\r\n        <mat-label for=\"password\">Password</mat-label>\r\n        <input type=\"password\" id=\"password\" formControlName=\"password\" matInput> \r\n    </mat-form-field>\r\n    <mat-error *ngIf=\"!registerForm.get('password').valid && registerForm.get('password').touched\">Please enter password</mat-error>\r\n    <mat-form-field appearance=\"fill\">\r\n        <mat-label for=\"passwordconf\">Password</mat-label>\r\n        <input type=\"passwordconf\" id=\"passwordconf\" formControlName=\"passwordconf\" matInput> \r\n    </mat-form-field>\r\n    <mat-error *ngIf=\"!registerForm.get('passwordconf').valid && registerForm.get('passwordconf').touched\">Please enter password confirmation</mat-error>\r\n    <mat-error *ngIf=\"registerForm.get('passwordconf').hasError('mustMatch') && registerForm.get('passwordconf').touched\">Password dont match</mat-error>\r\n    <button mat-raised-button color=\"primary\" [disabled]=\"!registerForm.valid\" type=\"submit\" class=\"width10p20m\">Register</button>  \r\n</form>","export class RegisterModel{\r\n    constructor(public name:string, public email:string, public password:string){}\r\n}","import { CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { AuthService } from './auth.service';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({providedIn:'root'})\r\nexport class AuthGuard implements CanActivate{\r\n    constructor(private authService: AuthService, private router: Router){}\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | import(\"@angular/router\").UrlTree | import(\"rxjs\").Observable<boolean | import(\"@angular/router\").UrlTree> | Promise<boolean | import(\"@angular/router\").UrlTree> {\r\n        const isAuth = this.authService.authenticated;\r\n\r\n        if(isAuth){\r\n            return true;\r\n        }\r\n\r\n        return this.router.createUrlTree(['/login']);\r\n    }\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { RegisterModel } from '../register/reqister.model';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthService {\r\n    public authenticated = false;\r\n    constructor(private http: HttpClient, private router: Router) { }\r\n\r\n    authenticate(credentials, callback) {\r\n        const headers = new HttpHeaders(credentials ? {\r\n            authorization: 'Basic ' + btoa(credentials.username + ':' + credentials.password)\r\n        } : {});\r\n\r\n        this.http.get('api/login', { headers: headers }).subscribe(response => {\r\n            if (response['name']) {\r\n                this.authenticated = true;\r\n            } else {\r\n                this.authenticated = false;\r\n            }\r\n            return callback && callback();\r\n        })\r\n    }\r\n\r\n    register(registerModel: RegisterModel): Observable<any>{\r\n       return this.http.post('api/register', registerModel);\r\n    }\r\n\r\n    logout() {\r\n        this.http.post('/logout', {}).pipe(finalize(() => {\r\n            this.authenticated = false;\r\n            this.router.navigateByUrl('/login');\r\n        })).subscribe();\r\n    }\r\n}","import { Component, OnInit, ChangeDetectorRef, ViewChild } from '@angular/core';\r\nimport { QuestionService } from 'src/app/questions/question.service';\r\nimport { TestService } from '../test.service';\r\nimport { QuestionDisplayModel } from 'src/app/questions/question.models';\r\nimport { FormGroup, FormControl, Validators, NgForm } from '@angular/forms';\r\nimport { TestAddModel } from '../test.models';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { MatTable } from '@angular/material/table';\r\n\r\n@Component({\r\n  selector: 'app-addtestqa',\r\n  templateUrl: './addtestqa.component.html',\r\n  styleUrls: ['./addtestqa.component.css']\r\n})\r\nexport class AddtestqaComponent implements OnInit {\r\n  displayedColumns: string[] = ['name', 'add'];\r\n  testForm: FormGroup;\r\n  model: TestAddModel;\r\n  public questionsToAdd: QuestionDisplayModel[];\r\n  public questionsAdded: QuestionDisplayModel[] = [];\r\n  @ViewChild('f') testNgForm: NgForm;\r\n  @ViewChild(MatTable, { static: true }) addedTableQuestions: MatTable<any>;\r\n\r\n  constructor(public questionService: QuestionService, private testService: TestService, private route: ActivatedRoute) { }\r\n\r\n  ngOnInit(): void {\r\n    this.questionsToAdd = this.route.snapshot.data.questions;\r\n\r\n    this.model = new TestAddModel(\"\", []);\r\n    this.testForm = new FormGroup({\r\n      'name': new FormControl(null, Validators.required)\r\n    });\r\n  }\r\n\r\n  addQuestionIdToModel(id: number) {\r\n    this.model.questionsIds.push(id);\r\n    let question = this.questionsToAdd.find(q => q.id === id);\r\n    this.questionsAdded.push(question);\r\n    this.addedTableQuestions.renderRows();\r\n  }\r\n\r\n  removeQuestionIdFromModelAndTable(id: number) {\r\n    for (let i = 0; i < this.model.questionsIds.length; i++) {\r\n      if (this.model.questionsIds[i] === id) {\r\n        this.model.questionsIds.splice(i--, 1);\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < this.questionsAdded.length; i++) {\r\n      if (this.questionsAdded[i].id === id) {\r\n        this.questionsAdded.splice(i--, 1);\r\n      }\r\n    }\r\n\r\n    this.addedTableQuestions.renderRows();\r\n  }\r\n\r\n  canAddQuestion(id: number): boolean {\r\n    return this.model.questionsIds.includes(id);\r\n  }\r\n\r\n  numberOfQuestionsValidator(): boolean {\r\n    return this.model.questionsIds.length <= 0;\r\n  }\r\n\r\n  ceateFormGroup() {\r\n    this.testForm = new FormGroup({\r\n      'name': new FormControl(null, Validators.required)\r\n    });\r\n  }\r\n\r\n  clearForm() {\r\n\r\n    this.testNgForm.resetForm();\r\n\r\n    this.model = new TestAddModel(\"\", []);\r\n    this.questionsAdded = [];\r\n    this.addedTableQuestions.renderRows();\r\n  }\r\n\r\n  onSubmit() {\r\n    this.model.name = this.testForm.value.name;\r\n    this.testService.addTest(this.model).subscribe();\r\n\r\n    this.clearForm()\r\n  }\r\n\r\n}\r\n","<form [formGroup]=\"testForm\" (ngSubmit)=\"onSubmit()\" #f=\"ngForm\" class=\"center column\">\r\n  <mat-form-field appearance=\"fill\">\r\n    <mat-label for=\"name\">Name of test</mat-label>\r\n    <input type=\"text\" id=\"name\" formControlName=\"name\" matInput>\r\n  </mat-form-field>\r\n  <mat-error *ngIf=\"!testForm.get('name').valid && testForm.get('name').touched\">Please enter test name</mat-error>\r\n  <button mat-raised-button color=\"primary\" [disabled]=\"!testForm.valid || numberOfQuestionsValidator()\" type=\"submit\"\r\n    class=\"width10p20m\">Create</button>\r\n</form>\r\n\r\n<div class=\"center column\">\r\n  <div class=\"justyfy-middle column\">\r\n    <h3 class=\"margintop20px\">Added questions</h3>\r\n    <mat-error *ngIf=\"questionsAdded.length <= 0\">Add at least one question</mat-error>\r\n  </div>\r\n  <mat-table [dataSource]=\"questionsAdded\" class=\"mat-elevation-z8\">\r\n    <!-- Position Column -->\r\n    <ng-container matColumnDef=\"name\">\r\n      <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.content}} </mat-cell>\r\n    </ng-container>\r\n\r\n    <!-- Name Column -->\r\n    <ng-container matColumnDef=\"add\">\r\n      <mat-header-cell *matHeaderCellDef> Remove </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\">\r\n        <button mat-raised-button color=\"primary\" type=\"button\"\r\n          (click)=\"removeQuestionIdFromModelAndTable(element.id)\">Remove question</button>\r\n      </mat-cell>\r\n    </ng-container>\r\n\r\n    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n    <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n  </mat-table>\r\n</div>\r\n\r\n<div class=\"center column\">\r\n  <div class=\"justyfy-middle\">\r\n    <h3 class=\"margintop20px\">Available questions</h3>\r\n  </div>\r\n  <mat-table [dataSource]=\"questionsToAdd\" class=\"mat-elevation-z8\">\r\n    <!-- Position Column -->\r\n    <ng-container matColumnDef=\"name\">\r\n      <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.content}} </mat-cell>\r\n    </ng-container>\r\n\r\n    <!-- Name Column -->\r\n    <ng-container matColumnDef=\"add\">\r\n      <mat-header-cell *matHeaderCellDef> Add </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\">\r\n        <button mat-raised-button color=\"primary\" [disabled]=\"canAddQuestion(element.id)\" type=\"button\"\r\n          (click)=\"addQuestionIdToModel(element.id)\">Add question</button>\r\n      </mat-cell>\r\n    </ng-container>\r\n\r\n    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n    <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n  </mat-table>\r\n</div>","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { TestService } from '../test.service';\r\nimport { FormGroup, NgForm, FormControl, Validators } from '@angular/forms';\r\nimport { TestAddModel } from '../test.models';\r\nimport { QuestionDisplayModel } from 'src/app/questions/question.models';\r\nimport { MatTable } from '@angular/material/table';\r\n\r\n@Component({\r\n  selector: 'app-edittestqa',\r\n  templateUrl: './edittestqa.component.html',\r\n  styleUrls: ['./edittestqa.component.css']\r\n})\r\nexport class EdittestqaComponent implements OnInit {\r\n  displayedColumns: string[] = ['name', 'add'];\r\n  testForm: FormGroup;\r\n  model: TestAddModel;\r\n  public questionsToAdd: QuestionDisplayModel[];\r\n  public questionsAdded: QuestionDisplayModel[] = [];\r\n  @ViewChild('f') testNgForm: NgForm;\r\n  @ViewChild(MatTable, { static: true }) addedTableQuestions: MatTable<any>;\r\n  id:number;\r\n\r\n  constructor(public testService: TestService ,private route: ActivatedRoute, private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n    this.questionsToAdd = this.route.snapshot.data.questions;\r\n\r\n    this.id = this.route.snapshot.params['id'];\r\n    this.testService.fetchTestToEdit(this.id);\r\n\r\n    this.testForm = new FormGroup({\r\n      'name': new FormControl(this.testService.getSelectedTest().name, Validators.required)\r\n    });\r\n    \r\n    this.model = new TestAddModel(\"\",[]);\r\n    this.model.name = this.testService.getSelectedTest().name;\r\n\r\n    this.questionsAdded = this.testService.getSelectedTest().questionDisplayDto;\r\n\r\n    this.testService.getSelectedTest().questionDisplayDto.forEach(q=>\r\n      {\r\n        this.model.questionsIds.push(q.id);\r\n      });\r\n  }\r\n\r\n  removeQuestionIdFromModelAndTable(id: number) {\r\n    for (let i = 0; i < this.model.questionsIds.length; i++) {\r\n      if (this.model.questionsIds[i] === id) {\r\n        this.model.questionsIds.splice(i--, 1);\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < this.questionsAdded.length; i++) {\r\n      if (this.questionsAdded[i].id === id) {\r\n        this.questionsAdded.splice(i--, 1);\r\n      }\r\n    }\r\n\r\n    this.addedTableQuestions.renderRows();\r\n  }\r\n\r\n  clearForm() {\r\n\r\n    this.testNgForm.resetForm();\r\n\r\n    this.model = new TestAddModel(\"\", []);\r\n    this.questionsAdded = [];\r\n    this.addedTableQuestions.renderRows();\r\n  }\r\n\r\n  numberOfQuestionsValidator(): boolean {\r\n    return this.model.questionsIds.length <= 0;\r\n  }\r\n\r\n  canAddQuestion(id: number): boolean {\r\n    return this.model.questionsIds.includes(id);\r\n  }\r\n\r\n  addQuestionIdToModel(id: number) {\r\n    this.model.questionsIds.push(id);\r\n    let question = this.questionsToAdd.find(q => q.id === id);\r\n    this.questionsAdded.push(question);\r\n    this.addedTableQuestions.renderRows();\r\n  }\r\n\r\n  onSubmit() {\r\n    this.model.name = this.testForm.value.name;\r\n    this.testService.updateTest(this.model, this.id).subscribe();\r\n\r\n    this.clearForm();\r\n    this.router.navigate(['test']);\r\n  }\r\n\r\n}\r\n","<form [formGroup]=\"testForm\" (ngSubmit)=\"onSubmit()\" #f=\"ngForm\" class=\"center column\">\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label for=\"name\">Name of test</mat-label>\r\n      <input type=\"text\" id=\"name\" formControlName=\"name\" matInput>\r\n    </mat-form-field>\r\n    <mat-error *ngIf=\"!testForm.get('name').valid && testForm.get('name').touched\">Please enter test name</mat-error>\r\n    <button mat-raised-button color=\"primary\" [disabled]=\"!testForm.valid || numberOfQuestionsValidator()\" type=\"submit\"\r\n      class=\"width10p20m\">Update</button>\r\n  </form>\r\n  \r\n  <div class=\"center column\">\r\n    <div class=\"justyfy-middle column\">\r\n      <h3 class=\"margintop20px\">Added questions</h3>\r\n      <mat-error *ngIf=\"questionsAdded.length <= 0\">Add at least one question</mat-error>\r\n    </div>\r\n    <mat-table [dataSource]=\"questionsAdded\" class=\"mat-elevation-z8\">\r\n      <!-- Position Column -->\r\n      <ng-container matColumnDef=\"name\">\r\n        <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let element\"> {{element.content}} </mat-cell>\r\n      </ng-container>\r\n  \r\n      <!-- Name Column -->\r\n      <ng-container matColumnDef=\"add\">\r\n        <mat-header-cell *matHeaderCellDef> Remove </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let element\">\r\n          <button mat-raised-button color=\"primary\" type=\"button\"\r\n            (click)=\"removeQuestionIdFromModelAndTable(element.id)\">Remove question</button>\r\n        </mat-cell>\r\n      </ng-container>\r\n  \r\n      <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n      <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n    </mat-table>\r\n  </div>\r\n  \r\n  <div class=\"center column\">\r\n    <div class=\"justyfy-middle\">\r\n      <h3 class=\"margintop20px\">Available questions</h3>\r\n    </div>\r\n    <mat-table [dataSource]=\"questionsToAdd\" class=\"mat-elevation-z8\">\r\n      <!-- Position Column -->\r\n      <ng-container matColumnDef=\"name\">\r\n        <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let element\"> {{element.content}} </mat-cell>\r\n      </ng-container>\r\n  \r\n      <!-- Name Column -->\r\n      <ng-container matColumnDef=\"add\">\r\n        <mat-header-cell *matHeaderCellDef> Add </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let element\">\r\n          <button mat-raised-button color=\"primary\" [disabled]=\"canAddQuestion(element.id)\" type=\"button\"\r\n            (click)=\"addQuestionIdToModel(element.id)\">Add question</button>\r\n        </mat-cell>\r\n      </ng-container>\r\n  \r\n      <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n      <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n    </mat-table>\r\n  </div>","import { QuestionDisplayModel, QuestionDisplaySolveModel, QuestionSolveModel, QuestionSolveInfoModel } from '../questions/question.models';\r\n\r\nexport interface TestDisplayModel{\r\n    id:number,\r\n    name:string,\r\n    questionDisplayDto:QuestionDisplayModel[]\r\n}\r\n\r\nexport interface TestDisplaySolveModel{\r\n    id:number,\r\n    name:string,\r\n    questionDisplayDto:QuestionDisplaySolveModel[]\r\n}\r\n\r\nexport interface TestShareDisplayModel{\r\n    name:string,\r\n    shareUrl:string\r\n}\r\n\r\nexport class TestAddModel{\r\n    constructor(public name: string, public questionsIds: number[]){}\r\n}\r\n\r\nexport class ShareTestModel{\r\n    constructor(public id: number, public points: number){}\r\n}\r\n\r\nexport class TestSoveModel{\r\n    constructor(public name:string, public email:string, public id:number, public testShareId:number, public questions:QuestionSolveModel[]){}\r\n}\r\n\r\nexport interface TestSoveInfoModel{\r\n    name:string,\r\n    userName:string,\r\n    points:number,\r\n    maxPoints:number,\r\n    passed:boolean,\r\n    questionSolved:QuestionSolveInfoModel[]\r\n}","import { Injectable } from '@angular/core';\r\nimport { TestService } from './test.service';\r\nimport { TestDisplayModel } from './test.models';\r\nimport { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\n\r\n@Injectable({providedIn:'root'})\r\nexport class TestResolver implements Resolve<TestDisplayModel[]>{\r\n    \r\n    constructor(private testService: TestService){}\r\n\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): TestDisplayModel[] | import(\"rxjs\").Observable<TestDisplayModel[]> | Promise<TestDisplayModel[]> {\r\n        return this.testService.fetchTests();\r\n    }\r\n\r\n\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { TestDisplayModel, TestAddModel, TestDisplaySolveModel, ShareTestModel, TestShareDisplayModel } from './test.models';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({providedIn:'root'})\r\nexport class TestService {\r\n\r\n    private selectedTest: TestDisplayModel = null;\r\n\r\n    constructor(private http: HttpClient) { };\r\n\r\n    fetchTests(): Observable<TestDisplayModel[]>{\r\n        return this.http.get<TestDisplayModel[]>('api/test');\r\n    }\r\n\r\n    fetchTestToEdit(id: number) {\r\n        this.http.get<TestDisplayModel>('api/test/' + id)\r\n        .subscribe(data => this.selectedTest = data);\r\n    }\r\n\r\n    addTest(addTestModel: TestAddModel) : Observable<TestDisplayModel>{\r\n        return this.http.post<TestDisplayModel>('api/test', addTestModel);\r\n    }\r\n\r\n\r\n\r\n    updateTest(addTestModel: TestAddModel, id:number): Observable<TestDisplayModel>{\r\n        return this.http.patch<TestDisplayModel>('api/test/'+id, addTestModel);\r\n    }\r\n\r\n    setSelectedTestToNull(){\r\n        this.selectedTest = null;\r\n    }\r\n\r\n    setSelectedTest(test: TestDisplayModel){\r\n        this.selectedTest = test;\r\n    }\r\n\r\n    getSelectedTest(): TestDisplayModel{\r\n        return this.selectedTest;\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { TestService } from '../test.service';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { QuestionService } from 'src/app/questions/question.service';\r\nimport { QuestionDisplayModel } from 'src/app/questions/question.models';\r\n\r\n@Component({\r\n  selector: 'app-testqa',\r\n  templateUrl: './testqa.component.html',\r\n  styleUrls: ['./testqa.component.css']\r\n})\r\nexport class TestqaComponent implements OnInit {\r\n\r\n  questions: QuestionDisplayModel[];\r\n  constructor(public testService: TestService, private questionService: QuestionService, private router: Router, private route: ActivatedRoute) {}\r\n\r\n  ngOnInit(): void {\r\n    this.questions = this.route.snapshot.data.questions;\r\n  }\r\n\r\n  navigateToEditQuestion(id: number)\r\n  {\r\n    this.questionService.setSelectedQuestion(this.questions, id);\r\n    this.router.navigate(['/editquestion/'+id]);\r\n  }\r\n\r\n  navigateToEditTest(id: number){\r\n    this.router.navigate(['/edittest/'+id]);\r\n  }\r\n\r\n  navigateToShareTest(id: number){\r\n    this.router.navigate(['/testshareform/'+id]);\r\n  }\r\n\r\n}","<mat-card> \r\n    <div *ngIf=\"testService.getSelectedTest()!==null; else noquestionselected\">\r\n        <h4>Content: {{testService.getSelectedTest().name}}</h4>\r\n        <h4>Questions:</h4>\r\n        <mat-list role=\"list\">           \r\n            <mat-list-item *ngFor=\"let item of testService.getSelectedTest().questionDisplayDto\" role=\"listitem\"><div>{{item.content}}</div><button class=\"margin20px\" mat-mini-fab color=\"accent\" (click)=\"navigateToEditQuestion(item.id)\">Edit</button></mat-list-item>\r\n        </mat-list>\r\n        <button mat-fab color=\"accent\" (click)=\"navigateToEditTest(testService.getSelectedTest().id)\">Edit</button>\r\n        <button mat-fab color=\"accent\" (click)=\"navigateToShareTest(testService.getSelectedTest().id)\">Share</button>\r\n    </div>\r\n    <ng-template #noquestionselected>Select test to edit.</ng-template>\r\n</mat-card>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { TestDisplaySolveModel, TestSoveModel, TestSoveInfoModel } from '../test.models';\r\nimport { FormGroup, FormControl, Validators, FormArray, AbstractControl } from '@angular/forms';\r\nimport { QuestionSolveModel, AnsweredAnswerModel } from 'src/app/questions/question.models';\r\nimport { TestSolveService } from '../testsolve.service';\r\n\r\n@Component({\r\n  selector: 'app-testqadisplaytosolve',\r\n  templateUrl: './testqadisplaytosolve.component.html',\r\n  styleUrls: ['./testqadisplaytosolve.component.css']\r\n})\r\nexport class TestqadisplaytosolveComponent implements OnInit {\r\n\r\n  displayModel: TestDisplaySolveModel;\r\n  testSolveModelInfo :TestSoveInfoModel;\r\n  testSolveForm: FormGroup;\r\n  solveModel: TestSoveModel;\r\n  submited: boolean = false;\r\n  id:number;\r\n\r\n  constructor(private route: ActivatedRoute, private testSolveService: TestSolveService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.solveModel = new TestSoveModel(\"\",\"\",0,0,[]);\r\n\r\n    this.id = +this.route.snapshot.params['id'];\r\n    console.log(this.id);\r\n\r\n    this.displayModel = this.route.snapshot.data.testSolve;\r\n    this.setupForm();\r\n  }\r\n\r\n  public getQuestionControlArray(){\r\n    return (<FormArray>this.testSolveForm.get('questions')).controls;\r\n  }\r\n\r\n  public getAnswerControlArray(id:number){\r\n    return (<FormArray>this.getQuestionControlArray()[id].get('answers')).controls;\r\n  }\r\n\r\n  private setupForm() {\r\n\r\n    this.testSolveForm = new FormGroup({\r\n      'name': new FormControl(null, Validators.required),\r\n      'email': new FormControl(null,[Validators.required, Validators.email]),\r\n      'id': new FormControl(this.displayModel.id, Validators.required),\r\n      'questions': new FormArray([])\r\n    },[this.numberOfQuestionsValidator]);\r\n\r\n    let questionArray = (<FormArray>this.testSolveForm.get('questions'));\r\n\r\n    this.displayModel.questionDisplayDto.forEach(\r\n      (q, index) => {\r\n        questionArray.push(\r\n          new FormGroup({\r\n            'id': new FormControl(q.id),\r\n            'answers': new FormArray([])\r\n          })\r\n        )\r\n\r\n        let answers = (<FormArray>questionArray.controls[index].get('answers'));\r\n        \r\n        q.answers.forEach(a => {\r\n          answers.push(\r\n            new FormGroup({\r\n              'id': new FormControl(a.id),\r\n              'correct': new FormControl(false, Validators.required),\r\n            })\r\n          )\r\n        })\r\n      }\r\n    );\r\n  }\r\n\r\n  onSubmit(){\r\n\r\n    this.solveModel.id = this.testSolveForm.value.id;\r\n    this.solveModel.name = this.testSolveForm.value.name;\r\n    this.solveModel.email = this.testSolveForm.value.email;\r\n\r\n    this.solveModel.testShareId = this.id;\r\n\r\n    this.getQuestionControlArray().forEach(q =>{\r\n      \r\n      let answers = (<FormArray>q.get('answers')).controls;\r\n      let questionSolveModel = new QuestionSolveModel(q.value.id,[]);\r\n      answers.forEach(a =>{\r\n          questionSolveModel.answeredAnswers.push(new AnsweredAnswerModel(a.value.id, a.value.correct))\r\n      })\r\n      \r\n      this.solveModel.questions.push(questionSolveModel);\r\n    });\r\n    \r\n    this.testSolveService.solveTest(this.solveModel).subscribe\r\n    (\r\n      d => this.testSolveModelInfo = d\r\n    );\r\n\r\n    this.submited = true;\r\n  }\r\n\r\n  numberOfQuestionsValidator(control: AbstractControl): { [key: string]: boolean } | null {\r\n    \r\n    const formArrayQuestion = (<FormArray>control.get('questions')).controls;\r\n\r\n    let answersValidationModel: AnswersValidationModel[] = [];\r\n\r\n    for(let i=0; i < formArrayQuestion.length; i++){\r\n      const formArrayAnswers = (<FormArray>formArrayQuestion[i].get('answers'));\r\n      let validationModel = new AnswersValidationModel();\r\n      answersValidationModel.push(validationModel);\r\n      for(let ii=0 ; ii < formArrayAnswers.length; ii++){\r\n        if(formArrayAnswers.controls[ii].value.correct === true){\r\n          validationModel.numberOfCorrect++;\r\n        }\r\n      }  \r\n    }\r\n\r\n    for(let i=0; i < answersValidationModel.length; i++){\r\n      if(answersValidationModel[i].numberOfCorrect === 0){\r\n        return {'answers': false};\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\nexport class AnswersValidationModel{\r\n  numberOfCorrect:number = 0;\r\n}","<form *ngIf=\"!submited\" [formGroup]=\"testSolveForm\" (ngSubmit)=\"onSubmit()\" class=\"center column\">\r\n    <h2>Test: {{displayModel.name}}</h2>\r\n    <mat-form-field appearance=\"fill\">\r\n        <mat-label for=\"name\">Enter your name</mat-label>\r\n        <input type=\"text\" id=\"name\" formControlName=\"name\" matInput>\r\n    </mat-form-field>\r\n    <mat-error *ngIf=\"!testSolveForm.get('name').valid && testSolveForm.get('name').touched\">Please enter name\r\n    </mat-error>\r\n    <mat-form-field appearance=\"fill\">\r\n        <mat-label for=\"email\">Enter your email</mat-label>\r\n        <input type=\"email\" id=\"email\" formControlName=\"email\" matInput>\r\n    </mat-form-field>\r\n    <mat-error *ngIf=\"!testSolveForm.get('email').valid && testSolveForm.get('email').touched\">Please enter valid email\r\n    </mat-error>\r\n    <div formArrayName=\"questions\">\r\n        <div *ngFor=\"let question of getQuestionControlArray(); let i = index\">\r\n            <div [formGroupName]=\"i\">\r\n                <h3> {{i+1}}. {{displayModel.questionDisplayDto[i].content}}</h3>\r\n                <div formArrayName=\"answers\">\r\n                    <div *ngFor=\"let answer of getAnswerControlArray(i); let ii = index\">\r\n                        <div [formGroupName]=\"ii\" class=\"row\">\r\n                            <p>{{displayModel.questionDisplayDto[i].answers[ii].content}}</p>\r\n                            <mat-checkbox formControlName=\"correct\" class=\"marginleft20px\">Is Correct</mat-checkbox>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"!testSolveForm.valid\"\r\n        class=\"width10p20m\">Solve</button>\r\n</form>\r\n<div *ngIf=\"submited && testSolveForm != null\" class=\"center column\">\r\n    <div class=\"justyfy-middle\">\r\n        <h3>Test: {{testSolveModelInfo.name}}</h3>\r\n    </div>\r\n    <div class=\"justyfy-middle\">\r\n        <h4>Passed: {{testSolveModelInfo.passed}}</h4>\r\n    </div>\r\n    <div class=\"justyfy-middle\">\r\n        <h4>User Name: {{testSolveModelInfo.userName}}</h4>\r\n    </div>\r\n    <div class=\"justyfy-middle\">\r\n        <h4>Points recived: {{testSolveModelInfo.points}}</h4>\r\n    </div>\r\n    <div class=\"justyfy-middle\">\r\n        <h4>Points to pass: {{testSolveModelInfo.maxPoints}}</h4>\r\n    </div>\r\n    <div class=\"justyfy-middle-block\" *ngFor=\"let question of testSolveModelInfo.questionSolved; let i = index\">\r\n        <p  [ngClass]=\"{'correct': question.correct==true, 'incorrect': question.correct==false}\">{{i+1}}. Question content: {{question.content}}</p>\r\n       <div class=\"justyfy-middle-block\" *ngFor=\"let answer of question.answerAnswered\">\r\n           <p [ngClass]=\"{'correct': answer.correct==true, 'incorrect': answer.correct==false}\">Answer content: {{answer.content}} - User Answer: {{answer.userAnswer}}</p>\r\n        </div>\r\n    </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { TestShareDisplayModel, TestSoveInfoModel } from '../test.models';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { TestSolveService } from '../testsolve.service';\r\n\r\n@Component({\r\n  selector: 'app-testqashare',\r\n  templateUrl: './testqashare.component.html',\r\n  styleUrls: ['./testqashare.component.css']\r\n})\r\nexport class TestqashareComponent implements OnInit {\r\n  panelOpenState = false;\r\n  displayedColumnsShared: string[] = ['name','url'];\r\n  displayedColumnsSolved: string[] = ['name','username','points','maxpoints','passed','report'];\r\n  testsShare: TestShareDisplayModel[];\r\n  testsSolved: TestSoveInfoModel[];\r\n\r\n  constructor(private route: ActivatedRoute) { }\r\n\r\n  ngOnInit(): void {\r\n    this.testsSolved = this.route.snapshot.data.testsSolved;\r\n    this.testsShare = this.route.snapshot.data.testsShare;\r\n  }\r\n\r\n}\r\n","<div class='row'>\r\n  <div class='column'>\r\n    <h3>Shared tests</h3>\r\n    <mat-table [dataSource]=\"testsShare\" class=\"mat-elevation-z8\">\r\n\r\n      <ng-container matColumnDef=\"name\">\r\n        <mat-header-cell *matHeaderCellDef> Name of test </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let element\"> {{element.name}} </mat-cell>\r\n      </ng-container>\r\n\r\n      <ng-container matColumnDef=\"url\">\r\n        <mat-header-cell *matHeaderCellDef> Url to share </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let element\"> {{element.shareUrl}} </mat-cell>\r\n      </ng-container>\r\n\r\n      <mat-header-row *matHeaderRowDef=\"displayedColumnsShared\"></mat-header-row>\r\n      <mat-row *matRowDef=\"let row; columns: displayedColumnsShared;\"></mat-row>\r\n    </mat-table>\r\n  </div>\r\n</div>\r\n\r\n<div class='row'>\r\n  \r\n  <div class='column'>\r\n    <h3>Solved tests</h3>\r\n    <mat-table [dataSource]=\"testsSolved\" class=\"mat-elevation-z8\">\r\n\r\n      <ng-container matColumnDef=\"name\">\r\n        <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let element\"> {{element.name}} </mat-cell>\r\n      </ng-container>\r\n\r\n      <ng-container matColumnDef=\"username\">\r\n        <mat-header-cell *matHeaderCellDef> User Name </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let element\"> {{element.userName}} </mat-cell>\r\n      </ng-container>\r\n\r\n      <ng-container matColumnDef=\"points\">\r\n        <mat-header-cell *matHeaderCellDef> Points </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let element\"> {{element.points}} </mat-cell>\r\n      </ng-container>\r\n\r\n      <ng-container matColumnDef=\"maxpoints\">\r\n        <mat-header-cell *matHeaderCellDef> Max Points </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let element\"> {{element.maxPoints}} </mat-cell>\r\n      </ng-container>\r\n\r\n      <ng-container matColumnDef=\"passed\">\r\n        <mat-header-cell *matHeaderCellDef> Passed </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let element\"> {{element.passed}} </mat-cell>\r\n      </ng-container>\r\n\r\n      <ng-container matColumnDef=\"report\">\r\n        <mat-header-cell *matHeaderCellDef> Report </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let element\">\r\n          <mat-accordion>\r\n            <mat-expansion-panel hideToggle>\r\n              <mat-expansion-panel-header>\r\n                <mat-panel-title>\r\n                  Show Report\r\n                </mat-panel-title>\r\n              </mat-expansion-panel-header>\r\n              <div class=\"justyfy-middle-block\" *ngFor=\"let question of element.questionSolved; let i = index\">\r\n                <p  [ngClass]=\"{'correct': question.correct==true, 'incorrect': question.correct==false}\">{{i+1}}. Question content: {{question.content}}</p>\r\n               <div class=\"justyfy-middle-block\" *ngFor=\"let answer of question.answerAnswered\">\r\n                   <p [ngClass]=\"{'correct': answer.correct==true, 'incorrect': answer.correct==false}\">Answer content: {{answer.content}} - User Answer: {{answer.userAnswer}}</p>\r\n                </div>\r\n            </div>\r\n            </mat-expansion-panel>\r\n          </mat-accordion>\r\n        </mat-cell>\r\n      </ng-container>\r\n\r\n      <mat-header-row *matHeaderRowDef=\"displayedColumnsSolved\"></mat-header-row>\r\n      <mat-row *matRowDef=\"let row; columns: displayedColumnsSolved;\"></mat-row>\r\n    </mat-table>\r\n  </div>\r\n</div>","import { Injectable } from '@angular/core';\r\nimport { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { TestShareDisplayModel } from './test.models';\r\nimport { TestShareService } from './testshare.service';\r\n\r\n@Injectable({providedIn:'root'})\r\nexport class TestShareResolver implements Resolve<TestShareDisplayModel[]>{\r\n\r\n    constructor(private testShareService: TestShareService){}\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): TestShareDisplayModel[] | import(\"rxjs\").Observable<TestShareDisplayModel[]> | Promise<TestShareDisplayModel[]> {\r\n        return this.testShareService.fetchTestsShare();\r\n    }\r\n\r\n    \r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { TestShareDisplayModel, TestDisplaySolveModel, ShareTestModel } from './test.models';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\n@Injectable({providedIn:'root'})\r\nexport class TestShareService {\r\n\r\n\r\n    constructor(private http: HttpClient, private route: ActivatedRoute) { }\r\n\r\n\r\n    fetchTestsShare(): Observable<TestShareDisplayModel[]>{\r\n        return this.http.get<TestShareDisplayModel[]>('api/testshare');\r\n    }\r\n\r\n    shareTest(model: ShareTestModel): Observable<TestDisplaySolveModel>{\r\n        return this.http.post<TestDisplaySolveModel>('api/testshare', model);\r\n    }\r\n\r\n    getTestToSolve(id: string, secret: string): Observable<TestDisplaySolveModel>{\r\n        \r\n        let params = new HttpParams();\r\n        params = params.append('secret', secret);\r\n        params = params.append('id', id);\r\n\r\n        return this.http.get<TestDisplaySolveModel>('api/testsharesolve',\r\n        {\r\n            params: params\r\n        });\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators, AbstractControl } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { TestShareService } from '../testshare.service';\r\nimport { TestService } from '../test.service';\r\nimport { ShareTestModel } from '../test.models';\r\n\r\n@Component({\r\n  selector: 'app-testshareform',\r\n  templateUrl: './testshareform.component.html',\r\n  styleUrls: ['./testshareform.component.css']\r\n})\r\nexport class TestshareformComponent implements OnInit {\r\n\r\n  testShareForm: FormGroup;\r\n  id: number;\r\n  numberOfQuestions: number;\r\n  model: ShareTestModel;\r\n\r\n  constructor(private route: ActivatedRoute, private testShareService: TestShareService, public testService: TestService, private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n    this.id = +this.route.snapshot.params['id'];\r\n    this.testService.fetchTestToEdit(this.id);\r\n\r\n    this.numberOfQuestions = this.testService.getSelectedTest().questionDisplayDto.length;\r\n\r\n    this.setupForm();\r\n  }\r\n\r\n  setupForm(){\r\n    this.testShareForm = new FormGroup({\r\n      'points': new FormControl(null, Validators.required),\r\n      'maxpoints': new FormControl(this.numberOfQuestions, Validators.required)\r\n    },[this.validPoints])\r\n  }\r\n\r\n  onSubmit(){\r\n      this.model = new ShareTestModel(this.id, this.testShareForm.value.points);\r\n      this.testShareService.shareTest(this.model).subscribe(\r\n        (data) =>{\r\n          this.router.navigate(['/testshare/']);\r\n        }\r\n      );\r\n  }\r\n\r\n  validPoints(control: AbstractControl): { [key: string]: boolean } | null {\r\n    \r\n    let points = control.get('points').value;\r\n    let maxpoints = control.get('maxpoints').value;\r\n\r\n    if(points < 0 || points > maxpoints || points == 0){\r\n      return {'points': false};\r\n    }\r\n    return null;\r\n  }\r\n\r\n}\r\n","<form [formGroup]=\"testShareForm\" (ngSubmit)=\"onSubmit()\" class=\"center column\">\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label for=\"points\">Enter points to pass. Max points {{testService.getSelectedTest().questionDisplayDto.length}}</mat-label>\r\n      <input type=\"number\" id=\"points\" formControlName=\"points\" matInput> \r\n    </mat-form-field>\r\n    <mat-error *ngIf=\"!testShareForm.get('points').valid && testShareForm.get('points').touched\">Please enter valid points</mat-error>\r\n    <button mat-raised-button color=\"primary\" [disabled]=\"!testShareForm.valid\" type=\"submit\" class=\"width10p20m\">Share</button>  \r\n  </form>","import { Injectable } from '@angular/core';\r\nimport { TestDisplaySolveModel } from './test.models';\r\nimport { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { TestShareService } from './testshare.service';\r\n\r\n@Injectable({providedIn:'root'})\r\nexport class TestSolveResolver implements Resolve<TestDisplaySolveModel>{\r\n    constructor(private testShareService: TestShareService){}\r\n\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): TestDisplaySolveModel | import(\"rxjs\").Observable<TestDisplaySolveModel> | Promise<TestDisplaySolveModel> {\r\n        let id = route.queryParamMap.get('id');\r\n        let secret = route.queryParamMap.get('secret');\r\n        return this.testShareService.getTestToSolve(id, secret);\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { TestSoveModel, TestSoveInfoModel } from './test.models';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class TestSolveService{\r\n\r\n    constructor(private http: HttpClient) { };\r\n\r\n    solveTest(model: TestSoveModel): Observable<TestSoveInfoModel>{\r\n        return this.http.post<TestSoveInfoModel>('api/testsolved', model);\r\n    }\r\n\r\n    getSolvedTests() : Observable<TestSoveInfoModel[]>{\r\n        return this.http.get<TestSoveInfoModel[]>('api/testsolved');\r\n    }\r\n\r\n}","import { TestSolveService } from './testsolve.service';\r\nimport { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { TestSoveInfoModel } from './test.models';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({providedIn:'root'})\r\nexport class TestSolveGetAll implements Resolve<TestSoveInfoModel[]>{\r\n    constructor(private testSolveService: TestSolveService){}\r\n\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): TestSoveInfoModel[] | import(\"rxjs\").Observable<TestSoveInfoModel[]> | Promise<TestSoveInfoModel[]> {\r\n        return this.testSolveService.getSolvedTests();\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { TestService } from './test.service';\r\nimport { TestDisplayModel } from './test.models';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-testsqa',\r\n  templateUrl: './testsqa.component.html',\r\n  styleUrls: ['./testsqa.component.css']\r\n})\r\nexport class TestsqaComponent implements OnInit {\r\n\r\n  tests: TestDisplayModel[];\r\n  displayedColumns: string[] = ['id', 'name', 'select'];\r\n  \r\n  constructor(public testService: TestService, private route: ActivatedRoute) { }\r\n\r\n  ngOnInit(): void {\r\n    this.tests = this.route.snapshot.data.tests;\r\n    this.testService.setSelectedTestToNull();\r\n  }\r\n\r\n  setSelectedTest(id:number){\r\n    this.testService.setSelectedTest(this.tests.find(t=>t.id===id));\r\n  }\r\n\r\n}\r\n","<div class='row'>\r\n  <div class='column'>\r\n    <mat-table [dataSource]=\"tests\" class=\"mat-elevation-z8\">\r\n\r\n      <ng-container matColumnDef=\"id\">\r\n        <mat-header-cell *matHeaderCellDef> No. </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let element\"> {{element.id}} </mat-cell>\r\n      </ng-container>\r\n\r\n\r\n      <ng-container matColumnDef=\"name\">\r\n        <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let element\"> {{element.name}} </mat-cell>\r\n      </ng-container>\r\n\r\n      <ng-container matColumnDef=\"select\">\r\n        <mat-header-cell *matHeaderCellDef> Select </mat-header-cell>\r\n        <mat-cell *matCellDef=\"let element\"> <button mat-raised-button color=\"primary\"\r\n            (click)=\"setSelectedTest(element.id)\"> Select </button></mat-cell>\r\n      </ng-container>\r\n\r\n      <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n      <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n    </mat-table>\r\n  </div>\r\n  <div class='column'>\r\n    <app-testqa></app-testqa>\r\n  </div>\r\n</div>","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"sourceRoot":"webpack:///"}